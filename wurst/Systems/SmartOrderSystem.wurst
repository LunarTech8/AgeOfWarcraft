/*-------------------------------------------------------------
// Version number:
1.0.0

// Description:
Handles all smart orders and allows for the addition of custom, unrestricted functionality.

// Changelog:
- 1.0.0:
Initial version.
-------------------------------------------------------------*/
package SmartOrderSystem
import RegisterEvents
import Orders
import ConstantData
import UtilityFunctions
import Entity
import AbilitySystem
import LinkedList


// --------------------
// Data code
// --------------------

function getSmartUsedAbilityIds() returns LinkedList<int>
	let abilityIds = new LinkedList<int>()
	// Add ability ids in order of their priority:
	abilityIds.add(AbilityIdsCustom.harvest)
	abilityIds.add(AbilityIdsCustom.build)
	abilityIds.add(AbilityIdsCustom.enterBuilding)
	abilityIds.add(AbilityIdsCustom.transferWares)
	abilityIds.add(AbilityIdsCustom.targetDestructable)
	return abilityIds


// --------------------
// Functional code
// --------------------

let SMART_USED_ABILITY_IDS = getSmartUsedAbilityIds()

function unit.searchForValidAbility(entity target, LinkedList<int> abilityIds)
	for abilityId in abilityIds
		if this.isAbilityValid(abilityId, target)
			// Issue found valid ability order and end search:
			this.issueTargetAbilityOrder(abilityId, target.getWidget(), true)
			return

init
	// Register issued orders:
	registerPlayerUnitEvent(EVENT_PLAYER_UNIT_ISSUED_TARGET_ORDER) ->
		if GetIssuedOrderId() == OrderIds.smart
			GetTriggerUnit().searchForValidAbility(entity(GetOrderTargetUnit(), GetOrderTargetDestructable()), SMART_USED_ABILITY_IDS)