/*-------------------------------------------------------------
// Version number:
1.0.0

// Description:
Extension of the Wares class that adds a capacity to every ware of size one and a unit type dependant max capacity.

// Changelog:
- 1.0.0:
Initial version.
-------------------------------------------------------------*/
package Storage
import Wares
import LinkedList
import UnitTest
import ErrorHandling


// --------------------
// Functional code
// --------------------

public class Storage extends Wares
	private int maxCapacity
	private int usedCapacity

	construct(int maxCapacity)
		this.maxCapacity = maxCapacity
		usedCapacity = 0

	function getMaxCapacity() returns int
		return maxCapacity

	function getUsedCapacity() returns int
		return usedCapacity

	function getFreeCapacity() returns int
		return maxCapacity - usedCapacity

	override function add(ware w)
		if w.count > getFreeCapacity()
			error("Not enough free capacity to add given ware to storage")
		usedCapacity += w.count
		super.add(w)

	override function add(Wares wares)
		for ware in wares
			add(ware)  // Use capacity based method

	override function remove(ware w)
		for ware in wareList
			if ware.hasSameType(w)
				// Check and adjust ware:
				if ware.count < w.count
					error("Can not remove given ware from storage because ware count is to low")
				else if ware.count == w.count
					wareList.remove(ware)
				else
					wareList.replace(ware, ware.changedCopy(-w.count))
				// Adjust capacity:
				usedCapacity -= w.count
				return
		error("Can not remove given ware from storage because ware type is not available")

	override function remove(Wares wares)
		for ware in wares
			remove(ware)  // Use capacity based method

	/** Transfers as many wares as possible from this storage to target storage.
	Returns the amount of wares that couldn't be transfered. */
	function transferWares(Storage target) returns int
		// Transfer last ware of source until it is empty or target is full:
		var targetFreeCapacity = target.getFreeCapacity()
		while isEmpty() == false
			if targetFreeCapacity <= 0
				return usedCapacity
			var ware = getLast()
			if targetFreeCapacity < ware.count
				ware.count = targetFreeCapacity
			targetFreeCapacity -= ware.count
			target.add(ware)
			remove(ware)
		return 0


// --------------------
// Test code
// --------------------

@Test public function testStorage_AddAndRemove()
	testStorage_AddAndRemove(false)
public function testStorage_AddAndRemove(bool isInGameTest)
	let testName = setTestName("testStorage_AddAndRemove", isInGameTest)
	// Create new storage and check capacities:
	let storageA = new Storage(8)
	storageA.getMaxCapacity().assertEquals(testName, 8)
	storageA.getUsedCapacity().assertEquals(testName, 0)
	storageA.getFreeCapacity().assertEquals(testName, 8)
	// Add wares and check capacities:
	storageA.add(ware(WareType.FOOD, 3))
	storageA.add(ware(WareType.STONE, 2))
	storageA.add(ware(WareType.FOOD, 1))
	storageA.getMaxCapacity().assertEquals(testName, 8)
	storageA.getUsedCapacity().assertEquals(testName, 6)
	storageA.getFreeCapacity().assertEquals(testName, 2)
	// Remove wares and check capacities:
	storageA.remove(ware(WareType.FOOD, 2))
	storageA.remove(ware(WareType.STONE, 2))
	storageA.getMaxCapacity().assertEquals(testName, 8)
	storageA.getUsedCapacity().assertEquals(testName, 2)
	storageA.getFreeCapacity().assertEquals(testName, 6)
	// Create another storage and check capacities:
	let storageB = new Storage(13)
	storageB.getMaxCapacity().assertEquals(testName, 13)
	storageB.getUsedCapacity().assertEquals(testName, 0)
	storageB.getFreeCapacity().assertEquals(testName, 13)
	// Add wares and check capacities:
	let waresA = new Wares()
	waresA.add(ware(WareType.FOOD, 2))
	waresA.add(ware(WareType.STONE, 3))
	waresA.add(ware(WareType.FOOD, 1))
	waresA.add(ware(WareType.WOOD, 6))
	storageB.add(waresA)
	storageB.getMaxCapacity().assertEquals(testName, 13)
	storageB.getUsedCapacity().assertEquals(testName, 12)
	storageB.getFreeCapacity().assertEquals(testName, 1)
	// Remove wares and check capacities:
	let waresB = new Wares()
	waresB.add(ware(WareType.FOOD, 3))
	waresB.add(ware(WareType.WOOD, 1))
	storageB.remove(waresB)
	storageB.getMaxCapacity().assertEquals(testName, 13)
	storageB.getUsedCapacity().assertEquals(testName, 8)
	storageB.getFreeCapacity().assertEquals(testName, 5)
	// Transfer wares and check capacities:
	storageB.transferWares(storageA).assertEquals(testName, 2)
	storageA.getMaxCapacity().assertEquals(testName, 8)
	storageA.getUsedCapacity().assertEquals(testName, 8)
	storageA.getFreeCapacity().assertEquals(testName, 0)
	storageB.getMaxCapacity().assertEquals(testName, 13)
	storageB.getUsedCapacity().assertEquals(testName, 2)
	storageB.getFreeCapacity().assertEquals(testName, 11)
	testFinish(testName)
	// Destroy class objects:
	destroy storageA
	destroy storageB
	destroy waresA
	destroy waresB