/*-------------------------------------------------------------
// Version number:
1.0.0

// Description:
Allows buildings to require wares as building cost before the building process can be started. Also allows for worker and building type dependant build speed.
Uses the upgrade mechanism from a general building ground to have a fully controllable building progress.
Dynamically adjustes the building health stats based on the building progress.

// Changelog:
- 1.0.0:
Initial version.
-------------------------------------------------------------*/
package BuildingSystem
import RegisterEvents
import InstantDummyCaster
import ClosureTimers
import Icons
import ConstantData
import MultiboardPrioritySystem
import UtilityFunctions
import Stock
import StorageSystem
import SettlementSystem
import OrderSystem
import UnitMap
import UnitIndexer
import LinkedList
import UnitTest
import Orders
import Unit_TownHall
import Unit_LumberMill
import Unit_Barracks
import Unit_Blacksmith
import WorkplaceSystem


// --------------------
// Data code
// --------------------

let BUILDING_ADJUSTMENT_RATE = 0.1
let BUILDING_START_HP_PERCENTAGE = 0.1  // Has to be smaller than 1 and bigger than 0
let MAX_AUTO_ORDER_RANGE = 1024.
let MAX_NEAR_BY_RANGE = 384.
let BUILDING_GROUND_UNIT_ID = UnitIdsCustom.AoW.buildingGround
let BUILD_PROGRESS_ICON_PATH = Icons.bTNEngineeringUpgrade
let BUILD_TIME_LEFT_ICON_PATH = Icons.bTNStatUp
let WORKERS_ICON_PATH = Icons.bTNBash

/** Returns the build progress that the given worker type does per second on the given building type. */
function getUnitWorkPower(int buildingUnitId, int workerUnitId) returns real
	switch workerUnitId
		case UnitIdsCustom.AoW.peasant
			switch buildingUnitId
				case UnitIdsCustom.AoW.townHall
					return 1.
				case UnitIdsCustom.AoW.peasantHouse
					return 1.
				case UnitIdsCustom.AoW.blacksmith
					return 1.
				case UnitIdsCustom.AoW.lumberMill
					return 1.
				case UnitIdsCustom.AoW.barracks
					return 1.
				case UnitIdsCustom.AoW.lumberCamp
					return 1.
		// case UnitIdsCustom.Melee.peasant
		// 	switch buildingUnitId
		// 		case UnitIdsCustom.Melee.townHall
		// 			return 1.
		// 		case UnitIdsCustom.Melee.farm
		// 			return 1.
		// 		case UnitIdsCustom.Melee.blacksmith
		// 			return 1.
		// 		case UnitIdsCustom.Melee.lumberMill
		// 			return 1.
		// 		case UnitIdsCustom.Melee.arcaneVault
		// 			return 1.
		// 		case UnitIdsCustom.Melee.scoutTower
		// 			return 1.
		// 		case UnitIdsCustom.Melee.barracks
		// 			return 1.
		// 		case UnitIdsCustom.Melee.altarOfKings
		// 			return 1.
		// 		case UnitIdsCustom.Melee.workshop
		// 			return 1.
		// 		case UnitIdsCustom.Melee.arcaneSanctum
		// 			return 1.
		// 		case UnitIdsCustom.Melee.gryphonAviary
		// 			return 1.
	return 0.

/** Returns the required build progress in seconds of the given building type. */
function getRequiredWorkPower(int buildingUnitId) returns real
	switch buildingUnitId
		case UnitIdsCustom.AoW.townHall
			return 180.
		case UnitIdsCustom.AoW.peasantHouse
			return 35.
		case UnitIdsCustom.AoW.barracks
			return 60.
		case UnitIdsCustom.AoW.blacksmith
			return 70.
		case UnitIdsCustom.AoW.lumberMill
			return 60.
		case UnitIdsCustom.AoW.lumberCamp
			return 30.
		// case UnitIdsCustom.Melee.townHall
		// 	return 180.
		// case UnitIdsCustom.Melee.farm
		// 	return 35.
		// case UnitIdsCustom.Melee.blacksmith
		// 	return 70.
		// case UnitIdsCustom.Melee.lumberMill
		// 	return 60.
		// case UnitIdsCustom.Melee.arcaneVault
		// 	return 60.
		// case UnitIdsCustom.Melee.scoutTower
		// 	return 25.
		// case UnitIdsCustom.Melee.barracks
		// 	return 60.
		// case UnitIdsCustom.Melee.altarOfKings
		// 	return 60.
		// case UnitIdsCustom.Melee.workshop
		// 	return 60.
		// case UnitIdsCustom.Melee.arcaneSanctum
		// 	return 70.
		// case UnitIdsCustom.Melee.gryphonAviary
		// 	return 75.
	return 0.

/** Returns the required wares of the given building type. */
function getRequiredWares(int buildingUnitId) returns LinkedList<ware>
	let wares = new LinkedList<ware>()
	switch buildingUnitId
		case UnitIdsCustom.AoW.peasantHouse
			wares.add(ware(WareType.WOOD, 4))
		case UnitIdsCustom.AoW.townHall
			wares.add(ware(WareType.WOOD, 4))
			wares.add(ware(WareType.STONE, 3))
			wares.add(ware(WareType.METAL, 2))
		case UnitIdsCustom.AoW.blacksmith
			wares.add(ware(WareType.STONE, 3))
			wares.add(ware(WareType.METAL, 2))
		case UnitIdsCustom.AoW.lumberMill
			wares.add(ware(WareType.WOOD, 4))
		case UnitIdsCustom.AoW.barracks
			wares.add(ware(WareType.WOOD, 4))
			wares.add(ware(WareType.STONE, 3))
		case UnitIdsCustom.AoW.lumberCamp
			wares.add(ware(WareType.WOOD, 4))
		// case UnitIdsCustom.Melee.farm
		// 	wares.add(ware(WareType.WOOD, 4))
		// case UnitIdsCustom.Melee.townHall
		// 	wares.add(ware(WareType.WOOD, 4))
		// 	wares.add(ware(WareType.STONE, 3))
		// 	wares.add(ware(WareType.METAL, 2))
		// case UnitIdsCustom.Melee.blacksmith
		// 	wares.add(ware(WareType.STONE, 3))
		// 	wares.add(ware(WareType.METAL, 2))
		// case UnitIdsCustom.Melee.lumberMill
		// 	wares.add(ware(WareType.WOOD, 4))
		// case UnitIdsCustom.Melee.arcaneVault
		// 	wares.add(ware(WareType.METAL, 2))
		// case UnitIdsCustom.Melee.scoutTower
		// 	wares.add(ware(WareType.WOOD, 4))
		// 	wares.add(ware(WareType.STONE, 3))
		// case UnitIdsCustom.Melee.barracks
		// 	wares.add(ware(WareType.WOOD, 4))
		// 	wares.add(ware(WareType.STONE, 3))
		// case UnitIdsCustom.Melee.altarOfKings
		// 	wares.add(ware(WareType.STONE, 3))
		// 	wares.add(ware(WareType.METAL, 2))
		// case UnitIdsCustom.Melee.workshop
		// 	wares.add(ware(WareType.WOOD, 4))
		// 	wares.add(ware(WareType.METAL, 2))
		// case UnitIdsCustom.Melee.arcaneSanctum
		// 	wares.add(ware(WareType.WOOD, 4))
		// 	wares.add(ware(WareType.STONE, 3))
		// 	wares.add(ware(WareType.METAL, 2))
		// case UnitIdsCustom.Melee.gryphonAviary
		// 	wares.add(ware(WareType.WOOD, 4))
	return wares

/** Returns the scaling of the given building type. */
function getScaling(int buildingUnitId) returns real
	switch buildingUnitId
		case UnitIdsCustom.AoW.barracks
			return UnitData_Barracks.scalingValue
		case UnitIdsCustom.AoW.blacksmith
			return UnitData_Blacksmith.scalingValue
		case UnitIdsCustom.AoW.lumberMill
			return UnitData_LumberMill.scalingValue
		case UnitIdsCustom.AoW.townHall
			return UnitData_Townhall.scalingValue
		// case UnitIdsCustom.Melee.altarOfKings
		// 	return UnitData_AltarOfKings.scalingValue
		// case UnitIdsCustom.Melee.arcaneSanctum
		// 	return UnitData_ArcaneSanctum.scalingValue
		// case UnitIdsCustom.Melee.arcaneTower
		// 	return UnitData_ArcaneTower.scalingValue
		// case UnitIdsCustom.Melee.arcaneVault
		// 	return UnitData_ArcaneVault.scalingValue
		// case UnitIdsCustom.Melee.barracks
		// 	return UnitData_Barracks.scalingValue
		// case UnitIdsCustom.Melee.blacksmith
		// 	return UnitData_Blacksmith.scalingValue
		// case UnitIdsCustom.Melee.cannonTower
		// 	return UnitData_CannonTower.scalingValue
		// case UnitIdsCustom.Melee.castle
		// 	return UnitData_Castle.scalingValue
		// case UnitIdsCustom.Melee.guardTower
		// 	return UnitData_GuardTower.scalingValue
		// case UnitIdsCustom.Melee.keep
		// 	return UnitData_Keep.scalingValue
		// case UnitIdsCustom.Melee.lumberMill
		// 	return UnitData_LumberMill.scalingValue
		// case UnitIdsCustom.Melee.scoutTower
		// 	return UnitData_ScoutTower.scalingValue
		// case UnitIdsCustom.Melee.townHall
		// 	return UnitData_Townhall.scalingValue
		default
			return 1.


// --------------------
// Functional code
// --------------------

let BUILDING_SITE_MAP = new IterableUnitHashMap<BuildingSite>(null)

class BuildingSite extends Workplace
	private Stock stock
	private real fullHP
	private real workProgressCurrent
	private real workProgressFinished
	private real workPower
	private int upgradeProgress

	construct(unit building, real fullHP, LinkedList<ware> requiredWares)
		super(building)
		stock = new Stock(requiredWares)
		this.fullHP = fullHP
		workProgressCurrent = 0.
		workProgressFinished = getRequiredWorkPower(building.getUnitId())
		workPower = 0.
		upgradeProgress = 1

	ondestroy
		destroy stock
		for worker in workers
			ResetUnitAnimation(worker)
			worker.removeAbility(BuffIdsCustom.building)

	function getStock() returns Stock
		return stock

	function getWorkProgressPercentage() returns real
		return 100. * workProgressCurrent / workProgressFinished

	function getWorkProgressLeft() returns real
		return workProgressFinished - workProgressCurrent

	function getWorkPower() returns real
		return workPower

	override function addWorker(unit worker)
		super.addWorkerForBuildingSite(worker)
		workPower += getUnitWorkPower(user.getUnitId(), worker.getUnitId())
		InstantDummyCaster.castTarget(null, AbilityIdsCustom.addBuildingBuff, 1, AbilityIdsCustom.addBuildingBuff.getAbilityOrder(), worker)
		doAfter(MIN_TRIGGER_SLEEP_TIME, () -> SetUnitAnimation(worker, "work"))

	override function removeWorker(unit worker)
		super.removeWorker(worker)
		workPower -= getUnitWorkPower(user.getUnitId(), worker.getUnitId())
		ResetUnitAnimation(worker)
		worker.removeAbility(BuffIdsCustom.building)

	function adjustProgress() returns bool
		if workPower > 0.
			// Adjust work progress:
			workProgressCurrent += workPower * BUILDING_ADJUSTMENT_RATE
			if workProgressCurrent >= workProgressFinished
				// Finish construction:
				UnitSetUpgradeProgress(user, 100)
				return true
			else
				// Recalculate values:
				user.setMaxHP(max(1, (fullHP * ((workProgressCurrent / workProgressFinished) * (1 - BUILDING_START_HP_PERCENTAGE) + BUILDING_START_HP_PERCENTAGE)).toInt()))
				user.addHP(fullHP * (1 - BUILDING_START_HP_PERCENTAGE) * workPower * BUILDING_ADJUSTMENT_RATE)
				upgradeProgress = min(max(1, ((workProgressCurrent / workProgressFinished) * 100.).toInt()), 99)
		// Always adjust upgrade progress so that it stays correct:
		UnitSetUpgradeProgress(user, upgradeProgress)
		return false

	function hasCarrierRequiredResources(unit carrier) returns bool
		if stock.isEmpty() == false
			let carrierStorage = carrier.getStorage()
			if carrierStorage != null and carrierStorage.containsAny(stock)
				return true
		return false

	function callOverIdleWorkers()
		// Order nearby idle workers to build on building site:
		ENUM_GROUP.enumUnitsInRange(user.getPos(), MAX_AUTO_ORDER_RANGE, null)
		let owner = user.getOwner()
		var requiredWorkers = getFreeWorkerSlotsForBuildingSite()
		for worker from ENUM_GROUP
			// Check if more workers are required:
			if requiredWorkers <= 0
				return
			// Look for idle workers or workers that want to transfer wares to the building site:
			if user.getUnitId().isValidWorkerType(worker.getUnitId()) and worker.getOwner() == owner and (worker.getOrderSource() == null or worker.isOrder(OrderIds.frostnova, user))
				requiredWorkers -= 1
				worker.issueTargetAbilityOrder(AbilityIdsCustom.build, user, true)

	function callOverIdleWareCarriers()
		// Order nearby idle workers to build on building site:
		ENUM_GROUP.enumUnitsInRange(user.getPos(), MAX_NEAR_BY_RANGE, null)
		let owner = user.getOwner()
		for carrier from ENUM_GROUP
			if carrier.getOwner() == owner and (carrier.getOrderSource() == null or carrier.isOrder(OrderIds.move)) and hasCarrierRequiredResources(carrier)
				carrier.issueTargetAbilityOrder(AbilityIdsCustom.transferWares, user, true)

	/** Transfers required wares from source storage to this building sie.
	Returns a list of all wares that are still missing. */
	override function transferWares(Storage source, bool _takeWares)
		let leftRequiredWares = new LinkedList<ware>()
		// Look through all required wares:
		for i = 0 to stock.getAmountOfWareTypes() - 1
			let ware = stock.getWare(i)
			var count = source.getWareCount(ware.wareType)
			if count < ware.count
				// Note down still missing wares:
				leftRequiredWares.add(ware(ware.wareType, ware.count - count))
			else
				// Limit taken wares to required amount:
				count = ware.count
			if count > 0
				// Remove taken wares from source:
				source.removeWare(ware(ware.wareType, count))
		// Update still required wares:
		stock.replaceWares(leftRequiredWares)


function unit.addBuildingSite()
	if BUILDING_SITE_MAP.has(this) == false
		let targetUnitId = this.getUnitId()
		let fullHP = this.getMaxHP()
		let buildingGround = this.replace(BUILDING_GROUND_UNIT_ID)
		IssueImmediateOrderById(buildingGround, targetUnitId.getUnitTypeId())  // Upgrade building ground to target building type
		buildingGround.setScale(getScaling(targetUnitId))
		buildingGround.setMaxHP(max(1, (fullHP * BUILDING_START_HP_PERCENTAGE).toInt()))
		let buildingSite = new BuildingSite(buildingGround, fullHP, getRequiredWares(targetUnitId))
		BUILDING_SITE_MAP.put(buildingGround, buildingSite)
		if buildingSite.getStock().isEmpty()
			buildingSite.callOverIdleWorkers()
		else
			buildingSite.callOverIdleWareCarriers()

function unit.removeBuildingSite()
	let buildingSite = BUILDING_SITE_MAP.tryRemove(this)
	if buildingSite != null
		destroy buildingSite

function findNextBuildingSite_GetFilter() returns filterfunc
	return Filter() ->
		var conditionsFulfilled = false
		let buildingSite = GetFilterUnit().getBuildingSite()
		// Only allow building sites that don't have any required wares left:
		if buildingSite != null and buildingSite.getStock().isEmpty()
			conditionsFulfilled = true
		return conditionsFulfilled
/** Returns next valid building site unit at the position for given player. */
public function vec2.findNextBuildingSite(player owner) returns unit
	let filter = findNextBuildingSite_GetFilter()
	let building = this.getNearestUnit(MAX_AUTO_ORDER_RANGE, filter, owner)
	filter.destr()
	return building
/** Returns next valid building site unit for the unit. */
public function unit.findNextBuildingSite() returns unit
	let owner = this.getOwner()
	let pos = this.getPos()
	let workerUnitId = this.getUnitId()
	let filter = findNextBuildingSite_GetFilter()
	// Set init values:
	var bestDistanceSq = REAL_MAX
	unit nearestBuilding = null
	// Filter out invalid units in range:
	ENUM_GROUP.enumUnitsInRange(pos, MAX_AUTO_ORDER_RANGE, filter)
	// Find nearest valid unit:
	for target from ENUM_GROUP
		if target.getOwner() == owner and target.getUnitId().isValidWorkerType(workerUnitId)
			let distanceSq = pos.distanceToSq(target.getPos())
			if distanceSq < bestDistanceSq
				bestDistanceSq = distanceSq
				nearestBuilding = target
	filter.destr()
	return nearestBuilding

/** Returns the building site of given unit. */
public function unit.getBuildingSite() returns BuildingSite
	return BUILDING_SITE_MAP.tryGet(this)

/** Returns the building site of given worker. */
public function unit.getBuildingSiteOfWorker() returns BuildingSite
	for building in BUILDING_SITE_MAP
		let buildingSite = BUILDING_SITE_MAP.tryGet(building)
		if buildingSite != null and buildingSite.isWorker(this)
			return buildingSite
	return null

/** Returns the count of all building sites. */
public function getBuildingSiteCount() returns int
	return BUILDING_SITE_MAP.getValueCount()

/** Returns the count of all workers. */
public function getWorkerCount() returns int
	var workerCount = 0
	for building in BUILDING_SITE_MAP
		let buildingSite = BUILDING_SITE_MAP.tryGet(building)
		if buildingSite != null
			workerCount += buildingSite.getWorkerCount()
	return workerCount

/** Returns if the given worker type can work on given building type */
public function int.isValidWorkerType(int workerUnitId) returns bool
	return getUnitWorkPower(this, workerUnitId) > 0.

/** Sets system relevant infos for given object in target multiboard. */
public function multiboard.setObjectInfoMultiboard(BuildingSite bs) returns bool
	this.addMultiboardLine("Building site: " + bs.user.getName(), HEADLINE_ICON_PATH)
	this.addMultiboardLine("Build progress: " + bs.getWorkProgressPercentage().toInt().toString() + "%", BUILD_PROGRESS_ICON_PATH)
	let workPower = bs.getWorkPower()
	if workPower > 0.
		this.addMultiboardLine("Build time left: " + (bs.getWorkProgressLeft() / workPower).toInt().toString() + "s", BUILD_TIME_LEFT_ICON_PATH)
		this.addMultiboardLine("Workers: " + bs.getWorkerCount().toString(), WORKERS_ICON_PATH)
	let stock = bs.getStock()
	let amountOfWareTypes = stock.getAmountOfWareTypes()
	if amountOfWareTypes > 0
		this.addMultiboardLine("Required wares:", SUB_HEADLINE_ICON_PATH)
		for i = 0 to (amountOfWareTypes - 1)
			let ware = stock.getWare(i)
			this.addMultiboardLine(ware.count.toString() + " " + ware.toString(true), ware.getIconPath())
	return true

init
	// Remove building site from every appropriate removed unit:
	onUnitDeindex(() -> getIndexingUnit().removeBuildingSite())
	// Adjust progress of all building sites:
	let finishedBuildings = CreateGroup()
	doPeriodically(BUILDING_ADJUSTMENT_RATE) cb ->
		for building in BUILDING_SITE_MAP
			if building != null and BUILDING_SITE_MAP.get(building).adjustProgress()
				finishedBuildings.addUnit(building)
		// Remove finished building sites:
		for building from finishedBuildings
			building.removeBuildingSite()
	// Register construction starts:
	registerPlayerUnitEvent(EVENT_PLAYER_UNIT_CONSTRUCT_START) ->
		let building = GetConstructingStructure()
		if getRequiredWorkPower(building.getUnitId()) > 0.
			doAfter(MIN_TRIGGER_SLEEP_TIME, () -> building.addBuildingSite())
	// Register construction abortions:
	registerPlayerUnitEvent(EVENT_PLAYER_UNIT_UPGRADE_CANCEL) ->
		let building = GetTriggerUnit()
		building.removeBuildingSite()
		building.kill()
		building.remove()


// --------------------
// Test code
// --------------------

unit testBuildingSystem_Build_building = null
public function testBuildingSystem_Build(vec2 testCentre)
	let testName = setTestName("testBuildingSystem_Build", true)
	// Remove units blocking the building:
	ForGroup(GetUnitsInRectAll(testCentre.withRadiusRect(640.)), () -> GetEnumUnit().remove())
	// Order to build:
	let unitA = createUnit(Settings.USER_PLAYER, UnitIdsCustom.AoW.peasant, testCentre, angle(0))
	let unitB = createSettlementBuilding(Settings.USER_PLAYER, UnitIdsCustom.AoW.townHall, testCentre.add(384., 0.), angle(0))
	let storageA = unitA.getStorage()
	assertNotNull(testName, storageA)
	storageA.addWare(ware(WareType.WOOD, 5))
	unitA.issuePointOrderById(UnitIdsCustom.AoW.peasantHouse, testCentre)
	testBuildingSystem_Build_building = null
	doAfter(MIN_ACTION_SLEEP_TIME) () ->
		// Check unit mappings:
		let buildingSiteA = unitA.getBuildingSiteOfWorker()
		assertNotNull(testName, buildingSiteA)
		assertEquals(testName, buildingSiteA.getWorkPower(), getUnitWorkPower(UnitIdsCustom.AoW.peasantHouse, UnitIdsCustom.AoW.peasant))
		testBuildingSystem_Build_building = buildingSiteA.getUnit()
		assertNotNull(testName, testBuildingSystem_Build_building)
		assertEquals(testName, testBuildingSystem_Build_building.getBuildingSite(), buildingSiteA)
		assertEquals(testName, unitA.findNextBuildingSite(), testBuildingSystem_Build_building)
		// Check building site status:
		buildingSiteA.getWorkPower().assertEquals(testName, 1.)
		buildingSiteA.getWorkerCount().assertEquals(testName, 1)
		buildingSiteA.getWorkProgressPercentage().assertLessThan(testName, 2 * MIN_ACTION_SLEEP_TIME * 1.)
		buildingSiteA.getStock().isEmpty().assertTrue(testName)
		testFinish(testName)
	doAfter(2 * MIN_ACTION_SLEEP_TIME) () ->
		// Abort construction:
		testBuildingSystem_Build_building.issueImmediateOrderById(SpecialOrders.cancel)
	doAfter(3 * MIN_ACTION_SLEEP_TIME) () ->
		// Remove test units:
		unitA.kill()
		unitA.remove()
		unitB.kill()
		unitB.remove()