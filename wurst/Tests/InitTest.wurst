package InitTest
import TerrainUtils
import Interpolation
import ConstantDataSystem
import StorageSystem
import UtilityFunctions
import Array2D


// --------------------
// Data code
// --------------------

let originVec = vec2(0., 0.)
let userPlayer = Player(0)
let startPeasantCount = 5

let naturePlayer = Player(PLAYER_NEUTRAL_PASSIVE)
let minForestDist = 512.
let maxForestDist = 5120.
let minTreeDist = 0.
let maxTreeDist = 384.

let mapWidth = 16
let mapHeight = 16
let tileDistance = 128.
let minTerrainHeight = -128.
let maxTerrainHeight = 512.


// --------------------
// Functional code
// --------------------

Array2D<real> heightMap
// TEST begin
var a = 1
// TEST end

init
	// Create player units:
	for i = 1 to startPeasantCount
		var u = createUnit(userPlayer, UnitIdsCustom.peasant, originVec, angle(0.), true)
		var storage = getStorage(u)
		if storage != null
			storage.addWare(ware(WareType.Food, GetRandomInt(1, 10)))
	createUnit(userPlayer, UnitIdsCustom.footman, originVec, angle(0.))
	// Create nature:
	let forestsCount = GetRandomInt(4, 6)
	for	i = 1 to forestsCount
		var centerVec = originVec.polarOffset(getRandomAngle(), GetRandomReal(minForestDist, maxForestDist))
		var treesCount = GetRandomInt(8, 12)
		for j = 1 to treesCount
			createUnit(naturePlayer, UnitIdsCustom.beechVar1, centerVec.polarOffset(getRandomAngle(), GetRandomReal(minTreeDist, maxTreeDist)), getRandomAngle(), true)
	// Create terrain:
	generateHeightMap()
	// TEST begin
	print(a)
	// TEST end
	for	x = 0 to mapWidth - 1
		for	y = 0 to mapHeight - 1
			originVec.add(x * tileDistance, y * tileDistance).addTerrainHeight(linear(minTerrainHeight, maxTerrainHeight, heightMap.get(x, y)))

@compiletime function generateHeightMap()
	// DEBUG: Bigger maps causes the init function to exit early without finishing
	// heightMap = generatePerlinNoise(mapWidth, mapHeight, 5, 0.6, "Cosine")
	heightMap = generatePerlinNoise(mapWidth, mapHeight, 3)  // DEBUG: Generation at compiletime doesn't seem to work.
	// TEST begin
	if compiletime
		a += 10
		print("compiletime")
	else
		a += 100
		print("runtime")
	// TEST end
	