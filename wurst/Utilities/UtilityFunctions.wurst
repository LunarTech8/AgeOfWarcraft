/*-------------------------------------------------------------
// Version number:
1.0.0

// Description:
Contains generic utility functions that aren't tied directly to a specific system.

// Changelog:
- 1.0.0:
Initial version.
-------------------------------------------------------------*/
package UtilityFunctions
import LinkedList
import HashMap
import ConstantData
import Interpolation
import Array2D
import Orders
import ObjectIds
import LoadStatusSystem
import ComputationControl


// --------------------
// Data code
// --------------------

// Time:
public let INFO_MSG_TIME = 2.
public let MIN_TRIGGER_SLEEP_TIME = 0.01
public let MIN_ACTION_SLEEP_TIME = 0.25
public let INGAME_DAY_DURATION = 480.  // In realtime seconds
// Terrain:
public let HEIGHT_DEEP_WATER_MIN = -64.
public let HEIGHT_SHALLOW_WATER_MIN = 112.
public let HEIGHT_LAND_MIN = 168.
public let HEIGHT_LAND_MAX = 2048.
public let TILE_DISTANCE = 128.

function initBaseUnitTypeIdMap() returns HashMap<int, int>
	let map = new HashMap<int, int>
	// map.put(UnitIdsCustom.Trees.beech_Var1, UnitIdsCustom.Trees.beech)
	// map.put(UnitIdsCustom.Trees.beech_Var2, UnitIdsCustom.Trees.beech)
	// map.put(UnitIdsCustom.Trees.beech_Var3, UnitIdsCustom.Trees.beech)
	// map.put(UnitIdsCustom.Trees.beech_Var4, UnitIdsCustom.Trees.beech)
	// map.put(UnitIdsCustom.Trees.birch_Var1, UnitIdsCustom.Trees.birch)
	// map.put(UnitIdsCustom.Trees.birch_Var2, UnitIdsCustom.Trees.birch)
	// map.put(UnitIdsCustom.Trees.birch_Var3, UnitIdsCustom.Trees.birch)
	// map.put(UnitIdsCustom.Trees.greyOak_Var1, UnitIdsCustom.Trees.greyOak)
	// map.put(UnitIdsCustom.Trees.greyOak_Var2, UnitIdsCustom.Trees.greyOak)
	// map.put(UnitIdsCustom.Trees.greyOak_Var3, UnitIdsCustom.Trees.greyOak)
	// map.put(UnitIdsCustom.Trees.greyOak_Var4, UnitIdsCustom.Trees.greyOak)
	// map.put(UnitIdsCustom.Trees.chestnut_Var1, UnitIdsCustom.Trees.chestnut)
	// map.put(UnitIdsCustom.Trees.chestnut_Var2, UnitIdsCustom.Trees.chestnut)
	return map

/** Returns the unit type id of a random variation of this base unit id. Required for unit creation. */
public function int.getUnitTypeId() returns int
	// switch this
	// 	case UnitIdsCustom.Trees.beech
	// 		return getRandomInputInt(UnitIdsCustom.Trees.beech_Var1, UnitIdsCustom.Trees.beech_Var2, UnitIdsCustom.Trees.beech_Var3, UnitIdsCustom.Trees.beech_Var4)
	// 	case UnitIdsCustom.Trees.birch
	// 		return getRandomInputInt(UnitIdsCustom.Trees.birch_Var1, UnitIdsCustom.Trees.birch_Var2, UnitIdsCustom.Trees.birch_Var3)
	// 	case UnitIdsCustom.Trees.greyOak
	// 		return getRandomInputInt(UnitIdsCustom.Trees.greyOak_Var1, UnitIdsCustom.Trees.greyOak_Var2, UnitIdsCustom.Trees.greyOak_Var3, UnitIdsCustom.Trees.greyOak_Var4)
	// 	case UnitIdsCustom.Trees.chestnut
	// 		return getRandomInputInt(UnitIdsCustom.Trees.chestnut_Var1, UnitIdsCustom.Trees.chestnut_Var2)
	return this

/** Returns the order needed to cast this ability id. */
public function int.getAbilityOrder() returns string
	switch this
		case AbilityIdsCustom.harvest
			return "thunderbolt"
		case AbilityIdsCustom.build
			return "shadowstrike"
		case AbilityIdsCustom.showTargetInfo
			return "thunderbolt"
		case AbilityIdsCustom.transferWares
			return "frostnova"
		case AbilityIdsCustom.addBuildingBuff
			return "innerfire"
		case AbilityIdsCustom.enterBuilding
			return "innerfire"
		case AbilityIdsCustom.targetDestructable
			return "harvest"
		case AbilityIdsCustom.addSleepingBuff
			return "sleep"
		case AbilityIdsCustom.addExhaustedBuff
			return "cripple"
		case AbilityIdsCustom.changeProduct
			return "fanofknives"
		case AbilityIdsCustom.removeWorker
			return "thunderclap"
		default
			Log.error("ERROR: Unmapped ability id (" + this.toString() + ")")
			return null

/** Returns the ability id used for this order name. */
public function string.getOrderNameAbility() returns int
	switch this
		case "harvest"
			return AbilityIdsCustom.harvest
		case "build"
			return AbilityIdsCustom.build
		case "show target info"
			return AbilityIdsCustom.showTargetInfo
		case "transfer wares"
			return AbilityIdsCustom.transferWares
		case "add building buff"
			return AbilityIdsCustom.addBuildingBuff
		case "enter building"
			return AbilityIdsCustom.enterBuilding
		case "target destructable"
			return AbilityIdsCustom.targetDestructable
		default
			Log.error("ERROR: Unmapped order name (" + this + ")")
			return 0

/** Returns the order name of this order or ability id. */
public function int.getOrderName() returns string
	switch this
		case OrderIds.smart
			return "smart"
		case OrderIds.move
			return "move"
		case OrderIds.stop
			return "stop"
		case OrderIds.attack
			return "attack"
		case OrderIds.attackground
			return "attack ground"
		case OrderIds.holdposition
			return "hold position"
		case OrderIds.patrol
			return "patrol"
		case OrderIds.repair
			return "repair"
		case OrderIds.repairon
			return "repair on"
		case OrderIds.repairoff
			return "repair off"
		case OrderIds.stunned
			return "stunned"
		case OrderIds.undefend
			return null
		case AbilityIdsCustom.harvest
			return "harvest"
		case AbilityIdsCustom.showTargetInfo
			return "show target info"
		case AbilityIdsCustom.build
			return "build"
		case AbilityIdsCustom.transferWares
			return "transfer wares"
		case AbilityIdsCustom.addBuildingBuff
			return "add building buff"
		case AbilityIdsCustom.enterBuilding
			return "enter building"
		case AbilityIdsCustom.targetDestructable
			return "target destructable"
		default
			if this < 2013265920  // Ignore unit ids
				Log.error("ERROR: Unmapped order/ability id (" + this.toString() + ")")
			return null
/** Returns the order name of this order id of the given unit. Returns null if onlyCustomAbilities is given and order doesn't fit to a custom ability of the given unit. */
public function int.getOrderName(unit orderedUnit, bool onlyCustomAbilities) returns string
	switch this
		case OrderIds.thunderbolt
			if orderedUnit.hasAbility(AbilityIdsCustom.harvest)
				return "harvest"
			else if orderedUnit.hasAbility(AbilityIdsCustom.showTargetInfo)
				return "show target info"
		case OrderIds.shadowstrike
			if orderedUnit.hasAbility(AbilityIdsCustom.build)
				return "build"
		case OrderIds.frostnova
			if orderedUnit.hasAbility(AbilityIdsCustom.transferWares)
				return "transfer wares"
		case OrderIds.innerfire
			if orderedUnit.hasAbility(AbilityIdsCustom.addBuildingBuff)
				return "add building buff"
			else if orderedUnit.hasAbility(AbilityIdsCustom.enterBuilding)
				return "enter building"
		case OrderIds.harvest
			if orderedUnit.hasAbility(AbilityIdsCustom.targetDestructable)
				return "target destructable"
		default
			if onlyCustomAbilities
				return null
			else
				return this.getOrderName()
	Log.error("ERROR: Unmapped order id (" + this.toString() + ")")
	return null
/** Returns the order name of this order id of the given unit. */
public function int.getOrderName(unit orderedUnit) returns string
	return this.getOrderName(orderedUnit, false)

// --------------------
// Functional code
// --------------------

let BASE_UNIT_TYPE_ID_MAP = initBaseUnitTypeIdMap()

/** Returns the base unit id of this unit. Required for data evaluation. */
public function unit.getUnitId() returns int
	let id = GetUnitTypeId(this)
	if BASE_UNIT_TYPE_ID_MAP.has(id)
		return BASE_UNIT_TYPE_ID_MAP.get(id)
	return id

/** Returns the nearest unit from this vector in given group of given player. Given group is cleared but not destroyed. */
public function vec2.getNearestUnit(group validUnits, player owner) returns unit
	// Set init values:
	var bestDistanceSq = REAL_MAX
	unit nearestUnit = null
	// Find nearest unit:
	for target from validUnits
		if owner == null or target.getOwner() == owner
			let distanceSq = this.distanceToSq(target.getPos())
			if distanceSq < bestDistanceSq
				bestDistanceSq = distanceSq
				nearestUnit = target
	return nearestUnit
/** Returns the nearest unit from this vector in given group. Given group is cleared but not destroyed. */
public function vec2.getNearestUnit(group validUnits) returns unit
	return this.getNearestUnit(validUnits, null)
/** Returns the nearest unit from this vector in given max range of given player. */
public function vec2.getNearestUnit(real maxRange, boolexpr filter, player owner) returns unit
	// Filter out invalid units in range:
	ENUM_GROUP.enumUnitsInRange(this, maxRange, filter)
	// Find nearest unit:
	return this.getNearestUnit(ENUM_GROUP, owner)
/** Returns the nearest unit from this vector in given max range. */
public function vec2.getNearestUnit(real maxRange, boolexpr filter) returns unit
	return this.getNearestUnit(maxRange, filter, null)

/** Returns the nearest destructable from this vector in given list.*/
public function vec2.getNearestDestructable(LinkedList<destructable> validDestructables) returns destructable
	// Set init values:
	var bestDistanceSq = REAL_MAX
	destructable nearestDest = null
	// Find nearest destructable:
	for target in validDestructables
		let distanceSq = this.distanceToSq(target.getPos())
		if distanceSq < bestDistanceSq
			bestDistanceSq = distanceSq
			nearestDest = target
	return nearestDest

/** Issues this unit to cast given ability on target widget. The ability can be reset beforehand to bypass the cooldown. */
public function unit.issueTargetAbilityOrder(int abilityId, widget target, bool resetAbility) returns bool
	if resetAbility
		this.removeAbility(abilityId)
		this.addAbility(abilityId)
	return this.issueTargetOrder(abilityId.getAbilityOrder(), target)

/** Replaces this unit with a new unit of given type. */
public function unit.replace(int unitTypeId) returns unit
	this.hide()
	let newUnit = createUnit(this.getOwner(), unitTypeId, this.getPos(), this.getFacingAngle())
	this.kill()
	this.remove()
	return newUnit

/** Returns a string of the given unit ids. */
public function getUnitIdsString(vararg int unitIds) returns string
	var unitString = ""
	for unitId in unitIds
		unitString += unitId.toRawCode() + ","
	if unitString != ""
		unitString = unitString.substring(0, unitString.length()-1)
	return unitString

/** Returns random value of given inputs. */
public function getRandomInputInt(vararg int inputs) returns int
	var count = 0
	for _input in inputs
		count += 1
	let i = GetRandomInt(1, count)
	count = 0
	for input in inputs
		count += 1
		if i == count
			return input
	return 0

/** Returns random value of given inputs. */
public function getRandomInputReal(vararg real inputs) returns real
	var count = 0
	for _input in inputs
		count += 1
	let i = GetRandomInt(1, count)
	count = 0
	for input in inputs
		count += 1
		if i == count
			return input
	return 0

/** Returns random angle (bewteen 0 and 2*pi). */
public function getRandomAngle() returns angle
	return angle(GetRandomReal(0., PI2))
/** Returns random angle bewteen min and max. */
public function getRandomAngle(real min, real max) returns angle
	if min < 0. or max > PI2 or min > max
		Log.error("ERROR: Invalid min and/or max value")
	return angle(GetRandomReal(min, max))

/** Returns random sign (-1 or 1). */
public function getRandomSign() returns int
	if GetRandomInt(0, 1) == 0
		return -1
	else
		return 1

/** Throws an exception if the absolute of this value is smaller than epsilon, else returns the value. */
public function real.divByZeroProt(real epsilon) returns real
	if this.abs() <= epsilon
		Log.error("Invalid divisor value (" + this.toString() + ")")
	return this
/** Throws an exception if the absolute of the given value is smaller than 10^-7, else returns the value. */
public function real.divByZeroProt() returns real
	return this.divByZeroProt(0.0000001)
/** Throws an exception if the given value is 0, else returns the value. */
public function int.divByZeroProt() returns int
	if this == 0
		Log.error("Invalid divisor value (" + this.toString() + ")")
	return this

function smoothNoise(Array2DReal baseNoise, string interpolation, int octave) returns Array2DReal
	// Check interpolation method:
	var interpolationMethod = 0
	if interpolation == "Linear"
		interpolationMethod = 0
	else if interpolation == "Cosine"
		interpolationMethod = 1
	else
		Log.error("Invalid interpolation method")
	// Create smooth noise map:
	let width = baseNoise.sizeX()
	let height = baseNoise.sizeY()
	let smoothNoise = new Array2DReal(width, height)
	let samplePeriod = (2).pow(octave)
	let sampleFrequency = 1. / samplePeriod
	for i = 0 to width - 1
		// Calculate the horizontal sampling indices:
		let horizontalSampleA = (i div samplePeriod) * samplePeriod
		let horizontalSampleB = (horizontalSampleA + samplePeriod) mod width  // Wrap around
		var horizontalBlend = (i - horizontalSampleA) * sampleFrequency
		if interpolationMethod == 1
			horizontalBlend = (1 - Cos(horizontalBlend * PI)) * 0.5
		for j = 0 to height - 1
			// Calculate the vertical sampling indices:
			let verticalSampleA = (j div samplePeriod) * samplePeriod
			let verticalSampleB = (verticalSampleA + samplePeriod) mod height  // Wrap around
			var verticalBlend = (j - verticalSampleA) * sampleFrequency
			if interpolationMethod == 1
				verticalBlend = (1 - Cos(verticalBlend * PI)) * 0.5
			// Blend the top two corners:
			let top = linear(baseNoise.get(horizontalSampleA, verticalSampleA), baseNoise.get(horizontalSampleB, verticalSampleA), horizontalBlend)
			// Blend the bottom two corners:
			let bottom = linear(baseNoise.get(horizontalSampleA, verticalSampleB), baseNoise.get(horizontalSampleB, verticalSampleB), horizontalBlend)
			// Final blend:
			smoothNoise.set(i, j, linear(top, bottom, verticalBlend))
			computationCost += 0.3
		checkForComputationBreak()
	return smoothNoise

/** Generates random noise map of given size (width, height) with values between 0 and 1. */
public function generateRandomNoise(int width, int height) returns Array2DReal
	let baseNoise = new Array2DReal(width, height)
	// Create base noise map:
	for i = 0 to width - 1
		for j = 0 to height - 1
			baseNoise.set(i, j, GetRandomReal(0., 1.))
			computationCost += 0.1
		checkForComputationBreak()
	return baseNoise

/** Generates perlin noise map of given size (width, height) with values between 0 and 1.
	High octave counts gernerate maps with bigger plateaus. Values below 2 will return an unsmoothed random noise map.
	Persistance defines the smoothness of the map. Low values towards 0 give very smooth maps.
	Available interpolations: Linear, Cosine
	Available distributions: Default = "Bell shaped", Slope = "Half bell shaped, peak at 0", Uniform = "Evenly distributed, no peak" */
public function generatePerlinNoise(int width, int height, int octaveCount, real persistance, string interpolation, string distribution) returns Array2DReal
	Array2DReal perlinNoise
	if octaveCount > 1
		let baseNoise = generateRandomNoise(width, height)
		var amplitude = 1.
		var totalAmplitude = 0.
		// Blend noise together:
		newInitSubStatus("Noise blending")
		perlinNoise = new Array2DReal(width, height)
		for octave = octaveCount - 1 downto 0
			setInitTaskStatus(octaveCount - octave, octaveCount)
			let smoothNoise = smoothNoise(baseNoise, interpolation, octave)
			amplitude *= persistance
			totalAmplitude += amplitude
			for i = 0 to width - 1
				for j = 0 to height - 1
					if octave == octaveCount - 1
						perlinNoise.set(i, j, smoothNoise.get(i, j) * amplitude)
					else
						perlinNoise.set(i, j, perlinNoise.get(i, j) + smoothNoise.get(i, j) * amplitude)
					computationCost += 0.1
				checkForComputationBreak()
			destroy smoothNoise
		destroy baseNoise
		// Normalisation:
		newInitSubStatus("Noise normalisation")
		for i = 0 to width - 1
			setInitTaskStatus(i + 1, width)
			for j = 0 to height - 1
				perlinNoise.set(i, j, perlinNoise.get(i, j) / totalAmplitude)
				computationCost += 0.1
			checkForComputationBreak()
	else
		perlinNoise = generateRandomNoise(width, height)
	// Postprocessing:
	newInitSubStatus("Noise postprocessing")
	if distribution == "Default"  // Standard bell shaped curve
		return perlinNoise
	else if distribution == "Slope"  // Half bell shaped curve with peak at 0
		for i = 0 to width - 1
			for j = 0 to height - 1
				perlinNoise.set(i, j, (perlinNoise.get(i, j) * 2 - 1).abs())
				computationCost += 0.1
			checkForComputationBreak()
	else if distribution == "Uniform"  // Horizontal curve with no peak
		if width % 2 != 0
			Log.error("width (=" + width.toString() + ") has to be even for Uniform distribution")
		for i = 0 to (width div 2) - 1
			for j = 0 to height - 1
				// Reverse Box–Muller transformation:
				let z1 = perlinNoise.get(i, j)
				let z2 = perlinNoise.get(width - 1 - i, j)
				perlinNoise.set(i, j, EULER.pow(-0.5 * (z1 * z1 + z2 * z2)))
				let acosInput = z1 / (z1 * z1 + z2 * z2).divByZeroProt()
				if acosInput.abs() > 1
					Log.error("Acos only allows numbers between -1 and 1")
				perlinNoise.set(width - 1 - i, j, Acos(acosInput) / (2 * PI))
				computationCost += 0.2
			checkForComputationBreak()
	else
		Log.error("Invalid distribution method")
	return perlinNoise
public function generatePerlinNoise(int width, int height, int octaveCount, real persistance, string interpolation) returns Array2DReal
	return generatePerlinNoise(width, height, octaveCount, persistance, interpolation, "Default")
public function generatePerlinNoise(int width, int height, int octaveCount) returns Array2DReal
	return generatePerlinNoise(width, height, octaveCount, .5, "Linear")