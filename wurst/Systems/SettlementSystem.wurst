/*-------------------------------------------------------------
// Version number:
1.0.0

// Description:
Stores settlements and its buildings, inhabitants and progress level.

// Changelog:
- 1.0.0:
Initial version.
-------------------------------------------------------------*/
package SettlementSystem
import UnitMap
import MultiboardPrioritySystem
import Icons
import UnitIndexer
import RegisterEvents
import Orders
import UtilityFunctions
import ConstantData
import UnitTest
import ClosureTimers
import StorageSystem
import Stock
import ErrorHandling


// --------------------
// Data code
// --------------------

let LEVEL_ICON_PATH = Icons.bTNSnazzyScroll
let POPULATION_ICON_PATH = Icons.bTNPeasant
let BUILDINGS_ICON_PATH = Icons.bTNFarm
let MAX_LEVEL = 3

var nameCounter = 0

function getBuildingRange(int level) returns real
	switch level
		case 1
			return 768.
		case 2
			return 1024.
		case 3
			return 1280.
	return 0.

function getLevel(int popCount) returns int
	if popCount >= 30
		return 3
	else if popCount >= 10
		return 2
	return 1

function getRequiredLevel(int buildingId) returns int
	switch buildingId
		case UnitIdsCustom.AoW.townHall
			return 0
		case UnitIdsCustom.AoW.keep
			return 0
		case UnitIdsCustom.AoW.castle
			return 0
		case UnitIdsCustom.AoW.peasantHouse
			return 1
		case UnitIdsCustom.AoW.lumberMill
			return 1
		case UnitIdsCustom.AoW.barracks
			return 1
		case UnitIdsCustom.AoW.blacksmith
			return 2
	return 1

function getInvalidMessageText(Validity val) returns string
	switch val
		case OUTSIDE_RANGE
			return "Can't be constructed outside the range of a settlement"
		case INVALID_LEVEL
			return "Settlement level to low for this building type"
		case TOO_CLOSE
			return "Can't be founded that close to another settlement"
		case ALREADY_ADDED
			return "Is already a settlement"
		case INVALID_TYPE
			return "Invalid building type to found a settlement"
		default
			error("Unregistered invalidity message text for " + (val castTo int).toString())
			return null

function getRandomName() returns string
	nameCounter++
	if nameCounter > 7
		nameCounter = 1
	switch nameCounter
		// Source: https://en.wikipedia.org/wiki/List_of_cities_in_the_United_Kingdom
		case 1
			return "Aberdeen"
		case 2
			return "Armagh"
		case 3
			return "Bangor"
		case 4
			return "Bath"
		case 5
			return "Belfast"
		case 6
			return "Birmingham"
		case 7
			return "Bradford"
		default
			error("Wrong configuration for getRandomName")
			return null


// --------------------
// Functional code
// --------------------

let SETTLEMENT_MAP = new IterableUnitHashMap<Settlement>(null)

enum Validity
	VALID
	OUTSIDE_RANGE
	INVALID_LEVEL
	TOO_CLOSE
	ALREADY_ADDED
	INVALID_TYPE

class Settlement
	private unit centreBuilding
	private string name
	protected group buildings
	protected group inhabitants
	protected int level

	construct(unit centreBuilding, string name)
		this.centreBuilding = centreBuilding
		this.name = name
		buildings = CreateGroup()
		inhabitants = CreateGroup()
		updateLevel()

	ondestroy
		for building in buildings
			building.setOwner(Player(PLAYER_NEUTRAL_PASSIVE), true)
		buildings.destr()
		inhabitants.destr()

	private function updateLevel()
		level = getLevel(inhabitants.size())

	function isMember(unit member) returns bool
		if member.isType(UNIT_TYPE_STRUCTURE)
			return buildings.contains(member)
		else
			return inhabitants.contains(member)

	function getName() returns string
		return name

	function getInhabitants() returns group
		let inhabitants = CreateGroup()
		inhabitants.addGroup(this.inhabitants)
		return inhabitants

	function addMember(unit member)
		if member.isType(UNIT_TYPE_STRUCTURE)
			buildings.addUnit(member)
		else
			inhabitants.addUnit(member)
			updateLevel()

	function removeMember(unit member)
		if member.isType(UNIT_TYPE_STRUCTURE)
			buildings.removeUnit(member)
		else
			inhabitants.removeUnit(member)
			updateLevel()


function unit.addSettlement(string name) returns Validity
	// Check validity:
	if SETTLEMENT_MAP.has(this)
		return Validity.ALREADY_ADDED
	if isCentreBuilding(this.getUnitId()) == false
		return Validity.INVALID_TYPE
	let pos = this.getPos()
	let range = 2 * getBuildingRange(MAX_LEVEL)
	for centreBuilding in SETTLEMENT_MAP
		if pos.distanceTo(centreBuilding.getPos()) <= range
			return Validity.TOO_CLOSE
	// Add settlement and nearby units:
	let settlement = new Settlement(this, name)
	SETTLEMENT_MAP.put(this, settlement)
	ENUM_GROUP.enumUnitsInRange(this.getPos(), getBuildingRange(settlement.level), null)
	let owner = this.getOwner()
	for targetUnit from ENUM_GROUP
		if targetUnit.getOwner() == owner and targetUnit.getSettlement() == null
			settlement.addMember(targetUnit)
	return Validity.VALID

function unit.addToSettlementInRange() returns Validity
	let pos = this.getPos()
	for centreBuilding in SETTLEMENT_MAP
		let settlement = SETTLEMENT_MAP.get(centreBuilding)
		if pos.distanceTo(centreBuilding.getPos()) <= getBuildingRange(settlement.level)
			if getRequiredLevel(this.getUnitId()) > settlement.level
				return Validity.INVALID_LEVEL
			settlement.addMember(this)
			return Validity.VALID
	return Validity.OUTSIDE_RANGE

function unit.removeFromSettlement()
	var settlement = SETTLEMENT_MAP.tryRemove(this)
	if settlement != null
		destroy settlement  // Destroy settlement if centre building gets removed
	else
		settlement = this.getSettlement()
		if settlement != null
			settlement.removeMember(this)

/** Returns if given unit is a centre buidlding of a settlement. */
public function isCentreBuilding(int buildingId) returns bool
	return getRequiredLevel(buildingId) == 0

/** Returns the settlement of given unit. */
public function unit.getSettlement() returns Settlement
	var settlement = SETTLEMENT_MAP.tryGet(this)  // Check if it is the centre building
	if settlement == null
		for centreBuilding in SETTLEMENT_MAP
			settlement = SETTLEMENT_MAP.get(centreBuilding)
			if settlement.isMember(this)
				return settlement
		settlement = null
	return settlement

/** Add this unit as a new settlement. Returns back this unit. */
public function unit.addAsSettlement() returns unit
	if this.addSettlement(getRandomName()) != Validity.VALID
		error("Could not create " + this.getName() + " as settlement building")
	return this

/** Trys to add this unit to given settlement. Returns if it could be added. */
public function unit.tryAddToSettlement(unit centreBuilding) returns bool
	let settlement = SETTLEMENT_MAP.tryGet(centreBuilding)
	if settlement == null
		return false
	if this.getPos().distanceTo(centreBuilding.getPos()) > getBuildingRange(settlement.level) or getRequiredLevel(this.getUnitId()) > settlement.level
		return false
	settlement.addMember(this)
	return true

/** Try to set system relevant infos for given object in this multiboard. Returns if it could be set. */
public function multiboard.trySetObjectInfoMultiboard(Settlement object) returns bool
	if object == null
		return false
	this.addMultiboardLine("Settlement: " + object.getName(), HEADLINE_ICON_PATH)
	this.addMultiboardLine("Level: " + object.level.toString(), LEVEL_ICON_PATH)
	this.addMultiboardLine("Population: " + object.inhabitants.size().toString(), POPULATION_ICON_PATH)
	this.addMultiboardLine("Buildings: " + object.buildings.size().toString(), BUILDINGS_ICON_PATH)
	return true

init
	// Remove settlement from every removed centre building:
	onUnitDeindex(() -> getIndexingUnit().removeFromSettlement())
	// Register upgrade starts:
	registerPlayerUnitEvent(EVENT_PLAYER_UNIT_UPGRADE_START) ->
		let building = GetTriggerUnit()
		Validity val
		if isCentreBuilding(building.getUnitId())
			val = building.addSettlement(getRandomName())
		else
			val = building.addToSettlementInRange()
		if val != Validity.VALID
			printTimedToPlayer("Invalid: " + getInvalidMessageText(val), INFO_MSG_TIME, building.getOwner())
			building.issueImmediateOrderById(SpecialOrders.cancel)


// --------------------
// Test code
// --------------------

unit testSettlementSystem_Build_unitA = null
unit testSettlementSystem_Build_buildingA = null
unit testSettlementSystem_Build_buildingB = null
Settlement testSettlementSystem_Build_settlementA = null
public function testSettlementSystem_Build(vec2 testCentre)
	let testName = setTestName("testSettlementSystem_Build", true)
	// Remove units blocking the building:
	ForGroup(GetUnitsInRectAll(testCentre.withRadiusRect(512.)), () -> GetEnumUnit().remove())
	// Order to build:
	let unitA = createUnit(Settings.USER_PLAYER, UnitIdsCustom.AoW.peasant, testCentre, angle(0))
	let storageA = unitA.getStorage()
	storageA.addWare(ware(WareType.WOOD, 4))
	storageA.addWare(ware(WareType.STONE, 3))
	storageA.addWare(ware(WareType.METAL, 2))
	unitA.issuePointOrderById(UnitIdsCustom.AoW.townHall, testCentre)
	testSettlementSystem_Build_unitA = null
	testSettlementSystem_Build_buildingA = null
	testSettlementSystem_Build_buildingB = null
	testSettlementSystem_Build_settlementA = null
	doAfter(MIN_ACTION_SLEEP_TIME) () ->
		// Check settlement mappings:
		let filterA = Filter(() -> GetFilterUnit().getUnitId() == UnitIdsCustom.AoW.townHall)
		testSettlementSystem_Build_buildingA = testCentre.getNearestUnit(128., filterA, Settings.USER_PLAYER)
		filterA.destr()
		assertNotNull(testName, testSettlementSystem_Build_buildingA)
		testSettlementSystem_Build_settlementA = testSettlementSystem_Build_buildingA.getSettlement()
		assertNotNull(testName, testSettlementSystem_Build_settlementA)
		testSettlementSystem_Build_settlementA.level.assertEquals(testName, 1)
		testSettlementSystem_Build_settlementA.inhabitants.size().assertEquals(testName, 1)
		testSettlementSystem_Build_settlementA.buildings.size().assertEquals(testName, 0)
		assertTrue(testName, testSettlementSystem_Build_settlementA.isMember(unitA))
		// Order to build new structure for settlement:
		testSettlementSystem_Build_unitA = createUnit(Settings.USER_PLAYER, UnitIdsCustom.AoW.peasant, testCentre.add(384., 0.), angle(0))
		testSettlementSystem_Build_unitA.tryAddToSettlement(testSettlementSystem_Build_buildingA).assertTrue(testName)
		let storageB = testSettlementSystem_Build_unitA.getStorage()
		storageB.addWare(ware(WareType.WOOD, 4))
		testSettlementSystem_Build_unitA.issuePointOrderById(UnitIdsCustom.AoW.peasantHouse, testCentre.add(384., 0.))
	doAfter(2 * MIN_ACTION_SLEEP_TIME) () ->
		// Recheck settlement mappings:
		let filterB = Filter(() -> GetFilterUnit().getUnitId() == UnitIdsCustom.AoW.peasantHouse)
		testSettlementSystem_Build_buildingB = testCentre.add(384., 0.).getNearestUnit(128., filterB, Settings.USER_PLAYER)
		filterB.destr()
		assertNotNull(testName, testSettlementSystem_Build_buildingB)
		assertNotNull(testName, testSettlementSystem_Build_settlementA)
		testSettlementSystem_Build_settlementA.level.assertEquals(testName, 1)
		testSettlementSystem_Build_settlementA.inhabitants.size().assertEquals(testName, 2)
		testSettlementSystem_Build_settlementA.buildings.size().assertEquals(testName, 1)
		assertTrue(testName, testSettlementSystem_Build_settlementA.isMember(testSettlementSystem_Build_buildingB))
		testFail(testName, "Test implementation not finished yet")  // TODO: finish implementation
	doAfter(3 * MIN_ACTION_SLEEP_TIME) () ->
		// Abort constructions:
		testSettlementSystem_Build_buildingB.issueImmediateOrderById(SpecialOrders.cancel)
		testSettlementSystem_Build_buildingA.issueImmediateOrderById(SpecialOrders.cancel)
		testFinish(testName)
	doAfter(4 * MIN_ACTION_SLEEP_TIME) () ->
		// Remove test units:
		unitA.kill()
		unitA.remove()
		testSettlementSystem_Build_unitA.kill()
		testSettlementSystem_Build_unitA.remove()