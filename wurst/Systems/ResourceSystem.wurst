/*-------------------------------------------------------------
// Version number:
1.0.0

// Description:
Gives predefined unit types resources wares that can be extracted by workers via the harvest ability.

// Changelog:
- 1.0.0:
Initial version.
-------------------------------------------------------------*/
package ResourceSystem
import OnUnitEnterLeave
import MapBounds
import ConstantDataSystem
import MultiboardPrioritySystem
import UtilityFunctions
import Stock
import StorageSystem
import Entity
import UnitIndexer
import LinkedList
import Icons


// --------------------
// Data code
// --------------------

let MAX_AUTO_ORDER_RANGE = 1024.
let WORKERS_ICON_PATH = Icons.bTNBash

function getDefaultInitWares(int resourceTypeId) returns LinkedList<ware>
	let wares = new LinkedList<ware>()
	switch resourceTypeId
		case UnitIdsCustom.Trees.beech
			wares.add(ware(WareType.WOOD, GetRandomInt(6, 8)))
		case UnitIdsCustom.Trees.birch
			wares.add(ware(WareType.WOOD, GetRandomInt(4, 6)))
		case UnitIdsCustom.Trees.greyOak
			wares.add(ware(WareType.WOOD, GetRandomInt(6, 8)))
		case UnitIdsCustom.Trees.chestnut
			wares.add(ware(WareType.WOOD, GetRandomInt(4, 6)))
		case DestructableIds.summerTreeWall
			wares.add(ware(WareType.WOOD, GetRandomInt(6, 8)))
	return wares

function isKilledWhenDepleted(int resourceTypeId) returns bool
	switch resourceTypeId
		case UnitIdsCustom.Trees.beech
			return true
		case UnitIdsCustom.Trees.birch
			return true
		case UnitIdsCustom.Trees.greyOak
			return true
		case UnitIdsCustom.Trees.chestnut
			return true
		case DestructableIds.summerTreeWall
			return true
		default
			return false

function getWorkProgressPerHarvest(int workerUnitId, int resourceTypeId) returns real
	switch resourceTypeId
		case UnitIdsCustom.Trees.beech
			switch workerUnitId
				case UnitIdsCustom.Melee.peasant
					return 0.67
			return 0.5
		case UnitIdsCustom.Trees.birch
			return 0.5
		case UnitIdsCustom.Trees.greyOak
			return 0.5
		case UnitIdsCustom.Trees.chestnut
			return 0.5
		case DestructableIds.summerTreeWall
			return 0.5
		default
			return 0.

function getWaresPerFinishedWork(int resourceTypeId) returns LinkedList<ware>
	let wares = new LinkedList<ware>()
	switch resourceTypeId
		case UnitIdsCustom.Trees.beech
			wares.add(ware(WareType.WOOD, 1))
		case UnitIdsCustom.Trees.birch
			wares.add(ware(WareType.WOOD, 1))
		case UnitIdsCustom.Trees.greyOak
			wares.add(ware(WareType.WOOD, 1))
		case UnitIdsCustom.Trees.chestnut
			wares.add(ware(WareType.WOOD, 1))
		case DestructableIds.summerTreeWall
			wares.add(ware(WareType.WOOD, 1))
	return wares

/** Returns the harvest priority of given resource unit type. Higher values mean a higher priority. */
function getHarvestPriority(int resourceTypeId) returns int
	switch resourceTypeId
		case UnitIdsCustom.Trees.beech
			return 2
		case UnitIdsCustom.Trees.birch
			return 1
		case UnitIdsCustom.Trees.greyOak
			return 3
		case UnitIdsCustom.Trees.chestnut
			return 2
		case DestructableIds.summerTreeWall
			return 2
	return 0

/** Returns the maximum concurrent amount of workers allowed for of given resource unit type. */
function getMaxWorkerCount(int resourceTypeId) returns int
	switch resourceTypeId
		case UnitIdsCustom.Trees.beech
			return 1
		case UnitIdsCustom.Trees.birch
			return 1
		case UnitIdsCustom.Trees.greyOak
			return 2
		case UnitIdsCustom.Trees.chestnut
			return 2
		case DestructableIds.summerTreeWall
			return 2
	return 99


// --------------------
// Functional code
// --------------------

let RESOURCE_MAP = new EntityHashMap<Resource>(null)
let DESTRUCTABLE_DEATH_TRIGGER = CreateTrigger()

class Resource extends Stock
	private entity user
	private bool isKilledWhenDepleted
	private real workProgress
	private int workerCount

	construct(entity resource, bool isKilledWhenDepleted, LinkedList<ware> initWares)
		super(initWares)
		user = resource
		this.isKilledWhenDepleted = isKilledWhenDepleted
		workProgress = 0.
		workerCount = 0

	private function work(real workProgress) returns bool
		this.workProgress += workProgress
		if this.workProgress >= 1.
			this.workProgress -= 1.
			return true
		else
			return false

	function getEntity() returns entity
		return user

	function getWorkerCount() returns int
		return workerCount

	function getFreeWorkerSlots() returns int
		return getMaxWorkerCount(user.getTypeId()) - workerCount

	/** Perform harvest and returns the harvested wares. */
	function harvest(int workerUnitId) returns LinkedList<ware>
		let resourceUnitId = user.getTypeId()
		// Work resource:
		if work(getWorkProgressPerHarvest(workerUnitId, resourceUnitId))
			// Return harvested wares:
			return getWaresPerFinishedWork(resourceUnitId)
		// No wares harvested yet:
		return null

	function addWorker()
		if workerCount >= getMaxWorkerCount(user.getTypeId())
			Log.error("ERROR: Can not add more workers to resource (" + user.getName() + ")")
		workerCount += 1

	function removeWorker()
		if workerCount <= 0
			Log.error("ERROR: Can not remove more workers from resource (" + user.getName() + ")")
		workerCount -= 1

	function checkForDepletionKill() returns bool
		if isKilledWhenDepleted and wares.isEmpty()
			return true
		return false


function entity.addResource()
	if RESOURCE_MAP.has(this) == false
		let unitId = this.getTypeId()
		let wares = getDefaultInitWares(unitId)
		if wares.isEmpty()
			destroy wares
		else
			RESOURCE_MAP.put(this, new Resource(this, isKilledWhenDepleted(unitId), wares))

function entity.removeResource()
	let resource = RESOURCE_MAP.tryRemove(this)
	if resource != null
		destroy resource

int findNextResource_Priority
constant group findNextResource_ValidPriorityUnits = CreateGroup()
constant LinkedList<destructable> findNextResource_ValidDestructables = new LinkedList<destructable>()
function findNextResource_CheckValidity(entity filterEntity) returns bool
	let resource = filterEntity.getResource()
	let priority = getHarvestPriority(filterEntity.getTypeId())
	// Only allow resources that have wares left, free worker slots and a high enough priority:
	if resource != null and resource.isEmpty() == false and resource.getFreeWorkerSlots() > 0 and priority >= findNextResource_Priority
		findNextResource_Priority = priority
		return true
	return false
/** Returns next valid resource at given position for this unit. */
public function unit.findNextResource(vec2 pos) returns entity
	// Check if worker has enough free space:
	if this.getStorage().getFreeCapacity() > 0
		// Get valid units and destructables in range and get highest priority:
		findNextResource_Priority = 0
		var filter = Filter(() -> findNextResource_CheckValidity(entity(GetFilterUnit(), null)))
		ENUM_GROUP.enumUnitsInRange(pos, MAX_AUTO_ORDER_RANGE, filter)
		filter.destr()
		filter = Filter(() -> findNextResource_CheckValidity(entity(null, GetFilterDestructable())))
		EnumDestructablesInRect(pos.withRadiusRect(MAX_AUTO_ORDER_RANGE), filter, () -> findNextResource_ValidDestructables.add(GetEnumDestructable()))
		filter.destr()
		// Remove lower priority units and destructables:
		for target from ENUM_GROUP
			if getHarvestPriority(target.getUnitId()) == findNextResource_Priority
				findNextResource_ValidPriorityUnits.addUnit(target)
		let validPriorityDestructables = new LinkedList<destructable>()
		for target in findNextResource_ValidDestructables
			if getHarvestPriority(target.getTypeId()) == findNextResource_Priority
				validPriorityDestructables.add(target)
		findNextResource_ValidDestructables.clear()
		// Return nearest valid entity:
		var nearestUnit = pos.getNearestUnit(findNextResource_ValidPriorityUnits)
		var nearestDest = pos.getNearestDestructable(validPriorityDestructables)
		destroy(validPriorityDestructables)
		if nearestUnit != null and nearestDest != null
			if pos.distanceToSq(nearestUnit.getPos()) <= pos.distanceToSq(nearestDest.getPos())
				nearestDest = null
			else
				nearestUnit = null
		return entity(nearestUnit, nearestDest)
	else
		return entity(null, null)
/** Returns next valid resource for this unit. */
public function unit.findNextResource() returns entity
	return this.findNextResource(this.getPos())

/** Returns the resource of given entity. */
public function entity.getResource() returns Resource
	return RESOURCE_MAP.tryGet(this)

/** Returns the count of all resources. */
public function getResourceCount() returns int
	return RESOURCE_MAP.getValueCount()

/** Sets system relevant infos for given object in target multiboard. */
public function multiboard.setObjectInfoMultiboard(Resource r) returns bool
	this.addMultiboardLine("Resource:", HEADLINE_ICON_PATH)
	this.addMultiboardLine("Workers: " + r.getWorkerCount().toString() + "/" + getMaxWorkerCount(r.getEntity().getTypeId()).toString(), WORKERS_ICON_PATH)
	for i = 0 to (r.getAmountOfWareTypes() - 1)
		let ware = r.getWare(i)
		this.addMultiboardLine(ware.count.toString() + " " + ware.toString(true), ware.getIconPath())
	return true

init
	// Add resource to every appropriate new unit:
	onEnter() ->
		entity(getEnterLeaveUnit(), null).addResource()
	// Remove resource from every appropriate removed unit:
	onUnitDeindex() ->
		entity(getIndexingUnit(), null).removeResource()
	// Add initially placed destructables:
	EnumDestructablesInRectAll(playableMapRect) ->
		let enumDestructable = GetEnumDestructable()
		entity(null, enumDestructable).addResource()
		DESTRUCTABLE_DEATH_TRIGGER.registerDeathEvent(enumDestructable)
	// Remove resource from every killed destructable:
	DESTRUCTABLE_DEATH_TRIGGER.addAction() ->
		entity(null, GetDyingDestructable()).removeResource()