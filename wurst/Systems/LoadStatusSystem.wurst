/*-------------------------------------------------------------
// Version number:
1.0.0

// Description:
Handles the load status process and its readout to the players.

// Changelog:
- 1.0.0:
Initial version.
-------------------------------------------------------------*/
package LoadStatusSystem
import ClosureTimers
import LinkedList
import UtilityFunctions


// --------------------
// Data code
// --------------------

let LOAD_STATUS_ADJUSTMENT_RATE = 0.25
let UPDATE_SYMBOLS = ["+", "x"]
let TASK_SYMBOL_FINISHED = "="
let TASK_SYMBOL_UNFINISHED = "-"
let LOAD_STATUS_DISPLAY_TYPE = 1  // 0=Deactivated, 1=Normal, 2=WithoutClear
let LOAD_SCREEN_IMAGE_PATHS = [
	"ReplaceableTextures\\Splats\\D_NightElfUberSplat.blp",
	"ReplaceableTextures\\Splats\\D_HumanCastleUberSplat.blp",
	"ReplaceableTextures\\Splats\\D_OrcUberSplat.blp"
	]  // DEBUG: use real backgrounds


// --------------------
// Functional code
// --------------------

string loadStatusCategory
let loadStatusText = new LinkedList<string>()
int loadStatusSymbolIndex
int loadStatusTasksCurrent
int loadStatusTasksAmount
CallbackPeriodic loadStatusCb = null

string currentInitStatus = null
string currentInitSubStatus = null

function updateLoadStatus()
	loadStatusSymbolIndex++
	if loadStatusSymbolIndex >= UPDATE_SYMBOLS.length
		loadStatusSymbolIndex = 0
	while loadStatusText.size() > 1
		print(loadStatusText.dequeue(), LOAD_STATUS_ADJUSTMENT_RATE)
	ClearTextMessages()
	var loadingSymbols = ""
	for i = 1 to loadStatusTasksCurrent - 1
		loadingSymbols += TASK_SYMBOL_FINISHED
	loadingSymbols += UPDATE_SYMBOLS[loadStatusSymbolIndex]
	for i = loadStatusTasksCurrent + 1 to loadStatusTasksAmount
		loadingSymbols += TASK_SYMBOL_UNFINISHED
	print(loadStatusCategory + " [" + loadingSymbols + "]", LOAD_STATUS_ADJUSTMENT_RATE)
	print(loadStatusText.getFirst(), LOAD_STATUS_ADJUSTMENT_RATE)

function updateLoadStatusWithoutClear()
	if loadStatusText.isEmpty() == false
		loadStatusSymbolIndex++
		if loadStatusSymbolIndex >= UPDATE_SYMBOLS.length
			loadStatusSymbolIndex = 0
		var loadingSymbols = ""
		for i = 1 to loadStatusTasksCurrent - 1
			loadingSymbols += TASK_SYMBOL_FINISHED
		loadingSymbols += UPDATE_SYMBOLS[loadStatusSymbolIndex]
		for i = loadStatusTasksCurrent + 1 to loadStatusTasksAmount
			loadingSymbols += TASK_SYMBOL_UNFINISHED
		print(loadStatusCategory + " [" + loadingSymbols + "]")
		while loadStatusText.isEmpty() == false
			print(loadStatusText.dequeue())

function startLoadStatus(string category, int tasksAmount)
	if loadStatusCb != null
		Log.error("Cannot start another load status until the current one is finished")
	loadStatusCategory = category
	loadStatusTasksCurrent = 0
	loadStatusTasksAmount = tasksAmount
	loadStatusSymbolIndex = 0
	if LOAD_STATUS_DISPLAY_TYPE == 1
		loadStatusCb = doPeriodically(LOAD_STATUS_ADJUSTMENT_RATE, cb -> updateLoadStatus())
	else if LOAD_STATUS_DISPLAY_TYPE == 2
		loadStatusCb = doPeriodically(LOAD_STATUS_ADJUSTMENT_RATE, cb -> updateLoadStatusWithoutClear())

function finishLoadStatus()
	if loadStatusCb != null
		destroy(loadStatusCb)
		loadStatusCb = null
		updateLoadStatus()
	loadStatusText.clear()
	hideFullscreenImage(true)

/** Start init status with given category and given amount of tasks. */
public function startInitStatus(string category, int tasksAmount, string statusName)
	startLoadStatus(category, tasksAmount)
	newInitStatus(statusName)

/** Start init status with given name and finish current one if existent. Use null to finish initialisation. */
public function newInitStatus(string statusName)
	if currentInitStatus != null
		loadStatusText.add("Finished " + currentInitStatus)
	currentInitStatus = statusName
	currentInitSubStatus = null
	if currentInitStatus != null
		loadStatusTasksCurrent++
		loadStatusText.add("Starting " + currentInitStatus)
		showFullscreenImage(LOAD_SCREEN_IMAGE_PATHS[(loadStatusTasksCurrent - 1) mod LOAD_SCREEN_IMAGE_PATHS.length], true)
	else
		finishLoadStatus()

/** Start init sub status with given name and finish current one if existent. Use null to finish current sub status. */
public function newInitSubStatus(string subStatusName)
	if currentInitSubStatus != null
		loadStatusText.add("Finished " + currentInitStatus + " - " + currentInitSubStatus)
	currentInitSubStatus = subStatusName
	if currentInitSubStatus != null
		loadStatusText.add("Starting " + currentInitStatus + " - " + currentInitSubStatus)

/** Set init step status to given current count of given amount. */
public function setInitStepStatus(int stepsCurrent, int stepsAmount)
	if currentInitSubStatus != null
		loadStatusText.add(currentInitStatus + " - " + currentInitSubStatus + " (" + stepsCurrent.toString() + " / " + stepsAmount.toString() + ")")
	else
		loadStatusText.add(currentInitStatus + " (" + stepsCurrent.toString() + " / " + stepsAmount.toString() + ")")