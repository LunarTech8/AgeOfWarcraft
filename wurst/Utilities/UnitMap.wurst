/*-------------------------------------------------------------
// Version number:
1.0.0

// Description:
General unit to generic class map that allows for definition of custom utility functions and the use of different data handling solutions.
(Eg. allows use of unit index with an array instead of a hash map.)

// Changelog:
- 1.0.0:
Initial version.
-------------------------------------------------------------*/
package UnitMap
import HashMap
import UnitIndexer
import HashList
import UnitTest
import ConstantData


// --------------------
// Functional code
// --------------------

public interface UnitMap<T>
	function has(unit key) returns bool
	function get(unit key) returns T
	function tryGet(unit key) returns T
	function put(unit key, T value)
	function remove(unit key)
	function tryRemove(unit key) returns T

/** Uses hash table entries (via HashMap) to map units to the given values. */
public class UnitHashMap<T> implements UnitMap<T>
	protected let map = new HashMap<unit, T>
	protected constant T nullElem  // Is required because some types (like int) can't be null

	construct(T nullElem)
		this.nullElem = nullElem
	private construct()  // Needed because generic variables can't be passed in super call

	ondestroy
		destroy map

	/** Checks if the given key is mapped. */
	override function has(unit key) returns bool
		return map.has(key)

	/** Returns the value of given key. */
	override function get(unit key) returns T
		return map.get(key)

	/** Returns the value of given key. Instead of throwing an error returns the null element if given key isn't mapped. */
	override function tryGet(unit key) returns T
		if map.has(key)
			return map.get(key)
		else
			return nullElem

	/** Saves the given value under the given key. */
	override function put(unit key, T value)
		map.put(key, value)

	/** Removes the key-value pair saved under the given key. */
	override function remove(unit key)
		map.remove(key)

	/** Removes and returns the value of given key. Returns the null element instead if given key isn't mapped. */
	override function tryRemove(unit key) returns T
		if map.has(key)
			let value = map.get(key)
			map.remove(key)
			return value
		else
			return nullElem

	/** Returns the count of all elements. */
	function getValueCount() returns int
		return map.size()

/** Uses unit user data (via UnitIndexer) to quickly map units to the given values. Size of used value array is fixed to 8192.
Use "onUnitDeindex" instead of "onLeave" for value removal of this map (because otherwise the units index might already be 0). */
public class UnitFixedIndexMap<T> implements UnitMap<T>
	protected let size = 8192
	protected T array[size] values

	construct()
		values[0] = null  // Null first slot for unindexed units

	/** Checks if the given key is mapped. */
	override function has(unit key) returns bool
		return values[key.getIndex()] != null  // Unindexed keys will use first nulled slot

	/** Returns the value of given key. */
	override function get(unit key) returns T
		return values[key.toUnitIndex() castTo int]  // Indexes key if necessary so that an error is thrown if unmapped

	/** Returns the value of given key. Instead of throwing an error returns the null element if given key isn't mapped. */
	override function tryGet(unit key) returns T
		return values[key.getIndex()]  // Will return null if key isn't indexed

	/** Saves the given value under the given key. */
	override function put(unit key, T value)
		values[key.toUnitIndex() castTo int] = value  // Automatically indexes key if previously unmapped

	/** Removes the key-value pair saved under the given key. */
	override function remove(unit key)
		values[key.toUnitIndex() castTo int] = null  // Automatically indexes key if previously unmapped

	/** Removes and returns the value of given key. Returns null instead if given key isn't mapped. */
	override function tryRemove(unit key) returns T
		let index = key.getIndex()
		if index != 0
			let value = values[index]
			values[index] = null
			return value
		else
			return null

/** Uses hash table entries (via HashMap) to map units to the given values.
Map can be iterated over its keys. */
public class IterableUnitHashMap<T> extends UnitHashMap<T>
	protected let keys = new HashList<unit>

	construct(T nullElem)
		super()
		this.nullElem = nullElem  // Needed because generic variables can't be passed in super call

	ondestroy
		destroy keys

	/** Saves the given value under the given key. */
	override function put(unit key, T value)
		super.put(key, value)
		if keys.has(key) == false
			keys.add(key)

	/** Removes the key-value pair saved under the given key. */
	override function remove(unit key)
		super.remove(key)
		keys.remove(key)

	/** Removes and returns the value of given key. Returns the null element instead if given key isn't mapped. */
	override function tryRemove(unit key) returns T
		if keys.has(key)
			let value = super.get(key)
			super.remove(key)
			keys.remove(key)
			return value
		else
			return nullElem

	/** Returns an iterator that iterates over the map's keys. */
	function iterator() returns HLIterator<unit>
		return keys.iterator()

	/** Returns the length of this iterable map. */
	function size() returns int
		return keys.size()


// --------------------
// Test code
// --------------------

@Test public function testUnitHashMap_AddAndRemove()
	testUnitHashMap_AddAndRemove(false)
public function testUnitHashMap_AddAndRemove(bool isInGameTest)
	let testName = setTestName("testUnitHashMap_AddAndRemove", isInGameTest)
	let testCentre = vec2(0., 0.)
	// Create new map:
	let hashMapA = new UnitHashMap<string>(null)
	// Add entries and check:
	let unitA = createUnit(Settings.USER_PLAYER, UnitIdsCustom.AoW.peasant, testCentre, angle(0))
	hashMapA.put(unitA, "unitA")
	hashMapA.get(unitA).assertEquals(testName, "unitA")
	hashMapA.has(unitA).assertTrue(testName)
	let unitB = createUnit(Settings.USER_PLAYER, UnitIdsCustom.AoW.peasant, testCentre, angle(0))
	hashMapA.put(unitB, "unitB")
	hashMapA.get(unitB).assertEquals(testName, "unitB")
	// Remove entry and check:
	hashMapA.remove(unitA)
	hashMapA.has(unitA).assertFalse(testName)
	hashMapA.tryGet(unitA).assertEquals(testName, hashMapA.nullElem)
	hashMapA.tryRemove(unitA).assertEquals(testName, hashMapA.nullElem)
	hashMapA.get(unitB).assertEquals(testName, "unitB")
	hashMapA.tryGet(unitB).assertEquals(testName, "unitB")
	let unitC = createUnit(Settings.USER_PLAYER, UnitIdsCustom.AoW.peasant, testCentre, angle(0))
	hashMapA.put(unitC, "unitC")
	hashMapA.tryRemove(unitC).assertEquals(testName, "unitC")
	// Create another map:
	let hashMapB = new UnitHashMap<int>(0)
	hashMapB.has(unitB).assertFalse(testName)
	hashMapB.put(unitA, 1)
	hashMapB.get(unitA).assertEquals(testName, 1)
	hashMapA.has(unitA).assertFalse(testName)
	hashMapB.put(unitB, 2)
	hashMapB.put(unitC, 3)
	hashMapB.get(unitC).assertEquals(testName, 3)
	hashMapB.remove(unitB)
	let unitD = createUnit(Settings.USER_PLAYER, UnitIdsCustom.AoW.peasant, testCentre, angle(0))
	testFinish(testName)
	// Remove test units:
	if isInGameTest
		unitA.remove()
		unitB.remove()
		unitC.remove()
		unitD.remove()
	// Destroy class objects:
	destroy hashMapA
	destroy hashMapB