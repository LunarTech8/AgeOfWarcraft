/*-------------------------------------------------------------
// Version number:
1.0.0

// Description:
Generates balanced, randomized unit waves based on defined unit costs.

// Changelog:
- 1.0.0:
Initial version.
-------------------------------------------------------------*/
package UnitSpawnSystem
import ConstantData
import ErrorHandling
import LinkedList
import UtilityFunctions


// --------------------
// Data code
// --------------------

let MAX_ENTRY_COUNT = 99999  // Is limited to allow tuple to be converted into a single int
let MIN_ENTRY_UNIT_ID = OFFSET_UNIT_ID  // Is limited to allow tuple to be converted into a single int
let MAX_ENTRY_UNIT_ID = OFFSET_UNIT_ID + 9999  // Is limited to allow tuple to be converted into a single int

enum UnitCategory
	HUMANS
	UNDEAD
	ORCS
	ANIMALS

/** Returns the spawn cost for given unit type. */
function getUnitCost(int unitId) returns real
	switch unitId
		case UnitIdsCustom.AoW.peasant
			return 1.
		case UnitIdsCustom.AoW.footman
			return 3.
	return 0.

/** Returns a list of available units for given category. The list is ordered by the units costs with rising values. */
function getAvailableUnitIds(UnitCategory category) returns LinkedList<int>
	let unitIds = new LinkedList<int>()
	switch category
		case HUMANS
			unitIds.add(UnitIdsCustom.AoW.peasant)
			unitIds.add(UnitIdsCustom.AoW.footman)
		default
			error("Unmapped category (" + (category castTo int).toString() + ")")
	return unitIds

// --------------------
// Functional code
// --------------------

tuple entry(int unitId, int count)

public function entryToIndex(entry e) returns int
	if e.count < 0 or e.count > MAX_ENTRY_COUNT
		error("Entry count (" + e.count.toString() + ") isn't allowed to be smaller than 0 or bigger than " + MAX_ENTRY_COUNT.toString())
	else if e.unitId < MIN_ENTRY_UNIT_ID or e.unitId > MAX_ENTRY_UNIT_ID
		error("Entry unit type (" + e.unitId.toString() + ") isn't allowed to be smaller than " + MIN_ENTRY_UNIT_ID.toString() + " or bigger than " + MAX_ENTRY_UNIT_ID.toString())
	return e.count + (e.unitId - MIN_ENTRY_UNIT_ID + 1) * (MAX_ENTRY_COUNT + 1)

public function entryFromIndex(int index) returns entry
	let count = index mod (MAX_ENTRY_COUNT + 1)
	let unitId = ((index - count) div (MAX_ENTRY_COUNT + 1)) + MIN_ENTRY_UNIT_ID - 1
	return entry(unitId, count)

public class UnitWave
	private real totalCost
	private LinkedList<entry> unitIds

	construct(real maxTotalCost, UnitCategory category)
		totalCost = 0.
		unitIds = new LinkedList<entry>()
		generateUnitIds(maxTotalCost, category)

	ondestroy
		destroy unitIds

	function generateUnitIds(real maxTotalCost, UnitCategory category)
		let availableUnitIds = getAvailableUnitIds(category)
		var biggestUnitCost = getUnitCost(availableUnitIds.peek())
		while true
			// Update available units list:
			while biggestUnitCost > maxTotalCost - totalCost
				availableUnitIds.pop()
				if availableUnitIds.isEmpty()
					destroy availableUnitIds
					return
				biggestUnitCost = getUnitCost(availableUnitIds.peek())
			// Pick random unit:
			let pickedUnitId = availableUnitIds.get(GetRandomInt(0, availableUnitIds.size() - 1))
			totalCost += getUnitCost(pickedUnitId)
			var targetEntry = entry(pickedUnitId, 0)
			for iEntry in unitIds
				if iEntry.unitId == pickedUnitId
					targetEntry = iEntry
					break
			// Update picked units list:
			if targetEntry.count > 0
				unitIds.replace(targetEntry, entry(pickedUnitId, targetEntry.count + 1))
			else
				unitIds.add(entry(pickedUnitId, 1))

	function instantiateWave(player owner, vec2 pos) returns group
		let units = CreateGroup()
		for iEntry in unitIds
			for i = 0 to iEntry.count - 1
				units.addUnit(createUnit(owner, iEntry.unitId, pos, getRandomAngle()))
		return units