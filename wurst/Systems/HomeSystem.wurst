/*-------------------------------------------------------------
// Version number:
1.0.0

// Description:
Stores home buildings and its inhabitants.

// Changelog:
- 1.0.0:
Initial version.
-------------------------------------------------------------*/
package HomeSystem
import ConstantData
import UnitMap
import UtilityFunctions
import MultiboardPrioritySystem
import UnitIndexer
import Icons
import RegisterEvents
import ErrorHandling


// --------------------
// Data code
// --------------------

let INHABITANTS_ICON_PATH = Icons.bTNSnazzyScroll

/** Returns if the given unit type can inhabit the given building type. */
function isInhabitantable(int unitId, int buildingId) returns bool
	switch buildingId
		case UnitIdsCustom.AoW.peasantHouse
			switch unitId
				case UnitIdsCustom.AoW.peasant
					return true
				case UnitIdsCustom.AoW.peasantGirl
					return true
	return false

/** Returns the maximum allowed amount of inhabitants for the given building type. */
function getMaxInhabitants(int buildingId) returns int
	switch buildingId
		case UnitIdsCustom.AoW.peasantHouse
			return 5
	return 0


// --------------------
// Functional code
// --------------------

let HOME_MAP = new IterableUnitHashMap<Home>(null)

public class Home
	protected unit user
	protected group inhabitants

	construct(unit home)
		user = home
		inhabitants = CreateGroup()

	ondestroy
		for inhabitant in inhabitants
			inhabitant.show()
		inhabitants.destr()

	function isValidInhabitantType(int unitId) returns bool
		return isInhabitantable(unitId, user.getUnitId())

	function isInhabitant(unit inhabitant) returns bool
		return inhabitants.contains(inhabitant)

	function getUnit() returns unit
		return user

	function getInhabitantCount() returns int
		return inhabitants.size()

	function getInhabitants() returns group
		let inhabitants = CreateGroup()
		inhabitants.addGroup(this.inhabitants)
		return inhabitants

	function getFreeApartementSlots() returns int
		return getMaxInhabitants(user.getUnitId()) - inhabitants.size()

	function addInhabitant(unit inhabitant)
		if inhabitants.contains(inhabitant) or inhabitants.size() >= getMaxInhabitants(user.getUnitId())
			error("Can't add inhabitant to this home")
		inhabitants.addUnit(inhabitant)

	function removeInhabitant(unit inhabitant)
		if inhabitants.contains(inhabitant) == false
			error("Can't remove inhabitant from this home")
		inhabitants.removeUnit(inhabitant)


function unit.addHome() returns bool
	if HOME_MAP.has(this) == false and getMaxInhabitants(this.getUnitId()) > 0.
		HOME_MAP.put(this, new Home(this))
		return true
	return false

function unit.removeHome()
	let home = HOME_MAP.tryRemove(this)
	if home != null
		destroy home

/** Returns the home of given building. */
public function unit.toHome() returns Home
	return HOME_MAP.tryGet(this)

/** Creates and returns a home building with given values. */
public function createHomeBuilding(player owner, int unitId, vec2 pos, angle facing) returns unit
	let building = createUnit(owner, unitId, pos, facing)
	if building.addHome() == false
		error("Could not create " + building.getName() + " as home building")
	return building

/** Try to set system relevant infos for given object in this multiboard. Returns if it could be set. */
public function multiboard.trySetObjectInfoMultiboard(Home object) returns bool
	if object == null
		return false
	this.addMultiboardLine("Home: " + object.user.getName(), HEADLINE_ICON_PATH)
	this.addMultiboardLine("Inhabitants: " + object.getInhabitantCount().toString() + "/" + getMaxInhabitants(object.user.getUnitId()).toString(), INHABITANTS_ICON_PATH)
	return true

init
	// Add home to every appropriate new unit:
	registerPlayerUnitEvent(EVENT_PLAYER_UNIT_UPGRADE_FINISH, () -> GetTriggerUnit().addHome())
	// Remove home from every appropriate removed unit:
	onUnitDeindex(() -> getIndexingUnit().removeHome())