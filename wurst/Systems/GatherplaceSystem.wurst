/*-------------------------------------------------------------
// Version number:
1.0.0

// Description:
Handles gather buildings that act as drop off places and gather centres for their workers.

// Changelog:
- 1.0.0:
Initial version.
-------------------------------------------------------------*/
package GatherplaceSystem
import ConstantData
import UnitMap
import LinkedList
import Stock
import UtilityFunctions
import MultiboardPrioritySystem
import UnitIndexer
import Icons
import RegisterEvents
import StorageSystem
import ResourceSystem
import Entity
import WorkplaceSystem
import Orders
import ErrorHandling


// --------------------
// Data code
// --------------------

let WORKERS_ICON_PATH = Icons.bTNBash
let RESOURCE_TARGETS_ICON_PATH = Icons.bTNReturnGoods
let MAX_AUTO_ORDER_RANGE = 1024.

/** Returns the allowed target types for given gatherplace type and gather variant. */
function getTargetTypeIds(int gatherplaceUnitId, int gatherVariant) returns LinkedList<int>
	let entityIds = new LinkedList<int>()
	switch gatherplaceUnitId
		case UnitIdsCustom.AoW.lumberCamp
			switch gatherVariant  // DEBUG: only for testing variants, later all tree types should be in one gather variant
				case 1
					entityIds.add(DestructableIdsCustom.Trees.spruce)
				case 2
					entityIds.add(DestructableIdsCustom.Trees.maple)
	return entityIds

/** Returns the target gather variant name for given gatherplace type and gather variant. */
function getTargetVariantName(int gatherplaceUnitId, int gatherVariant) returns string
	switch gatherplaceUnitId
		case UnitIdsCustom.AoW.lumberCamp
			switch gatherVariant  // DEBUG: only for testing variants, later all tree types should be in one gather variant
				case 1
					return "Spruces"
				case 2
					return "Maples"
	return null

/** Returns the maximum ware capacity of the given gatherplace type. */
function getGatherplaceMaxCapacity(int gatherplaceUnitId) returns int
	switch gatherplaceUnitId
		case UnitIdsCustom.AoW.lumberCamp
			return 50
		default
			return 0


// --------------------
// Functional code
// --------------------

let GATHERPLACE_MAP = new IterableUnitHashMap<Gatherplace>(null)

public class Gatherplace extends Workplace
	private Storage storage
	private int gatherVariant

	construct(unit gatherplace)
		super(gatherplace)
		storage = new Storage(gatherplace, getGatherplaceMaxCapacity(GetUnitTypeId(gatherplace)))
		gatherVariant = 1

	ondestroy
		destroy storage

	function getStorage() returns Storage
		return storage

	function getGatherVariant() returns int
		return gatherVariant

	function getStoredProductsCount() returns int
		var amount = MAX_WARE_COUNT
		let products = getProducts()
		for iWare in products
			amount = min(amount, storage.getWareCount(iWare.wareType) div iWare.count)
		destroy products
		return amount

	function getProducts() returns LinkedList<ware>
		let wares = new LinkedList<ware>()
		let allowedTypeIds = getAllowedTargetTypeIds()
		for targetId in allowedTypeIds
			for iWare in getDefaultInitWares(targetId)
				var hasWare = false
				for jWare in wares
					if iWare.hasSameType(jWare)
						hasWare = true
						break
				if hasWare == false
					wares.add(ware(iWare.wareType, 1))
		destroy allowedTypeIds
		return wares

	function getAllowedTargetTypeIds(int gatherVariant) returns LinkedList<int>
		return getTargetTypeIds(user.getUnitId(), gatherVariant)
	function getAllowedTargetTypeIds() returns LinkedList<int>
		return getAllowedTargetTypeIds(gatherVariant)

	function getTargetCount() returns int
		let allowedTypeIds = getAllowedTargetTypeIds()
		let targetCount = findResources(getGatherCentrePos(), allowedTypeIds).size()
		destroy allowedTypeIds
		return targetCount

	function getGatherCentrePos() returns vec2
		let loc = GetUnitRallyPoint(user)
		let pos = vec2(GetLocationX(loc), GetLocationY(loc))
		RemoveLocation(loc)
		return pos

	function changeProduct()
		var allowedTypeIds = getAllowedTargetTypeIds(gatherVariant + 1)
		if allowedTypeIds.isEmpty() == false
			gatherVariant = gatherVariant + 1
		else if gatherVariant != 1
			gatherVariant = 1
			destroy allowedTypeIds
			allowedTypeIds = getAllowedTargetTypeIds()
		for worker in workers
			let targetWidget = worker.findNextResource(MAX_AUTO_ORDER_RANGE, allowedTypeIds, getGatherCentrePos())
			if targetWidget.isEmpty() == false
				worker.issueTargetAbilityOrder(AbilityIdsCustom.harvest, targetWidget.getWidget(), true)
		destroy allowedTypeIds

	function orderWorking(unit worker)
		let allowedTypeIds = getAllowedTargetTypeIds()
		let targetWidget = worker.findNextResource(MAX_AUTO_ORDER_RANGE, allowedTypeIds, getGatherCentrePos())
		if targetWidget.isEmpty() == false
			worker.issueTargetAbilityOrder(AbilityIdsCustom.harvest, targetWidget.getWidget(), true)
		destroy allowedTypeIds
	function orderWorking()
		for worker in workers
			orderWorking(worker)

	/** Transfers as many wares as possible from this gatherplace to source storage or transfers products with reverse targets. */
	override function transferWares(Storage source, bool takeWares)
		if takeWares
			// Look for wares in gatherplace:
			let wares = storage.getWares()
			for iWare in wares
				let wareCount = min(storage.getWareCount(iWare.wareType), source.getFreeCapacity())
				if wareCount > 0
					// Transfer ware:
					storage.removeWare(ware(iWare.wareType, wareCount))
					source.addWare(ware(iWare.wareType, wareCount))
			destroy wares
		else
			// Look for products in source storage:
			let products = getProducts()
			for iWare in products
				let wareCount = min(source.getWareCount(iWare.wareType), storage.getFreeCapacity())
				if wareCount > 0
					// Transfer ware:
					source.removeWare(ware(iWare.wareType, wareCount))
					storage.addWare(ware(iWare.wareType, wareCount))
			destroy products


function unit.addGatherplace() returns bool
	if GATHERPLACE_MAP.has(this) == false and getGatherplaceMaxCapacity(this.getUnitId()) > 0
		GATHERPLACE_MAP.put(this, new Gatherplace(this))
		return true
	return false

function unit.removeGatherplace()
	let gatherplace = GATHERPLACE_MAP.tryRemove(this)
	if gatherplace != null
		destroy gatherplace

/** Returns the gatherplace of given unit. */
public function unit.getGatherplace() returns Gatherplace
	return GATHERPLACE_MAP.tryGet(this)

/** Creates and returns a gatherplace building with given values. */
public function createGatherplaceBuilding(player owner, int unitId, vec2 pos, angle facing) returns unit
	let building = createUnit(owner, unitId, pos, facing)
	if building.addGatherplace() == false
		error("Could not create " + building.getName() + " as gatherplace building")
	return building

/** Try to set system relevant infos for given object in this multiboard. Returns if it could be set. */
public function multiboard.trySetObjectInfoMultiboard(Gatherplace object) returns bool
	if object == null
		return false
	let storage = object.getStorage()
	this.addMultiboardLine("Gatherplace: " + object.user.getName(), HEADLINE_ICON_PATH)
	this.addMultiboardLine("Workers: " + object.getWorkerCount().toString() + "/" + object.getMaxWorkerSlots().toString(), WORKERS_ICON_PATH)
	this.addMultiboardLine("Targets: " + getTargetVariantName(object.user.getUnitId(), object.getGatherVariant()) + " (" + object.getTargetCount().toString() + ")", RESOURCE_TARGETS_ICON_PATH)
	this.addMultiboardLine("Capacity: " + storage.getUsedCapacity().toString() + "/" + storage.getMaxCapacity().toString(), SUB_HEADLINE_ICON_PATH)
	for i = 0 to (storage.getAmountOfWareTypes() - 1)
		let ware = storage.getWare(i)
		this.addMultiboardLine(storage.getWareCount(ware.wareType).toString() + " " + ware.toString(true), ware.getIconPath())
	return true

init
	// Add gatherplace to every appropriate new unit:
	registerPlayerUnitEvent(EVENT_PLAYER_UNIT_UPGRADE_FINISH, () -> GetTriggerUnit().addGatherplace())
	// Remove gatherplace from every appropriate removed unit:
	onUnitDeindex(() -> getIndexingUnit().removeGatherplace())
	// Register rally point changes:
	registerPlayerUnitEvent(EVENT_PLAYER_UNIT_ISSUED_POINT_ORDER) ->
		let gatherplace = GetOrderedUnit().getGatherplace()
		let issuedOrderId = GetIssuedOrderId()
		if gatherplace != null and (issuedOrderId == OrderIds.setrally or issuedOrderId == OrderIds.smart)
			gatherplace.orderWorking()
