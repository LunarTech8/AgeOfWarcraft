/*-------------------------------------------------------------
// Version number:
1.0.0

// Description:
Contains conversion functions.

// Changelog:
- 1.0.0:
Initial version.
-------------------------------------------------------------*/
package ConversionFunctions
import ComputationControl
import LoadStatusSystem
import ChunkedString
import UnitTest


// --------------------
// Data code
// --------------------

public let NUMBER_BASE_CHUNK_SIZE = 7
public let CHAR_BASE_CHUNK_SIZE = 4
let CHAR_BASE_SIZE = 62  // TODO: maybe a bigger charset with special chars can be used
let CHAR_BASE_POLYNOM_FACTORS = [1, 62, 62 * 62, 62 * 62 * 62]


// --------------------
// Functional code
// --------------------

public function convertNumbersToChars(ChunkedString numberChunks) returns ChunkedString
	// Transform source chunks into required size if needed:
	var numberChunksSized = numberChunks
	if numberChunks.getChunkSize() != NUMBER_BASE_CHUNK_SIZE
		numberChunksSized = new ChunkedString(numberChunks, NUMBER_BASE_CHUNK_SIZE)
	// Create target chunks by converting source chunks:
	let charChunks = new ChunkedString()
	// newInitSubStatus("Test10 " + computationCost.toString())  // DEBUG:
	for i = 0 to numberChunksSized.getChunkCount() - 1
		// setInitStepStatus(i + 1, numberChunksSized.getChunkCount())  // DEBUG:
		var value = numberChunksSized.getChunk(i).toInt()
		var chars = ""
		while value > 0
			chars += (value mod CHAR_BASE_SIZE).toCharsetString()
			value = value div CHAR_BASE_SIZE
		while chars.length() < CHAR_BASE_CHUNK_SIZE
			chars += "0"
		charChunks.append(chars)
		computationCost += 0.322
		checkForComputationBreak()
	if numberChunksSized != numberChunks
		destroy numberChunksSized
	return charChunks

public function convertCharsToNumbers(ChunkedString charChunks) returns ChunkedString
	// Transform chunks into required size if needed:
	var charChunksSized = charChunks
	if charChunks.getChunkSize() != CHAR_BASE_CHUNK_SIZE
		charChunksSized = new ChunkedString(charChunks, CHAR_BASE_CHUNK_SIZE)
	// Create target chunks by converting source chunks:
	let numberChunks = new ChunkedString()
	// newInitSubStatus("Test12 " + computationCost.toString())  // DEBUG:
	for i = 0 to charChunksSized.getChunkCount() - 1
		// setInitStepStatus(i + 1, charChunksSized.getChunkCount())  // DEBUG:
		let charChunk = charChunksSized.getChunk(i)
		var value = 0
		for j = 0 to (charChunk.length() - 1)
			value += charChunk.substring(j, j + 1).toCharsetInt() * CHAR_BASE_POLYNOM_FACTORS[j]
		var numbers = value.toString()
		while numbers.length() < NUMBER_BASE_CHUNK_SIZE
			numbers = "0" + numbers
		numberChunks.append(numbers)
		computationCost += 1.407
		checkForComputationBreak()
	if charChunksSized != charChunks
		destroy charChunksSized
	return numberChunks


// --------------------
// Test code
// --------------------

@Test public function testWorldGenerationSystem_Convert()
	testWorldGenerationSystem_Convert(false)
public function testWorldGenerationSystem_Convert(bool isInGameTest)
	let testName = setTestName("testWorldGenerationSystem_Convert", isInGameTest)
	string stringA
	int intA
	if isInGameTest == false
		isComputationControlActivated = false
	// Set number data:
	var numberChunks = new ChunkedString(NUMBER_BASE_CHUNK_SIZE)
	numberChunks.append("1230597")
	// Convert and check data:
	var charChunks = convertNumbersToChars(numberChunks)
	charChunks.length().assertEquals(testName, (numberChunks.length() / NUMBER_BASE_CHUNK_SIZE).ceil() * CHAR_BASE_CHUNK_SIZE)
	stringA = (21).toCharsetString()
	stringA += (8).toCharsetString()
	stringA += (10).toCharsetString()
	stringA += (5).toCharsetString()
	charChunks.getUnsafeSubString(0, CHAR_BASE_CHUNK_SIZE).assertEquals(testName, stringA)
	destroy numberChunks
	// Reconvert and check data:
	numberChunks = convertCharsToNumbers(charChunks)
	numberChunks.length().assertEquals(testName, (charChunks.length() / CHAR_BASE_CHUNK_SIZE).ceil() * NUMBER_BASE_CHUNK_SIZE)
	numberChunks.getUnsafeSubString(0, NUMBER_BASE_CHUNK_SIZE).assertEquals(testName, "1230597")
	destroy charChunks
	destroy numberChunks
	// Set char data:
	charChunks = new ChunkedString(CHAR_BASE_CHUNK_SIZE)
	charChunks.append("cZ0a")
	// Convert and check data:
	numberChunks = convertCharsToNumbers(charChunks)
	numberChunks.length().assertEquals(testName, (charChunks.length() / CHAR_BASE_CHUNK_SIZE).ceil() * NUMBER_BASE_CHUNK_SIZE)
	intA = ("c").toCharsetInt() * CHAR_BASE_POLYNOM_FACTORS[0]
	intA += ("Z").toCharsetInt() * CHAR_BASE_POLYNOM_FACTORS[1]
	intA += ("0").toCharsetInt() * CHAR_BASE_POLYNOM_FACTORS[2]
	intA += ("a").toCharsetInt() * CHAR_BASE_POLYNOM_FACTORS[3]
	stringA = intA.toString()
	numberChunks.getUnsafeSubString(0, NUMBER_BASE_CHUNK_SIZE).assertEquals(testName, stringA)
	destroy charChunks
	// Reconvert and check data:
	charChunks = convertNumbersToChars(numberChunks)
	charChunks.length().assertEquals(testName, (numberChunks.length() / NUMBER_BASE_CHUNK_SIZE).ceil() * CHAR_BASE_CHUNK_SIZE)
	charChunks.getUnsafeSubString(0, CHAR_BASE_CHUNK_SIZE).assertEquals(testName, "cZ0a")
	destroy numberChunks
	destroy charChunks
	// Set number data:
	numberChunks = new ChunkedString()
	numberChunks.append("1230597" + "144")
	// Convert and check data:
	charChunks = convertNumbersToChars(numberChunks)
	charChunks.length().assertEquals(testName, (numberChunks.length() / NUMBER_BASE_CHUNK_SIZE).ceil() * CHAR_BASE_CHUNK_SIZE)
	stringA = (21).toCharsetString()
	stringA += (8).toCharsetString()
	stringA += (10).toCharsetString()
	stringA += (5).toCharsetString()
	charChunks.getUnsafeSubString(0, CHAR_BASE_CHUNK_SIZE).assertEquals(testName, stringA)
	stringA = (20).toCharsetString()
	stringA += (2).toCharsetString()
	while stringA.length() < CHAR_BASE_CHUNK_SIZE
		stringA += "0"
	charChunks.getUnsafeSubString(CHAR_BASE_CHUNK_SIZE, CHAR_BASE_CHUNK_SIZE * 2).assertEquals(testName, stringA)
	destroy numberChunks
	// Reconvert and check data:
	numberChunks = convertCharsToNumbers(charChunks)
	numberChunks.length().assertEquals(testName, (charChunks.length() / CHAR_BASE_CHUNK_SIZE).ceil() * NUMBER_BASE_CHUNK_SIZE)
	numberChunks.getUnsafeSubString(0, NUMBER_BASE_CHUNK_SIZE).assertEquals(testName, "1230597")
	numberChunks.getUnsafeSubString(NUMBER_BASE_CHUNK_SIZE, NUMBER_BASE_CHUNK_SIZE * 2).assertEquals(testName, "0000144")
	destroy charChunks
	destroy numberChunks
	// Set char data:
	charChunks = new ChunkedString()
	charChunks.append("cZ0a" + "8J")
	// Convert and check data:
	numberChunks = convertCharsToNumbers(charChunks)
	numberChunks.length().assertEquals(testName, (charChunks.length() / CHAR_BASE_CHUNK_SIZE).ceil() * NUMBER_BASE_CHUNK_SIZE)
	intA = ("c").toCharsetInt() * CHAR_BASE_POLYNOM_FACTORS[0]
	intA += ("Z").toCharsetInt() * CHAR_BASE_POLYNOM_FACTORS[1]
	intA += ("0").toCharsetInt() * CHAR_BASE_POLYNOM_FACTORS[2]
	intA += ("a").toCharsetInt() * CHAR_BASE_POLYNOM_FACTORS[3]
	stringA = intA.toString()
	numberChunks.getUnsafeSubString(0, NUMBER_BASE_CHUNK_SIZE).assertEquals(testName, stringA)
	intA = ("8").toCharsetInt() * CHAR_BASE_POLYNOM_FACTORS[0]
	intA += ("J").toCharsetInt() * CHAR_BASE_POLYNOM_FACTORS[1]
	stringA = intA.toString()
	while stringA.length() < NUMBER_BASE_CHUNK_SIZE
		stringA = "0" + stringA
	numberChunks.getUnsafeSubString(NUMBER_BASE_CHUNK_SIZE, NUMBER_BASE_CHUNK_SIZE * 2).assertEquals(testName, stringA)
	destroy charChunks
	// Reconvert and check data:
	charChunks = convertNumbersToChars(numberChunks)
	charChunks.length().assertEquals(testName, (numberChunks.length() / NUMBER_BASE_CHUNK_SIZE).ceil() * CHAR_BASE_CHUNK_SIZE)
	charChunks.getUnsafeSubString(0, CHAR_BASE_CHUNK_SIZE).assertEquals(testName, "cZ0a")
	charChunks.getUnsafeSubString(CHAR_BASE_CHUNK_SIZE, CHAR_BASE_CHUNK_SIZE * 2).assertEquals(testName, "8J00")
	destroy numberChunks
	destroy charChunks