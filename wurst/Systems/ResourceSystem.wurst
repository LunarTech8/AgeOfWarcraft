/*-------------------------------------------------------------
// Version number:
1.01

// Description:
Gives predefined unit types resources wares that can be extracted by workers via the harvest ability.

// Changelog:
- 1.01:
Initial version.
-------------------------------------------------------------*/
package ResourceSystem
import LinkedList
import HashMap
import ConstantDataSystem
import MultiboardPrioritySystem
import StorageSystem
import UtilityFunctions
import OnUnitEnterLeave


// --------------------
// Data code
// --------------------

let countPlayers = 12  // Highest player slot in use

function getDefaultWares(int unitTypeId) returns ware
	switch unitTypeId
		case UnitIdsCustom.beech
			return ware(WareType.Wood, GetRandomInt(6, 8))
		default
			return ware(WareType.Empty, 0)

function isKilledWhenDepleted(int unitTypeId) returns bool
	switch unitTypeId
		case UnitIdsCustom.beech
			return true
		default
			return false

	
// --------------------
// Functional code
// --------------------

let resourceMap = new HashMap<unit, Resource>  // TODO: maybe make a general unit to class hash map system with corresponding utility functions

class Resource
	private unit resourceUnit
	private bool isKilledWhenDepleted
	private LinkedList<WareObject> wares

	static class WareObject
		ware data
	
		construct(ware ware)
			data = ware
	
	construct(unit resourceUnit, bool isKilledWhenDepleted, ware defaultWares)
		this.resourceUnit = resourceUnit
		this.isKilledWhenDepleted = isKilledWhenDepleted
		wares = new LinkedList<WareObject>()
		wares.add(new WareObject(defaultWares))

	ondestroy
		destroy wares

	function getWare(int index) returns ware
		if index >= wares.size()
			Log.error("ERROR: Index has to be smaller than list size")
		return wares.get(index).data
		
	function getAmountOfWareTypes() returns int
		return wares.size()


function addResource(unit targetUnit)
	if resourceMap.has(targetUnit) == false
		var unitType = getUnitId(targetUnit)
		var wares = getDefaultWares(unitType)
		if wares.wareType != WareType.Empty
			var resource = new Resource(targetUnit, isKilledWhenDepleted(unitType), wares)
			resourceMap.put(targetUnit, resource)
	
function removeResource(unit targetUnit)
	if resourceMap.has(targetUnit)
		resourceMap.remove(targetUnit)

/** Returns the resource of given unit */
public function getResource(unit targetUnit) returns Resource
	if resourceMap.has(targetUnit)
		return resourceMap.get(targetUnit)
	else
		return null

/** Sets system relevant infos for given object in target multiboard */
public function setObjectInfoMultiboard(multiboard targetMultiboard, Resource resource) returns bool
	addMultiboardLine(targetMultiboard, "Resource:", BaseIconType.Headline.getIconPath())
	for i = 0 to (resource.getAmountOfWareTypes() - 1)
		var ware = resource.getWare(i)
		addMultiboardLine(targetMultiboard, ware.count.toString() + " " + ware.toString(true), ware.getIconPath())
	return true
	
init
	// Add resource to every appropriate new unit:
	onEnter() -> 
		addResource(getEnterLeaveUnit())
	// Remove resource from every appropriate removed unit:
	onLeave() -> 
		removeResource(getEnterLeaveUnit())