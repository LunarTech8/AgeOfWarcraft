/*-------------------------------------------------------------
// Version number:
1.0.0

// Description:
Extension of the Stock class that adds a capacity to every ware of size one and a unit type dependant max capacity.

// Changelog:
- 1.0.0:
Initial version.
-------------------------------------------------------------*/
package StorageSystem
import OnUnitEnterLeave
import Icons
import ConstantDataSystem
import MultiboardPrioritySystem
import Stock
import UnitMap
import LinkedList
import UnitTest


// --------------------
// Data code
// --------------------

let CAPACITY_ICON_PATH = Icons.bTNSnazzyScroll

function getStorageMaxCapacity(int unitId) returns int
	switch unitId
		case UnitIdsCustom.AoW.peasant
			// return 10
			return 100  // DEBUG
		case UnitIdsCustom.AoW.lumberMill
			return 50
		case UnitIdsCustom.AoW.blacksmith
			return 50
		default
			return 0


// --------------------
// Functional code
// --------------------

let STORAGE_MAP = new UnitHashMap<Storage>(null)

public class Storage extends Stock
	private unit user
	private int maxCapacity
	private int usedCapacity

	construct(unit storage, int maxCapacity)
		super(new LinkedList<ware>())
		user = storage
		this.maxCapacity = maxCapacity
		usedCapacity = 0

	function getMaxCapacity() returns int
		return maxCapacity

	function getUsedCapacity() returns int
		return usedCapacity

	function getFreeCapacity() returns int
		return maxCapacity - usedCapacity

	override function addWare(ware w)
		if w.count > getFreeCapacity()
			Log.error("ERROR: Not enough free capacity to add given ware to storage of " + user.getName())
		usedCapacity += w.count
		super.addWare(w)

	override function addWares(LinkedList<ware> wares)
		for iWare in wares
			addWare(iWare)  // Use capacity based method

	override function removeWare(ware w)
		for iWare in wares
			if iWare.hasSameType(w)
				// Check and adjust ware:
				if iWare.count < w.count
					Log.error("ERROR: Can not remove given ware from storage of " + user.getName() + " because ware count is to low")
				else if iWare.count == w.count
					wares.remove(iWare)
				else
					wares.replace(iWare, iWare.changedCopy(-w.count))
				// Adjust capacity:
				usedCapacity -= w.count
				return
		Log.error("ERROR: Can not remove given ware from storage of " + user.getName() + " because ware type is not available")

	override function removeWares(LinkedList<ware> wares)
		for iWare in wares
			removeWare(iWare)  // Use capacity based method

	/** Transfers as many wares as possible from this storage to target storage.
	Returns the amount of wares that couldn't be transfered. */
	function transferWares(Storage target) returns int
		// Transfer last ware of source until it is empty or target is full:
		var targetFreeCapacity = target.getFreeCapacity()
		while isEmpty() == false
			if targetFreeCapacity <= 0
				return usedCapacity
			var ware = getLastWare()
			if targetFreeCapacity < ware.count
				ware.count = targetFreeCapacity
			targetFreeCapacity -= ware.count
			target.addWare(ware)
			removeWare(ware)
		return 0


function unit.addStorage()
	let maxCapacity = getStorageMaxCapacity(GetUnitTypeId(this))
	if STORAGE_MAP.has(this) == false and maxCapacity > 0
		STORAGE_MAP.put(this, new Storage(this, maxCapacity))

function unit.removeStorage()
	let storage = STORAGE_MAP.tryRemove(this)
	if storage != null
		destroy storage

/** Returns the storage of given unit. */
public function unit.getStorage() returns Storage
	return STORAGE_MAP.tryGet(this)

/** Sets system relevant infos for given object in target multiboard. */
public function multiboard.setObjectInfoMultiboard(Storage s) returns bool
	this.addMultiboardLine("Storage:", HEADLINE_ICON_PATH)
	this.addMultiboardLine("Capacity: " + s.getUsedCapacity().toString() + "/" + s.getMaxCapacity().toString(), CAPACITY_ICON_PATH)
	for i = 0 to (s.getAmountOfWareTypes() - 1)
		let ware = s.getWare(i)
		this.addMultiboardLine(ware.count.toString() + " " + ware.toString(true), ware.getIconPath())
	return true

init
	// Add storage to every appropriate new unit:
	onEnter() ->
		getEnterLeaveUnit().addStorage()
	// Remove storage from every appropriate removed unit:
	onLeave() ->
		getEnterLeaveUnit().removeStorage()


// --------------------
// Test code
// --------------------

@Test public function testStorageSystem_AddAndRemove()
	testStorageSystem_AddAndRemove(false)
public function testStorageSystem_AddAndRemove(bool isInGameTest)
	let testName = setTestName("testStorageSystem_AddAndRemove", isInGameTest)
	let testCentre = vec2(0., 0.)
	// Create new storage and check capacities:
	let unitA = createUnit(DUMMY_PLAYER, UnitIdsCustom.AoW.peasant, testCentre, angle(0.))
	let a = new Storage(unitA, 8)
	a.getMaxCapacity().assertEquals(testName, 8)
	a.getUsedCapacity().assertEquals(testName, 0)
	a.getFreeCapacity().assertEquals(testName, 8)
	// Add wares and check capacities:
	a.addWare(ware(WareType.FOOD, 3))
	a.addWare(ware(WareType.STONE, 2))
	a.addWare(ware(WareType.FOOD, 1))
	a.getMaxCapacity().assertEquals(testName, 8)
	a.getUsedCapacity().assertEquals(testName, 6)
	a.getFreeCapacity().assertEquals(testName, 2)
	// Remove wares and check capacities:
	a.removeWare(ware(WareType.FOOD, 2))
	a.removeWare(ware(WareType.STONE, 2))
	a.getMaxCapacity().assertEquals(testName, 8)
	a.getUsedCapacity().assertEquals(testName, 2)
	a.getFreeCapacity().assertEquals(testName, 6)
	// Create another storage and check capacities:
	let unitB = createUnit(DUMMY_PLAYER, UnitIdsCustom.AoW.peasant, testCentre, angle(0.))
	let b = new Storage(unitA, 13)
	b.getMaxCapacity().assertEquals(testName, 13)
	b.getUsedCapacity().assertEquals(testName, 0)
	b.getFreeCapacity().assertEquals(testName, 13)
	// Add wares and check capacities:
	let waresA = new LinkedList<ware>()
	waresA.add(ware(WareType.FOOD, 2))
	waresA.add(ware(WareType.STONE, 3))
	waresA.add(ware(WareType.FOOD, 1))
	waresA.add(ware(WareType.WOOD, 6))
	b.addWares(waresA)
	b.getMaxCapacity().assertEquals(testName, 13)
	b.getUsedCapacity().assertEquals(testName, 12)
	b.getFreeCapacity().assertEquals(testName, 1)
	// Remove wares and check capacities:
	let waresB = new LinkedList<ware>()
	waresB.add(ware(WareType.FOOD, 3))
	waresB.add(ware(WareType.WOOD, 1))
	b.removeWares(waresB)
	b.getMaxCapacity().assertEquals(testName, 13)
	b.getUsedCapacity().assertEquals(testName, 8)
	b.getFreeCapacity().assertEquals(testName, 5)
	// Transfer wares and check capacities:
	b.transferWares(a).assertEquals(testName, 2)
	a.getMaxCapacity().assertEquals(testName, 8)
	a.getUsedCapacity().assertEquals(testName, 8)
	a.getFreeCapacity().assertEquals(testName, 0)
	b.getMaxCapacity().assertEquals(testName, 13)
	b.getUsedCapacity().assertEquals(testName, 2)
	b.getFreeCapacity().assertEquals(testName, 11)
	testSuccess(testName)
	// Remove test units:
	if isInGameTest
		unitA.remove()
		unitB.remove()
	// Destroy class objects:
	destroy a
	destroy b
	destroy waresA
	destroy waresB