/*-------------------------------------------------------------
// Version number:
1.0.0

// Description:
Monitors basic values like sleep and food for persons.
Handles the automatisations based on the data and basic values.

// Changelog:
- 1.0.0:
Initial version.
-------------------------------------------------------------*/
package PersonSystem
import ConstantData
import ErrorHandling
import ClosureTimers
import UtilityFunctions
import HomeSystem
import WorkplaceSystem
import WorkshopSystem
import GatherplaceSystem
import DepositorySystem
import BuildingSystem
import InstantDummyCaster
import UnitTest
import DamageEvent
import RegisterEvents
import Unit_Peasant
import OrderSystem
import PersonData


// --------------------
// Data code
// --------------------

let MAX_DAYS_NO_FOOD = 4. // Max days of no food before person dies of starvation
let MAX_DAYS_NO_SLEEP = 3.  // Max days of no sleep before person falls asleep on the ground
let DAYS_TILL_EXHAUSTED = 1.  // Days of no sleep before person gets exhausted by sleep deprivation
let STATS_ADJUSTMENT_RATE = INGAME_DAY_DURATION / 24.
let SLEEP_BOOST_BY_DAMAGE = 2 * (MAX_SLEEP / MAX_DAYS_NO_SLEEP) * (STATS_ADJUSTMENT_RATE / INGAME_DAY_DURATION)  // Adrenalin boost by taking damage
let IDLE_WORKER_CHECK_RATE = 2.

/** Returns the sleep rate per day for the given building type. */
function getSleepRate(int buildingUnitId) returns real
	switch buildingUnitId
		case 0  // Outside on the ground
			return (MAX_SLEEP / MAX_DAYS_NO_SLEEP) * (24 / 10)
		case UnitIdsCustom.AoW.peasantHouse
			return (MAX_SLEEP / MAX_DAYS_NO_SLEEP) * (24 / 6)
		default
			error("Unregistered buildingUnitId + (" + buildingUnitId.toString() + ") for sleeping")
			return 0.


// --------------------
// Functional code
// --------------------

function Person.sleep(int buildingUnitId)
	if this.isSleeping() == true
		error("Person is already sleeping")
	this.setSleepRate(getSleepRate(buildingUnitId))

function Person.reduceStats() returns bool
	// Adjust food:
	var food = this.getFood()
	food -= (MAX_FOOD / MAX_DAYS_NO_FOOD) * (STATS_ADJUSTMENT_RATE / INGAME_DAY_DURATION)
	food = min(food, MAX_FOOD)
	this.setFood(food)
	// Adjust sleep:
	var sleep = this.getSleep()
	sleep -= (MAX_SLEEP / MAX_DAYS_NO_SLEEP) * (STATS_ADJUSTMENT_RATE / INGAME_DAY_DURATION)
	sleep += this.getSleepRate() * (STATS_ADJUSTMENT_RATE / INGAME_DAY_DURATION)
	sleep = min(sleep, MAX_SLEEP)
	this.setSleep(sleep)
	let user = this.getUnit()
	if sleep <= 0. and this.isSleeping() == false
		if this.isInBuilding()
			this.leaveBuilding()
		InstantDummyCaster.castTarget(null, AbilityIdsCustom.addSleepingBuff, 1, AbilityIdsCustom.addSleepingBuff.getAbilityOrder(), user)
		this.sleep(0)
	else if sleep >= MAX_SLEEP
		if this.getHome() != null and this.getEnteredBuilding() == this.getHome().getUnit()
			this.leaveBuilding()
		else
			user.removeAbility(BuffIdsCustom.sleeping)
			this.setSleepRate(0.)
	if sleep <= MAX_SLEEP * (1 - DAYS_TILL_EXHAUSTED / MAX_DAYS_NO_SLEEP) and user.hasAbility(BuffIdsCustom.exhausted) == false
		InstantDummyCaster.castTarget(null, AbilityIdsCustom.addExhaustedBuff, 1, AbilityIdsCustom.addExhaustedBuff.getAbilityOrder(), user)
	else if sleep > MAX_SLEEP * (1 - DAYS_TILL_EXHAUSTED / MAX_DAYS_NO_SLEEP) and user.hasAbility(BuffIdsCustom.exhausted)
		user.removeAbility(BuffIdsCustom.exhausted)
	return food <= 0.

function Person.awake()
	if this.isSleeping() == false
		error("Person is already awake")
	this.setSleepRate(0.)

function Home.removePersons()
	let inhabitants = this.getInhabitants()
	for inhabitant from inhabitants
		let person = inhabitant.toPerson()
		if person != null
			if person.getEnteredBuilding() == this.getUnit()
				person.leaveBuilding()
			person.setHome(null)
	inhabitants.destr()
function Workplace.removePersons()
	let workers = this.getWorkers()
	for worker from workers
		let person = worker.toPerson()
		if person != null
			if person.getEnteredBuilding() == this.getUnit()
				person.leaveBuilding()
			person.setWorkplace(null)
	workers.destr()

/** Returns the workplace of this building. */
public function unit.toWorkplace() returns Workplace
	Workplace workplace
	workplace = this.toWorkshop()
	if workplace != null
		return workplace
	workplace = this.toGatherplace()
	if workplace != null
		return workplace
	workplace = this.toDepository()
	if workplace != null
		return workplace
	workplace = this.toBuildingSite()
	if workplace != null
		return workplace
	return null

/** Let this person enter given building. */
public function Person.enterBuilding(unit building)
	if this.isInBuilding()
		error("Person is already in a building")
	let targetHome = building.toHome()
	let targetWorkplace = building.toWorkplace()
	if targetHome != null and targetHome == this.getHome()
		this.sleep(building.getUnitId())
	else if targetWorkplace != null and targetWorkplace == this.getWorkplace()
		if targetWorkplace instanceof Workshop
			(targetWorkplace castTo Workshop).enterBuilding(this.getUnit())
	else
		error("Unrecognized building type to enter (" + building.getName() + ")")
	this.setEnteredBuilding(building)
	this.getUnit().hide()

/** Let this person leave current building. */
public function Person.leaveBuilding()
	if this.isInBuilding() == false
		error("Person is not in a building")
	let enteredBuilding = this.getEnteredBuilding()
	let targetHome = enteredBuilding.toHome()
	let targetWorkplace = enteredBuilding.toWorkplace()
	if targetHome != null and targetHome == this.getHome()
		this.awake()
	else if targetWorkplace != null and targetWorkplace == this.getWorkplace()
		if targetWorkplace instanceof Workshop
			(targetWorkplace castTo Workshop).leaveBuilding(this.getUnit())
	else
		error("Unrecognized building type to leave (" + enteredBuilding.getName() + ")")
	this.setEnteredBuilding(null)
	this.getUnit().show()

init
	// Register death of homes and workplaces:
	registerPlayerUnitEvent(EVENT_PLAYER_UNIT_DEATH) ->
		let killedUnit = GetTriggerUnit()
		let targetHome = killedUnit.toHome()
		let targetWorkplace = killedUnit.toWorkplace()
		if targetHome != null
			targetHome.removePersons()
		else if targetWorkplace != null
			targetWorkplace.removePersons()
	// Reduce stats:
	// DEBUG: no stat reduction for easier testing
	// doPeriodically(STATS_ADJUSTMENT_RATE) cb ->
	// 	for user in PERSON_MAP
	// 		if user != null and PERSON_MAP.get(user).reduceStats()
	// 			user.kill()
	// Register attacks on sleeping persons:
	DamageEvent.addListener() ->
		let targetPerson = DamageEvent.getTarget().toPerson()
		if targetPerson != null and targetPerson.isSleeping()
			targetPerson.setSleep(targetPerson.getSleep() + SLEEP_BOOST_BY_DAMAGE)
			targetPerson.awake()
	// Find new targets for all idle workers inside a workplace:
	doPeriodically(IDLE_WORKER_CHECK_RATE) cb ->
		for person in getAllPersons()
			let workplace = person.getWorkplace()
			if workplace != null and workplace.getUnit() == person.getEnteredBuilding()
				let user = person.getUnit()
				if workplace.findWorkOrder(user)
					person.leaveBuilding()
					user.castAbilityOrder()


// --------------------
// Test code
// --------------------

public function testPersonSystem_StatsAndBuildings(vec2 testCentre)
	let testName = setTestName("testPersonSystem_StatsAndBuildings", true)
	// Create person and reduce stats:
	let unitA = createUnit(Settings.USER_PLAYER, UnitIdsCustom.AoW.peasant, testCentre, angle(0))
	let personA = unitA.toPerson()
	personA.reduceStats()
	personA.reduceStats()
	personA.reduceStats()
	personA.reduceStats()
	personA.getFood().assertEquals(testName, MAX_FOOD * (1 - 4 * STATS_ADJUSTMENT_RATE / (MAX_DAYS_NO_FOOD * INGAME_DAY_DURATION)), 0.001)
	personA.getSleep().assertEquals(testName, MAX_SLEEP * (1 - 4 * STATS_ADJUSTMENT_RATE / (MAX_DAYS_NO_SLEEP * INGAME_DAY_DURATION)), 0.001)
	// Check home building and sleep:
	let unitB = createHomeBuilding(Settings.USER_PLAYER, UnitIdsCustom.AoW.peasantHouse, testCentre, angle(0))
	let unitC = createHomeBuilding(Settings.USER_PLAYER, UnitIdsCustom.AoW.peasantHouse, testCentre, angle(0))
	let homeA = unitB.toHome()
	let homeB = unitC.toHome()
	personA.setHome(homeA)
	homeA.isInhabitant(unitA).assertTrue(testName)
	personA.setHome(homeB)
	homeA.isInhabitant(unitA).assertFalse(testName)
	homeB.isInhabitant(unitA).assertTrue(testName)
	personA.isSleeping().assertFalse(testName)
	personA.enterBuilding(unitC)
	personA.isSleeping().assertTrue(testName)
	personA.getSleepRate().assertEquals(testName, getSleepRate(unitC.getUnitId()))
	personA.reduceStats()
	personA.getSleep().assertEquals(testName, MAX_SLEEP * (1 - 5 * STATS_ADJUSTMENT_RATE / (MAX_DAYS_NO_SLEEP * INGAME_DAY_DURATION)) + getSleepRate(unitC.getUnitId()) * (STATS_ADJUSTMENT_RATE / INGAME_DAY_DURATION), 0.001)
	// Check max sleep limit:
	personA.getSleep().assertEquals(testName, (MAX_SLEEP / MAX_DAYS_NO_SLEEP) * (MAX_DAYS_NO_SLEEP + (4 - 5) * (STATS_ADJUSTMENT_RATE / INGAME_DAY_DURATION)), 0.001)
	assertEquals(testName, personA.getEnteredBuilding(), unitC)
	personA.isSleeping().assertTrue(testName)
	personA.reduceStats()
	personA.getSleep().assertEquals(testName, MAX_SLEEP)
	assertEquals(testName, personA.getEnteredBuilding(), null)
	personA.isSleeping().assertFalse(testName)
	testFinish(testName)
	// Remove test units:
	unitA.kill()
	unitA.remove()
	unitB.kill()
	unitB.remove()
	unitC.kill()
	unitC.remove()

public function testPersonSystem_LowerStatLimits(vec2 testCentre)
	let testName = setTestName("testPersonSystem_LowerStatLimits", true)
	// Check lower stat limits:
	let unitA = createUnit(Settings.USER_PLAYER, UnitIdsCustom.AoW.peasant, testCentre, angle(0))
	let personA = unitA.toPerson()
	personA.setSleep((MAX_SLEEP / MAX_DAYS_NO_SLEEP) * (MAX_DAYS_NO_SLEEP - DAYS_TILL_EXHAUSTED + (STATS_ADJUSTMENT_RATE / INGAME_DAY_DURATION)))
	unitA.hasAbility(BuffIdsCustom.exhausted).assertFalse(testName)
	personA.reduceStats()
	doAfter(MIN_ACTION_SLEEP_TIME) () ->
		// Check that person is exhausted:
		unitA.hasAbility(BuffIdsCustom.exhausted).assertTrue(testName)
		personA.setSleep((MAX_SLEEP / MAX_DAYS_NO_SLEEP) * (STATS_ADJUSTMENT_RATE / INGAME_DAY_DURATION))
		unitA.hasAbility(BuffIdsCustom.sleeping).assertFalse(testName)
		personA.isSleeping().assertFalse(testName)
		personA.reduceStats()
	doAfter(2 * MIN_ACTION_SLEEP_TIME) () ->
		// Check that person is sleeping on the ground:
		unitA.hasAbility(BuffIdsCustom.sleeping).assertTrue(testName)
		personA.getSleepRate().assertEquals(testName, getSleepRate(0))
		personA.isSleeping().assertTrue(testName)
		personA.setSleep(MAX_SLEEP * (1 - DAYS_TILL_EXHAUSTED / MAX_DAYS_NO_SLEEP))
		unitA.hasAbility(BuffIdsCustom.exhausted).assertTrue(testName)
		personA.reduceStats()
	doAfter(3 * MIN_ACTION_SLEEP_TIME) () ->
		// Check that person isn't exhausted anymore but still sleeping:
		unitA.hasAbility(BuffIdsCustom.exhausted).assertFalse(testName)
		unitA.hasAbility(BuffIdsCustom.sleeping).assertTrue(testName)
		personA.setSleep(MAX_SLEEP)
		personA.isSleeping().assertTrue(testName)
		personA.reduceStats()
	doAfter(4 * MIN_ACTION_SLEEP_TIME) () ->
		// Check that person woke up:
		unitA.hasAbility(BuffIdsCustom.sleeping).assertFalse(testName)
		personA.isSleeping().assertFalse(testName)
		testFinish(testName)
	doAfter(5 * MIN_ACTION_SLEEP_TIME) () ->
		// Remove test units:
		unitA.kill()
		unitA.remove()

public function testPersonSystem_DamageReaction(vec2 testCentre)
	let testName = setTestName("testPersonSystem_DamageReaction", true)
	// Check lower stat limits:
	let unitA = createUnit(Settings.USER_PLAYER, UnitIdsCustom.AoW.peasant, testCentre, angle(0))
	let unitB = createUnit(Settings.USER_PLAYER, UnitIdsCustom.AoW.peasant, testCentre, angle(0))
	unitB.setFacing(unitB.getPos().angleTo(unitA.getPos()))
	let personA = unitA.toPerson()
	personA.setSleep((MAX_SLEEP / MAX_DAYS_NO_SLEEP) * (STATS_ADJUSTMENT_RATE / INGAME_DAY_DURATION))
	personA.reduceStats()
	doAfter(MIN_ACTION_SLEEP_TIME) () ->
		// Check that person is sleeping and attack it:
		personA.isSleeping().assertTrue(testName)
		unitB.issueTargetOrder("attack", unitA)
	doAfter(MIN_ACTION_SLEEP_TIME + UnitData_Peasant.attack1CooldownTime) () ->
		// Check that person woke up:
		personA.isSleeping().assertFalse(testName)
		testFinish(testName)
	doAfter(2 * MIN_ACTION_SLEEP_TIME + UnitData_Peasant.attack1CooldownTime) () ->
		// Remove test units:
		unitA.kill()
		unitB.kill()
		unitA.remove()
		unitB.remove()