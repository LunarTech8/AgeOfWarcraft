/*-------------------------------------------------------------
// Version number:
1.01

// Description:
Handles all custom abilities and allows for the addition of custom, unrestricted functionality.

// Changelog:
- 1.01:
Initial version.
-------------------------------------------------------------*/
package AbilitySystem
import RegisterEvents
import ClosureTimers
import ConstantDataSystem
import UtilityFunctions
import Stock
import StorageSystem
import BuildingSystem
import ResourceSystem
import Ability_Harvest


// --------------------
// Data code
// --------------------

let infoMsgTime = 2.


// --------------------
// Functional code
// --------------------

/** Perform harvest and returns if another harvest with the given target is still valid. */
function unit.harvest(unit target) returns bool
	let storage = this.getStorage()
	let resource = target.getResource()
	// Work resource:
	let wares = resource.harvest(this.getUnitId())
	if wares != null
		// Transfere wares:
		for iWare in wares
			// Check resource count:
			let resourceWareCount = resource.getWareCount(iWare.wareType)
			if resourceWareCount > 0
				// Limit by resource count:
				if resourceWareCount < iWare.count
					iWare.count = resourceWareCount
				// Add ware to storage:
				var excess = storage.addWare(iWare)
				// Remove ware from resource:
				if excess < iWare.count
					iWare.count -= excess
					resource.removeWare(iWare)
		destroy wares
		// Check for resource depletion:
		if resource.checkForDepletionKill()
			target.kill()
			return false
	return this.getHarvestValidity(target) == 1

/** Transfer wares from the unit to the given target. */
function unit.transferWares(unit target)
	// Check if wares can be transfered:
	var sourceStorage = this.getStorage()
	if sourceStorage != null
		// Check for possible transfer methods based on target:
		var targetStorage = target.getStorage()
		if targetStorage != null
			// Give wares to target storage:
			sourceStorage.transferWares(targetStorage)
		var targetBuildingSite = target.getBuildingSite()
		if targetBuildingSite != null
			// Take wares from source storage:
			targetBuildingSite.transferWares(sourceStorage)
			// Call over idel workers if no required wares are missing:
			if targetBuildingSite.hasWares() == false
				targetBuildingSite.callOverIdleWorkers(true)

/** Returns harvest validity: 1=Valid 2=InvalidWorker 3=InvalidTarget 4=NoFreeStorage 5=ResourceIsDepleted */
public function unit.getHarvestValidity(unit target) returns int
	// Check if source and target are valid:
	var storage = this.getStorage()
	if storage == null
		return 2
	var resource = target.getResource()
	if resource == null
		return 3
	// Check if wares can be harvested:
	if storage.getFreeCapacity() <= 0
		return 4
	else if resource.hasWares() == false
		return 5
	// No validity check failed:
	return 1

/** Returns build validity: 1=Valid 2=InvalidWorker 3=InvalidTarget 4=WaresNotAvailable 5=WorkerAlreadyBuilding */
public function unit.getBuildValidity(unit target) returns int
	// Check if source and target are valid:
	if target.getUnitId().isValidWorkerType(this.getUnitId()) == false
		return 2
	var buildingSite = target.getBuildingSite()
	if buildingSite == null
		return 3
	// Check if required wares are available:
	if buildingSite.hasWares()
		return 4
	// Check if worker is already building:
	if this.getBuildingSiteOfWorker() != null
		return 5
	// No validity check failed:
	return 1


/** Returns build validity: 1=Valid 2=InvalidSource 3=InvalidTarget 4=WaresNotAvailable 5=NoFreeStorage 6=NoRequiredWares */
public function unit.getTransferWaresValidity(unit target) returns int
	// Check if source and target are valid:
	var sourceStorage = this.getStorage()
	if sourceStorage == null
		return 2
	var targetStorage = target.getStorage()
	var targetBuildingSite = target.getBuildingSite()
	if targetStorage == null and targetBuildingSite == null
		return 3
	// Check if wares are available:
	if sourceStorage.getUsedCapacity() <= 0
		return 4
	// Check if target has free storage:
	if targetStorage != null and targetStorage.getFreeCapacity() <= 0
		return 5
	// Check if target requires wares:
	if targetBuildingSite != null and targetBuildingSite.hasWares() == false
		return 6
	// No validity check failed:
	return 1

init
	// Register transferWares spell:
	registerPlayerUnitEvent(EVENT_PLAYER_UNIT_SPELL_CAST) ->
		if GetSpellAbilityId() == AbilityIdsCustom.transferWares
			let source = GetTriggerUnit()
			let target = GetSpellTargetUnit()
			let validity = source.getTransferWaresValidity(target)
			if validity != 1
				// React on invalid command:
				let owner = source.getOwner()
				if IsUnitSelected(source, owner)
					switch validity
						case 2  // InvalidSource
							printTimedToPlayer("Invalid: Unit can't transfer wares", infoMsgTime, owner)
						case 3  // InvalidTarget
							printTimedToPlayer("Invalid: Can't transfer wares to this kind of target", infoMsgTime, owner)
						case 4  // WaresNotAvailable
							printTimedToPlayer("Invalid: No wares to transfer are available", infoMsgTime, owner)
						case 5  // NoFreeStorage
							printTimedToPlayer("Invalid: Target has no free storage for transfer", infoMsgTime, owner)
						case 6  // NoRequiredWares
							printTimedToPlayer("Invalid: Target has no required wares left", infoMsgTime, owner)
				source.abortOrder()
			else
				source.transferWares(target)
	// Register build spell:
	registerPlayerUnitEvent(EVENT_PLAYER_UNIT_SPELL_CAST) ->
		if GetSpellAbilityId() == AbilityIdsCustom.build
			let worker = GetTriggerUnit()
			let target = GetSpellTargetUnit()
			let validity = worker.getBuildValidity(target)
			if validity != 1
				// React on invalid command:
				let owner = worker.getOwner()
				if IsUnitSelected(worker, owner)
					switch validity
						case 2  // InvalidWorker
							printTimedToPlayer("Invalid: Worker can't build at target building site type", infoMsgTime, owner)
						case 3  // InvalidTarget
							printTimedToPlayer("Invalid: Build target is no building site", infoMsgTime, owner)
						case 4  // WaresNotAvailable
							printTimedToPlayer("Invalid: Not all required wares are available for building", infoMsgTime, owner)
						case 5  // WorkerAlreadyBuilding
							printTimedToPlayer("Invalid: Worker is already building", infoMsgTime, owner)
				worker.abortOrder()
			else
				target.getBuildingSite().addWorker(worker)
	// Register harvest spell:
	registerPlayerUnitEvent(EVENT_PLAYER_UNIT_SPELL_CAST) ->
		if GetSpellAbilityId() == AbilityIdsCustom.harvest
			let worker = GetTriggerUnit()
			let target = GetSpellTargetUnit()
			let validity = worker.getHarvestValidity(target)
			if validity != 1
				// React on invalid command:
				switch validity
					case 2  // InvalidWorker
						printTimedToPlayer("Invalid: No storage for harvest", infoMsgTime, worker.getOwner())
					case 3  // InvalidTarget
						printTimedToPlayer("Invalid: Harvest target is no resource", infoMsgTime, worker.getOwner())
					case 4  // NoFreeStorage
						printTimedToPlayer("Invalid: No free storage for harvest", infoMsgTime, worker.getOwner())
					case 5  // ResourceIsDepleted
						printTimedToPlayer("Invalid: Harvest target is already depleted", infoMsgTime, worker.getOwner())
				worker.abortOrder()
			else
				// Perform harvest after ability casting is finished:
				doAfter(AbilityData_Harvest.cooldown) ->
					if worker.harvest(target)
						// Auto-recast ability:
						worker.issueTargetAbilityOrder(AbilityIdsCustom.harvest, target, true)