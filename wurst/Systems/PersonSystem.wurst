/*-------------------------------------------------------------
// Version number:
1.0.0

// Description:
TODO

// Changelog:
- 1.0.0:
Initial version.
-------------------------------------------------------------*/
package PersonSystem
import OnUnitEnterLeave
import ConstantDataSystem
import MultiboardPrioritySystem
import Icons
import UnitMap
import ErrorHandling
import ClosureTimers
import UtilityFunctions


// --------------------
// Data code
// --------------------

let FOOD_ICON_PATH = Icons.bTNMonsterLure
let SLEEP_ICON_PATH = Icons.bTNSleep
let HOUSE_ICON_PATH = Icons.bTNFarm
let WORKPLACE_ICON_PATH = Icons.bTNWorkshop

let MAX_FOOD = 100.
let MAX_SLEEP = 100.
let MAX_DAYS_NO_FOOD = 3
let MAX_DAYS_NO_SLEEP = 5
let STATS_ADJUSTMENT_RATE = INGAME_DAY_SECONDS / 24

int surnameCounter = 0

function isPersonType(int unitId) returns bool
	switch unitId
		case UnitIdsCustom.Melee.peasant
			return true
		case UnitIdsCustom.Melee.footman
			return true
		default
			return false

function getRandomForename() returns string
	var i = GetRandomInt(1, 4)
	switch i
		case 1
			return "Peter"
		case 2
			return "Hans"
		case 3
			return "Theodor"
		case 4
			return "Michael"
		default
			error("Wrong configuration for getRandomForename")
			return null

function getRandomSurname() returns string
	surnameCounter++
	if surnameCounter > 4
		surnameCounter = 1
	switch surnameCounter
		case 1
			return "Smith"
		case 2
			return "Miller"
		case 3
			return "Baker"
		case 4
			return "Wolf"
		default
			error("Wrong configuration for getRandomSurname")
			return null


// --------------------
// Functional code
// --------------------

let PERSON_MAP = new IterableUnitHashMap<Person>(null)

public class Person
	private unit user
	protected string name
	protected real food
	protected real sleep
	protected unit house
	protected unit workplace

	construct(unit person, string name)
		user = person
		this.name = name
		food = MAX_FOOD
		sleep = MAX_SLEEP
		house = null
		workplace = null

	function reduceStats() returns bool
		food -= (MAX_FOOD / MAX_DAYS_NO_FOOD) * (STATS_ADJUSTMENT_RATE / INGAME_DAY_SECONDS)
		sleep -= (MAX_SLEEP / MAX_DAYS_NO_SLEEP) * (STATS_ADJUSTMENT_RATE / INGAME_DAY_SECONDS)
		return (food <= 0. or sleep <= 0.)


function getRandomName() returns string
	return getRandomForename() + " " + getRandomSurname()

function unit.addPerson(string name)
	if PERSON_MAP.has(this) == false
		if isPersonType(GetUnitTypeId(this))
			var person = new Person(this, name)
			PERSON_MAP.put(this, person)

function unit.removePerson()
	let person = PERSON_MAP.tryRemove(this)
	if person != null
		destroy person

/** Returns the person of given unit. */
public function unit.getPerson() returns Person
	return PERSON_MAP.tryGet(this)

/** Sets system relevant infos for given object in target multiboard. */
public function multiboard.setObjectInfoMultiboard(Person p) returns bool
	this.addMultiboardLine(p.name + ":", HEADLINE_ICON_PATH)
	this.addMultiboardLine("Food: " + p.food.toString(), FOOD_ICON_PATH)
	this.addMultiboardLine("Sleep: " + p.sleep.toString(), SLEEP_ICON_PATH)
	if p.house != null
		this.addMultiboardLine("House: " + p.house.getName(), HOUSE_ICON_PATH)
	if p.workplace != null
		this.addMultiboardLine("Workplace: " + p.workplace.getName(), WORKPLACE_ICON_PATH)
	return true

init
	// Add person to every appropriate new unit:
	onEnter() ->
		getEnterLeaveUnit().addPerson(getRandomName())
	// Remove person from every appropriate removed unit:
	onLeave() ->
		getEnterLeaveUnit().removePerson()
	// Reduce stats:
	doPeriodically(STATS_ADJUSTMENT_RATE) cb ->
		for person in PERSON_MAP
			if person != null and PERSON_MAP.get(person).reduceStats()
				// person.kill()  // DEBUG: