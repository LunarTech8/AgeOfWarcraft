/*-------------------------------------------------------------
// Version number:
1.01

// Description:
Ingame test alternative to the Wurstunit package.

// Changelog:
- 1.01:
Initial version.
-------------------------------------------------------------*/
package UnitTest


// --------------------
// Functional code
// --------------------

public function testSuccess(string position)
	print("[" + position + "] " + "Test successful")

public function testFail(string position, string msg)
	print("[" + position + "] " + msg)

public function testDebug(string position, string msg)
	print("[" + position + "] " + msg)
public function testDebug(string position, int msg)
	testDebug(position, msg.toString())

/**
 * Asserts that two ints are equal. If they are not, an error is thrown with a message.
 */
public function int.assertEquals(string position, int expected)
	if this != expected
		testFail(position, "Expected <" + expected.toString() + ">, Actual <" + this.toString() + ">")

/**
 * Asserts that the passed int is greater than the parameter. If they are not, an error is thrown with a message.
 */
public function int.assertGreaterThan(string position, int less)
	if this <= less
		testFail(position, "Expected <" + this.toString() + "> to be greater than <" + less.toString() + ">")

/**
 * Asserts that the passed int is greater than the parameter. If they are not, an error is thrown with a message.
 */
public function int.assertGreaterThanOrEqual(string position, int less)
	if this < less
		testFail(position, "Expected <" + this.toString() + "> to be greater than or equal to <" + less.toString() + ">")

/**
 * Asserts that the passed int is greater than the parameter. If they are not, an error is thrown with a message.
 */
public function int.assertLessThan(string position, int greater)
	if this >= greater
		testFail(position, "Expected <" + this.toString() + "> to be less than <" + greater.toString() + ">")

/**
 * Asserts that the passed int is greater than the parameter. If they are not, an error is thrown with a message.
 */
public function int.assertLessThanOrEqual(string position, int greater)
	if this > greater
		testFail(position, "Expected <" + this.toString() + "> to be less than or equal to <" + greater.toString() + ">")

/**
 * Asserts that two strings are equal. If they are not, an error is thrown with a message.
 */
public function string.assertEquals(string position, string expected)
	if this != expected
		testFail(position, "Expected <" + expected + ">, Actual <" + this + ">")

/**
 * Asserts that two reals are equal. If they are not, an error is thrown with a message.
 */
public function real.assertEquals(string position, real expected)
	if this != expected
		testFail(position, "Expected <" + expected.toString() + ">, Actual <" + this.toString() + ">")

/**
 * Asserts that the passed real is greater than the parameter. If they are not, an error is thrown with a message.
 */
public function real.assertGreaterThan(string position, real less)
	if this <= less
		testFail(position, "Expected <" + this.toString() + "> to be greater than <" + less.toString() + ">")

/**
 * Asserts that the passed real is greater than the parameter. If they are not, an error is thrown with a message.
 */
public function real.assertGreaterThanOrEqual(string position, real less)
	if this < less
		testFail(position, "Expected <" + this.toString() + "> to be greater than or equal to <" + less.toString() + ">")

/**
 * Asserts that the passed real is greater than the parameter. If they are not, an error is thrown with a message.
 */
public function real.assertLessThan(string position, real greater)
	if this >= greater
		testFail(position, "Expected <" + this.toString() + "> to be less than <" + greater.toString() + ">")

/**
 * Asserts that the passed real is greater than the parameter. If they are not, an error is thrown with a message.
 */
public function real.assertLessThanOrEqual(string position, real greater)
	if this > greater
		testFail(position, "Expected <" + this.toString() + "> to be less than or equal to <" + greater.toString() + ">")


/**
 * Asserts that two reals are equal to within a positive delta. If they are not, an error is thrown
 * with a message.
 */
public function real.assertEquals(string position, real expected, real delta)
	if (this - expected > delta) or (expected - this > delta)
		testFail(position, "Expected <" + expected.toString() + ">, Actual <" + this.toString() + " with delta " + delta.toString() + ">")

/**
 * Asserts that two booleans are equal. If they are not, an error is thrown with a message.
 */
public function boolean.assertEquals(string position, boolean expected)
	if this != expected
		testFail(position, "Expected <" + expected.toString() + ">, Actual <" + this.toString() + ">")

/** Asserts that this booleans is true. If it is not, an error is thrown with a message. */
public function boolean.assertTrue(string position)
	this.assertEquals(position, true)

/** Asserts that this booleans is false. If it is not, an error is thrown with a message. */
public function boolean.assertFalse(string position)
	this.assertEquals(position, false)

/** Asserts that this booleans is true. If it is not, an error is thrown. */
public function assertTrue(string position, boolean b)
	if not b
		testFail(position, "Assertion failed")

/** Asserts that this booleans is true. If it is not, an error is thrown with the supplied message. */
public function assertTrue(string position, boolean b, string msg)
	if not b
		testFail(position, "Assertion failed: " + msg)

/** Asserts that the reference t is not null */
public function assertNotNull<T>(string position, T t)
	if t == null
		testFail(position, "Assertion failed: Reference was null.")