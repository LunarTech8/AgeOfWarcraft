/*-------------------------------------------------------------
// Version number:
1.01

// Description:
Handles all smart orders and allows for the addition of custom, unrestricted functionality.

// Changelog:
- 1.01:
Initial version.
-------------------------------------------------------------*/
package SmartOrderSystem
import RegisterEvents
import Orders
import ConstantDataSystem
import UtilityFunctions
import AbilitySystem
import ArrayList


// --------------------
// Data code
// --------------------

function getSmartUsedAbilityIds() returns ArrayList<int>
	var abilityIds = new ArrayList<int>(3)
	// Add ability ids in order of their priority:
	abilityIds.add(AbilityIdsCustom.harvest)
	abilityIds.add(AbilityIdsCustom.build)
	abilityIds.add(AbilityIdsCustom.transferWares)
	return abilityIds


// --------------------
// Functional code
// --------------------

let SMART_USED_ABILITY_IDS = getSmartUsedAbilityIds()

function unit.searchForValidAbility(unit target, ArrayList<int> abilityIds)
	for abilityId in abilityIds
		if this.isAbilityValid(abilityId, target)
			// Issue found valid ability order and end search:
			this.issueTargetAbilityOrder(abilityId, target, true)
			return

init
	// Register issued orders:
	registerPlayerUnitEvent(EVENT_PLAYER_UNIT_ISSUED_TARGET_ORDER) ->
		if GetIssuedOrderId() == OrderIds.smart
			GetTriggerUnit().searchForValidAbility(GetOrderTargetUnit(), SMART_USED_ABILITY_IDS)