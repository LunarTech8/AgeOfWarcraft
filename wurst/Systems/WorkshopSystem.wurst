/*-------------------------------------------------------------
// Version number:
1.0.0

// Description:
Handles workplace buildings that produce educts out of products with the help of workers.

// Changelog:
- 1.0.0:
Initial version.
-------------------------------------------------------------*/
package WorkshopSystem
import ConstantData
import UnitMap
import UnitTest
import UtilityFunctions
import MultiboardPrioritySystem
import UnitIndexer
import ClosureTimers
import Icons
import RegisterEvents
import Wares
import ReservableWares
import Storage
import PersonData
import Orders
import ErrorHandling
import WorkplaceSystem
import GatherplaceSystem
import OrderSystem


// --------------------
// Data code
// --------------------

public let MAX_STORABLE_EDUCTS = 5
public let MAX_STORABLE_PRODUCTS = 3

let MAX_AUTO_ORDER_RANGE = 1024.  // TODO: replace with taking all buildings of same settlement into account
let MAX_NEAR_BY_RANGE = 256.
let PRODUCTION_ADJUSTMENT_RATE = 0.1
let PRODUCTION_PROGRESS_ICON_PATH = Icons.bTNEngineeringUpgrade
let PRODUCTION_TIME_LEFT_ICON_PATH = Icons.bTNStatUp
let WORKERS_ICON_PATH = Icons.bTNBash

/** Returns the production progress that the given worker type does per second in the given workshop type. */
function getUnitWorkPower(int workshopUnitId, int workerUnitId) returns real
	switch workerUnitId
		case UnitIdsCustom.AoW.peasant
			switch workshopUnitId
				case UnitIdsCustom.AoW.lumberMill
					return 1.
				case UnitIdsCustom.AoW.blacksmith
					return 1.
	return 0.

/** Returns the required production progress in seconds of the given workshop type. */
function getRequiredWorkPower(int workshopUnitId, int productionVariant) returns real
	switch workshopUnitId
		case UnitIdsCustom.AoW.lumberMill
			switch productionVariant
				case 1
					return 15.
				case 2
					return 10.
		case UnitIdsCustom.AoW.blacksmith
			switch productionVariant
				case 1
					return 20.
	return 0.

/** Returns educts for given workshop type and production variant. */
function getWorkshopEducts(int workshopUnitId, int productionVariant) returns Wares
	let wares = new Wares()
	switch workshopUnitId
		case UnitIdsCustom.AoW.lumberMill
			switch productionVariant
				case 1
					wares.add(ware(WareType.WOOD, 3))
				case 2
					wares.add(ware(WareType.WOOD, 1))
		case UnitIdsCustom.AoW.blacksmith
			switch productionVariant
				case 1
					wares.add(ware(WareType.IRON_ORE, 1))
					wares.add(ware(WareType.COAL, 1))
	return wares

/** Returns products for given workshop type and production variant. */
function getWorkshopProducts(int workshopUnitId, int productionVariant) returns Wares
	let wares = new Wares()
	switch workshopUnitId
		case UnitIdsCustom.AoW.lumberMill
			switch productionVariant
				case 1
					wares.add(ware(WareType.WOODEN_BOARDS, 2))
				case 2
					wares.add(ware(WareType.WOODEN_STICKS, 1))
		case UnitIdsCustom.AoW.blacksmith
			switch productionVariant
				case 1
					wares.add(ware(WareType.METAL, 1))
	return wares


// --------------------
// Functional code
// --------------------

let WORKSHOP_MAP = new IterableUnitHashMap<Workshop>(null)

public class Workshop extends Workplace
	private ReservableWares storedWares
	private int productionVariant
	private real workProgressCurrent
	private real workProgressFinished
	private real workPower

	construct(unit building)
		super(building)
		storedWares = new ReservableWares()
		productionVariant = 1
		workProgressCurrent = 0.
		workProgressFinished = getRequiredWorkPower(building.getUnitId(), productionVariant)
		workPower = 0.

	ondestroy
		destroy storedWares

	private function startProduction() returns bool
		// Check if there are enough educts:
		let educts = getEducts()
		if storedWares.has(educts)
			// Check if there is enough free space for the products:
			let products = getProducts()
			for ware in products
				if storedWares.getCount(ware.wareType) > ware.count * (MAX_STORABLE_PRODUCTS - 1)
					// Too many products:
					destroy products
					return false
			destroy products
			// Start production:
			storedWares.remove(educts)
			destroy educts
			return true
		else
			// Not enough educts:
			destroy educts
			return false

	private function cancelProduction()
		if isProducing()
			// Reset work progress:
			workProgressCurrent = 0.
			// Regain educts:
			let educts = getEducts()
			storedWares.add(educts)
			destroy educts

	function isProducing() returns bool
		return workProgressCurrent > 0.

	function getStoredWares() returns ReservableWares
		return storedWares

	function getStoredEductsCount() returns int
		var amount = MAX_WARE_COUNT
		let educts = getEducts()
		for ware in educts
			amount = min(amount, storedWares.getCount(ware.wareType) div ware.count)
		destroy educts
		return amount

	function getStoredProductsCount() returns int
		var amount = MAX_WARE_COUNT
		let products = getProducts()
		for ware in products
			amount = min(amount, storedWares.getCount(ware.wareType) div ware.count)
		destroy products
		return amount

	function getProducts() returns Wares
		return getWorkshopProducts(user.getUnitId(), productionVariant)

	function getEducts() returns Wares
		return getWorkshopEducts(user.getUnitId(), productionVariant)

	function getWorkProgressPercentage() returns real
		return 100. * workProgressCurrent / workProgressFinished

	function getWorkProgressLeft() returns real
		return workProgressFinished - workProgressCurrent

	function getWorkPower() returns real
		return workPower

	function changeProduct()
		if getRequiredWorkPower(user.getUnitId(), productionVariant + 1) > 0.
			cancelProduction()
			productionVariant = productionVariant + 1
		else if productionVariant != 1
			cancelProduction()
			productionVariant = 1
		workProgressFinished = getRequiredWorkPower(user.getUnitId(), productionVariant)

	function adjustProgress() returns bool
		if workPower > 0.
			// Check if a new production has to be startet:
			if isProducing() == false and startProduction() == false
				return false
			// Adjust work progress:
			workProgressCurrent += workPower * PRODUCTION_ADJUSTMENT_RATE
			if workProgressCurrent >= workProgressFinished
				// Finish production:
				let products = getProducts()
				storedWares.add(products)
				destroy products
				// Directly start with next production if possible:
				if startProduction()
					workProgressCurrent -= workProgressFinished
				else
					workProgressCurrent = 0.
				return true
		return false

	function enterBuilding(unit worker)
		if workers.contains(worker) == false
			error("Worker does not belong to this workshop")
		workPower += getUnitWorkPower(user.getUnitId(), worker.getUnitId())

	function leaveBuilding(unit worker)
		if workers.contains(worker) == false
			error("Worker does not belong to this workshop")
		workPower -= getUnitWorkPower(user.getUnitId(), worker.getUnitId())

	/** Searches a work task for the given worker. Returns if a task could be found. */
	override function findWorkOrder(unit worker) returns bool
		// Enter workplace if to far away:
		if worker.getPos().distanceTo(user.getPos()) > MAX_NEAR_BY_RANGE
			worker.setOrder(AbilityIdsCustom.enterBuilding, user)
			return true
		// Don't do anything else if a production is in progress:
		if isProducing()
			return false
		// Search for workshop that need products if wares is full:
		if getStoredProductsCount() >= MAX_STORABLE_PRODUCTS
			let target = this.findNextWorkshopInNeedOfProducts()
			if target != null
				// Give needed products to worker and reserve them in target workshop:
				let products = getProducts()
				let targetWorkshop = target.toWorkshop()
				let targetEducts = targetWorkshop.getEducts()
				let targetWares = targetWorkshop.getStoredWares()
				let workerStorage = worker.getStorage()
				for ware in targetEducts
					if products.hasAny(ware)
						let wareCount = min(ware.count * MAX_STORABLE_EDUCTS - targetWares.getUnreservedCount(ware.wareType), storedWares.getUnreservedCount(ware.wareType), workerStorage.getFreeCapacity())
						if wareCount > 0
							storedWares.remove(ware(ware.wareType, wareCount))
							workerStorage.add(ware(ware.wareType, wareCount))
							targetWorkshop.storedWares.reserveInbound(workerStorage, ware(ware.wareType, wareCount))
				destroy products
				destroy targetEducts
				// Order ware transfer:
				worker.setOrder(AbilityIdsCustom.transferWares, target)
				return true
		// Search for workplace with educts if none are stored:
		if getStoredEductsCount() == 0
			let target = this.findNextWorkplaceWithEducts()
			if target != null
				// Reserve needed educts in target workshop:
				let educts = getEducts()
				let targetWorkshop = target.toWorkshop()
				let targetProducts = targetWorkshop.getProducts()
				let targetWares = targetWorkshop.getStoredWares()
				let workerStorage = worker.getStorage()
				for ware in targetProducts
					if educts.hasAny(ware)
						let wareCount = min(targetWares.getUnreservedCount(ware.wareType), educts.getCount(ware.wareType) * MAX_STORABLE_EDUCTS - storedWares.getReservedInboundCount(ware.wareType), workerStorage.getFreeCapacity())
						if wareCount > 0
							targetWorkshop.storedWares.reserveOutbound(workerStorage, ware(ware.wareType, wareCount))
				destroy educts
				destroy targetProducts
				// Order ware transfer:
				worker.setOrder(AbilityIdsCustom.transferWares, target)
				return true
		// Nothing to do at the moment:
		return false

	/** Transfers as many educts as possible from source storage to this workshop.
	Afterwards transfers as many products as possible from this workshop to source storage. */
	override function transferWares(Storage source, bool takeProducts)
		// Look for educts in source:
		let educts = getEducts()
		for ware in educts
			let wareCount = min(ware.count * MAX_STORABLE_EDUCTS - storedWares.getCount(ware.wareType), source.getCount(ware.wareType))
			if wareCount > 0
				// Transfer ware:
				source.remove(ware(ware.wareType, wareCount))
				storedWares.add(ware(ware.wareType, wareCount))
		destroy educts
		// Look for products in workshop:
		if takeProducts
			let products = getProducts()
			for ware in products
				let wareCount = min(storedWares.getCount(ware.wareType), source.getFreeCapacity())
				if wareCount > 0
					// Transfer ware:
					storedWares.remove(ware(ware.wareType, wareCount))
					source.add(ware(ware.wareType, wareCount))
			destroy products


function unit.addWorkshop() returns bool
	if WORKSHOP_MAP.has(this) == false and getRequiredWorkPower(this.getUnitId(), 1) > 0.
		WORKSHOP_MAP.put(this, new Workshop(this))
		return true
	return false

function unit.removeWorkshop()
	let workshop = WORKSHOP_MAP.tryRemove(this)
	if workshop != null
		destroy workshop

/** Returns next valid workshop unit in need of products from this workshop. */
function Workshop.findNextWorkshopInNeedOfProducts() returns unit
	unit bestBuilding = null
	var bestNeededProducts = 1
	var bestDistanceSq = REAL_MAX
	// Search buildings in range:
	let sourcePos = this.getUnit().getPos()
	ENUM_GROUP.enumUnitsInRange(sourcePos, MAX_AUTO_ORDER_RANGE)
	let products = this.getProducts()
	for target from ENUM_GROUP
		let workshop = target.toWorkshop()
		if workshop != null
			let neededProducts = products.getCount(workshop.getEducts()) * (MAX_STORABLE_EDUCTS - workshop.getStoredEductsCount())
			let distanceSq = sourcePos.distanceToSq(target.getPos())
			// Get workshop that needs the most of the available products and is closest:
			if neededProducts > bestNeededProducts or (neededProducts == bestNeededProducts and distanceSq < bestDistanceSq)
				bestBuilding = target
				bestNeededProducts = neededProducts
				bestDistanceSq = distanceSq
	return bestBuilding

/** Returns next valid workshop or gatherplace unit with educts for this workshop. */
function Workshop.findNextWorkplaceWithEducts() returns unit
	unit bestBuilding = null
	var bestAvailableEducts = 1
	var bestDistanceSq = REAL_MAX
	// Search buildings in range:
	let sourcePos = this.getUnit().getPos()
	ENUM_GROUP.enumUnitsInRange(sourcePos, MAX_AUTO_ORDER_RANGE)
	ENUM_GROUP.removeUnit(this.getUnit())
	let educts = this.getEducts()
	for target from ENUM_GROUP
		let workshop = target.toWorkshop()
		let gatherplace = target.toGatherplace()
		var availableEducts = 0
		if workshop != null
			availableEducts = educts.getCount(workshop.getProducts()) * workshop.getStoredProductsCount()
		else if gatherplace != null
			availableEducts = educts.getCount(gatherplace.getProducts()) * gatherplace.getStoredProductsCount()
		let distanceSq = sourcePos.distanceToSq(target.getPos())
		// Get workplace that has the most available products and is closest:
		if availableEducts > bestAvailableEducts or (availableEducts == bestAvailableEducts and distanceSq < bestDistanceSq)
			bestBuilding = target
			bestAvailableEducts = availableEducts
			bestDistanceSq = distanceSq
	return bestBuilding

/** Returns the workshop of given building. */
public function unit.toWorkshop() returns Workshop
	return WORKSHOP_MAP.tryGet(this)

/** Creates and returns a workshop building with given values. */
public function createWorkshopBuilding(player owner, int unitId, vec2 pos, angle facing) returns unit
	let building = createUnit(owner, unitId, pos, facing)
	if building.addWorkshop() == false
		error("Could not create " + building.getName() + " as workshop building")
	return building

/** Try to set system relevant infos for given object in this multiboard. Returns if it could be set. */
public function multiboard.trySetObjectInfoMultiboard(Workshop object) returns bool
	if object == null
		return false
	this.addMultiboardLine("Workshop: " + object.user.getName(), HEADLINE_ICON_PATH)
	this.addMultiboardLine("Workers: " + object.getWorkerCount().toString() + "/" + object.getMaxWorkerSlots().toString(), WORKERS_ICON_PATH)
	this.addMultiboardLine("Production progress: " + object.getWorkProgressPercentage().toInt().toString() + "%", PRODUCTION_PROGRESS_ICON_PATH)
	let workPower = object.getWorkPower()
	if workPower > 0.
		this.addMultiboardLine("Production time left: " + (object.getWorkProgressLeft() / workPower).toInt().toString() + "s", PRODUCTION_TIME_LEFT_ICON_PATH)
	this.addMultiboardLine("Educts (" + object.getStoredEductsCount().toString() + "/" + MAX_STORABLE_EDUCTS.toString() + "):", SUB_HEADLINE_ICON_PATH)
	let educts = object.getEducts()
	for ware in educts
		this.addMultiboardLine(ware.count.toString() + " " + ware.toString(true), ware.getIconPath())
	destroy educts
	this.addMultiboardLine("Products (" + object.getStoredProductsCount().toString() + "/" + MAX_STORABLE_PRODUCTS.toString() + ")", SUB_HEADLINE_ICON_PATH)
	let products = object.getProducts()
	for ware in products
		this.addMultiboardLine(ware.count.toString() + " " + ware.toString(true), ware.getIconPath())
	destroy products
	// TODO: also show stored wares with reserved counts (additions and subtractions)
	return true

init
	// Add workshop to every appropriate new unit:
	registerPlayerUnitEvent(EVENT_PLAYER_UNIT_UPGRADE_FINISH, () -> GetTriggerUnit().addWorkshop())
	// Remove workshop from every appropriate removed unit:
	onUnitDeindex(() -> getIndexingUnit().removeWorkshop())
	// Adjust progress of all workshops:
	doPeriodically(PRODUCTION_ADJUSTMENT_RATE) cb ->
		for building in WORKSHOP_MAP
			if building != null
				WORKSHOP_MAP.get(building).adjustProgress()


// --------------------
// Test code
// --------------------

public function testWorkshopSystem_Workers(vec2 testCentre)
	let testName = setTestName("testWorkshopSystem_Workers", true)
	// Remove units blocking the building:
	ForGroup(GetUnitsInRectAll(testCentre.withRadiusRect(256.)), () -> GetEnumUnit().remove())
	// Create workshop:
	let unitA = createWorkshopBuilding(Settings.USER_PLAYER, UnitIdsCustom.AoW.lumberMill, testCentre, angle(0))
	let workshopA = unitA.toWorkshop()
	workshopA.getStoredWares().add(ware(WareType.WOODEN_BOARDS, 4))
	workshopA.getStoredProductsCount().assertEquals(testName, 2)
	workshopA.getStoredEductsCount().assertEquals(testName, 0)
	assertNotNull(testName, workshopA)
	workshopA.getWorkerCount().assertEquals(testName, 0)
	workshopA.getWorkPower().assertEquals(testName, 0.)
	workshopA.isValidWorkerType(UnitIdsCustom.AoW.peasant).assertTrue(testName)
	// Add workers:
	let unitB = createUnit(Settings.USER_PLAYER, UnitIdsCustom.AoW.peasant, testCentre, angle(0))
	let storageA = unitB.getStorage()
	storageA.add(ware(WareType.WOOD, 6))
	let unitC = createUnit(Settings.USER_PLAYER, UnitIdsCustom.AoW.peasant, testCentre, angle(0))
	unitB.issueTargetOrderById(OrderIds.smart, unitA)
	unitC.issueTargetOrderById(OrderIds.smart, unitA)
	let unitD = createUnit(Settings.USER_PLAYER, UnitIdsCustom.AoW.peasant, testCentre, angle(0))
	let unitE = createUnit(Settings.USER_PLAYER, UnitIdsCustom.AoW.peasant, testCentre, angle(0))
	doAfter(MIN_ACTION_SLEEP_TIME) () ->
		// Check workshop status:
		workshopA.getWorkerCount().assertEquals(testName, 2)
		workshopA.getWorkPower().assertEquals(testName, 2.)
		workshopA.getStoredProductsCount().assertEquals(testName, 2)
		workshopA.getStoredEductsCount().assertEquals(testName, 1)
		// Add more workers:
		unitD.issueTargetOrderById(OrderIds.smart, unitA)
		unitE.issueTargetOrderById(OrderIds.smart, unitA)
	doAfter(2 * MIN_ACTION_SLEEP_TIME) () ->
		// Check workshop status:
		workshopA.getWorkerCount().assertEquals(testName, 3)
		workshopA.getWorkPower().assertEquals(testName, 3.)
		testFinish(testName)
	// Remove test units:
	doAfter(3 * MIN_ACTION_SLEEP_TIME) () ->
		unitA.kill()
		unitA.remove()
		unitB.kill()
		unitB.remove()
		unitC.kill()
		unitC.remove()
		unitD.kill()
		unitD.remove()
		unitE.kill()
		unitE.remove()

public function testWorkshopSystem_Production(vec2 testCentre)
	let testName = setTestName("testWorkshopSystem_Production", true)
	// Remove units blocking the building:
	ForGroup(GetUnitsInRectAll(testCentre.withRadiusRect(256.)), () -> GetEnumUnit().remove())
	// Create workshop:
	let unitA = createWorkshopBuilding(Settings.USER_PLAYER, UnitIdsCustom.AoW.lumberMill, testCentre, angle(0))
	let workshopA = unitA.toWorkshop()
	assertNotNull(testName, workshopA)
	workshopA.getWorkProgressPercentage().assertEquals(testName, 0.)
	workshopA.getWorkProgressLeft().assertEquals(testName, 15.)
	workshopA.getStoredEductsCount().assertEquals(testName, 0)
	workshopA.getStoredProductsCount().assertEquals(testName, 0)
	let waresA = new Wares()
	waresA.add(ware(WareType.WOOD, 3))
	var waresB = workshopA.getEducts()
	waresA.isEqual(waresB).assertTrue(testName)
	waresA.clear()
	waresA.add(ware(WareType.WOODEN_BOARDS, 2))
	destroy waresB
	waresB = workshopA.getProducts()
	waresA.isEqual(waresB).assertTrue(testName)
	// Change product:
	workshopA.changeProduct()
	workshopA.getWorkProgressLeft().assertEquals(testName, 10.)
	waresA.clear()
	waresA.add(ware(WareType.WOOD, 1))
	destroy waresB
	waresB = workshopA.getEducts()
	waresA.isEqual(waresB).assertTrue(testName)
	waresA.clear()
	waresA.add(ware(WareType.WOODEN_STICKS, 1))
	destroy waresB
	waresB = workshopA.getProducts()
	waresA.isEqual(waresB).assertTrue(testName)
	workshopA.changeProduct()
	workshopA.getWorkProgressLeft().assertEquals(testName, 15.)
	// Add workers directly:
	let unitB = createUnit(Settings.USER_PLAYER, UnitIdsCustom.AoW.peasant, testCentre, angle(0))
	let unitC = createUnit(Settings.USER_PLAYER, UnitIdsCustom.AoW.peasant, testCentre, angle(0))
	let unitD = createUnit(Settings.USER_PLAYER, UnitIdsCustom.AoW.peasant, testCentre, angle(0))
	workshopA.addWorker(unitB)
	workshopA.enterBuilding(unitB)
	unitB.hide()
	workshopA.addWorker(unitC)
	workshopA.enterBuilding(unitC)
	unitC.hide()
	workshopA.addWorker(unitD)
	workshopA.enterBuilding(unitD)
	unitD.hide()
	workshopA.getWorkerCount().assertEquals(testName, 3)
	// Add educts:
	waresA.clear()
	waresA.add(ware(WareType.WOOD, 7))
	workshopA.getStoredWares().add(waresA)
	workshopA.getStoredEductsCount().assertEquals(testName, 2)
	workshopA.getStoredProductsCount().assertEquals(testName, 0)
	doAfter(2.) () ->
		// Check workshop status:
		workshopA.getStoredEductsCount().assertEquals(testName, 1)
		workshopA.getStoredProductsCount().assertEquals(testName, 0)
		workshopA.getWorkProgressPercentage().assertEquals(testName, 40., 2.)
		workshopA.getWorkProgressLeft().assertEquals(testName, 9., 0.3)
	doAfter(6.) () ->
		// Check workshop status:
		workshopA.getStoredEductsCount().assertEquals(testName, 0)
		workshopA.getStoredProductsCount().assertEquals(testName, 1)
		workshopA.getWorkProgressPercentage().assertEquals(testName, 20., 2.)
		workshopA.getWorkProgressLeft().assertEquals(testName, 12., 0.3)
	doAfter(11.) () ->
		// Check workshop status:
		workshopA.getStoredEductsCount().assertEquals(testName, 0)
		workshopA.getStoredProductsCount().assertEquals(testName, 2)
		workshopA.getWorkProgressPercentage().assertEquals(testName, 0.)
		workshopA.getWorkProgressLeft().assertEquals(testName, 15.)
		testFinish(testName)
	doAfter(12.) () ->
		// Remove test units:
		unitA.kill()
		unitA.remove()
		unitB.kill()
		unitB.remove()
		unitC.kill()
		unitC.remove()
		unitD.kill()
		unitD.remove()
		// Destroy class objects:
		destroy waresA
		destroy waresB