/*-------------------------------------------------------------
// Version number:
1.0.0

// Description:
Provides two dimensional arrays.

// Changelog:
- 1.0.0:
Initial version.
-------------------------------------------------------------*/
package Array2D
import HashMap
import Array
import ErrorHandling


// --------------------
// Functional code
// --------------------

tuple slot2D(int x, int y)

function slot2D.checkBoundaries(int sizeX, int sizeY)
	if this.x >= sizeX or this.x < 0 or this.y >= sizeY or this.y < 0
		error("ERROR: Slot (" + this.x.toString() + ", " + this.y.toString() + ") is outside boundaries (" + sizeX.toString() + ", " + sizeY.toString() + ")")

function slot2D.toSlot1D(int sizeX) returns int
	return this.x + sizeX * this.y

function int.toSlot2DByX(int x, int sizeX) returns slot2D
	return slot2D(x, (this - x) div sizeX)

function int.toSlot2DByY(int y, int sizeX) returns slot2D
	return slot2D(this - sizeX * y, y)

public class Array2D<T>
	private constant let data = new HashMap<int, T>
	private constant int sizeX
	private constant int sizeY

	construct(int sizeX, int sizeY)
		this.sizeX = sizeX
		this.sizeY = sizeY

	ondestroy
		destroy data

	function sizeX() returns int
		return sizeX

	function sizeY() returns int
		return sizeY

	function get(int x, int y) returns T
		let s = slot2D(x, y)
		s.checkBoundaries(sizeX, sizeY)
		let key = s.toSlot1D(sizeX)
		if data.has(key)
			return data.get(key)
		else
			error("ERROR: Slot (" + x.toString() + ", " + y.toString() + ") has no value")
			return null

	function set(int x, int y, T elem)
		let s = slot2D(x, y)
		s.checkBoundaries(sizeX, sizeY)
		data.put(s.toSlot1D(sizeX), elem)

public class Array2DReal
	private constant ArrayReal data
	private constant int sizeX
	private constant int sizeY

	construct(int sizeX, int sizeY)
		data = new ArrayReal(sizeX * sizeY)
		this.sizeX = sizeX
		this.sizeY = sizeY

	ondestroy
		destroy data

	function sizeX() returns int
		return sizeX

	function sizeY() returns int
		return sizeY

	function get(int x, int y) returns real
		let s = slot2D(x, y)
		s.checkBoundaries(sizeX, sizeY)
		return data.get(s.toSlot1D(sizeX))

	function set(int x, int y, real elem)
		let s = slot2D(x, y)
		s.checkBoundaries(sizeX, sizeY)
		data.set(s.toSlot1D(sizeX), elem)