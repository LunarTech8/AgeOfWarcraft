/*-------------------------------------------------------------
// Version number:
1.01

// Description:
Gives predefined unit types resources wares that can be extracted by workers via the harvest ability.

// Changelog:
- 1.01:
Initial version.
-------------------------------------------------------------*/
package ResourceSystem
import LinkedList
import HashMap
import OnUnitEnterLeave
import ClosureTimers
import ConstantDataSystem
import MultiboardPrioritySystem
import UtilityFunctions
import Stock
import StorageSystem


// --------------------
// Data code
// --------------------

let MAX_AUTO_ORDER_RANGE = 1024.

function getDefaultInitWares(int unitId) returns LinkedList<ware>
	var wares = new LinkedList<ware>()
	switch unitId
		case UnitIdsCustom.beech
			wares.add(ware(WareType.Wood, GetRandomInt(6, 8)))
		case UnitIdsCustom.birch
			wares.add(ware(WareType.Wood, GetRandomInt(4, 6)))
		case UnitIdsCustom.greyOak
			wares.add(ware(WareType.Wood, GetRandomInt(6, 8)))
		case UnitIdsCustom.chestnut
			wares.add(ware(WareType.Wood, GetRandomInt(4, 6)))
	return wares

function isKilledWhenDepleted(int unitId) returns bool
	switch unitId
		case UnitIdsCustom.beech
			return true
		case UnitIdsCustom.birch
			return true
		case UnitIdsCustom.greyOak
			return true
		case UnitIdsCustom.chestnut
			return true
		default
			return false

function getWorkProgressPerHarvest(int workerUnitId, int resourceUnitId) returns real
	switch resourceUnitId
		case UnitIdsCustom.beech
			switch workerUnitId
				case UnitIdsCustom.peasant
					return 0.67
			return 0.5
		case UnitIdsCustom.birch
			return 0.5
		case UnitIdsCustom.greyOak
			return 0.5
		case UnitIdsCustom.chestnut
			return 0.5
		default
			return 0.

function getWaresPerFinishedWork(int unitId) returns LinkedList<ware>
	var wares = new LinkedList<ware>()
	switch unitId
		case UnitIdsCustom.beech
			wares.add(ware(WareType.Wood, 1))
		case UnitIdsCustom.birch
			wares.add(ware(WareType.Wood, 1))
		case UnitIdsCustom.greyOak
			wares.add(ware(WareType.Wood, 1))
		case UnitIdsCustom.chestnut
			wares.add(ware(WareType.Wood, 1))
	return wares


// --------------------
// Functional code
// --------------------

let RESOURCE_MAP = new HashMap<unit, Resource>  // TODO: maybe make a general unit to class hash map system with corresponding utility functions

class Resource extends Stock
	private unit resource
	private bool isKilledWhenDepleted
	private group targetedByGroup
	private real workProgress

	construct(unit resource, bool isKilledWhenDepleted, LinkedList<ware> initWares)
		super(initWares)
		this.resource = resource
		this.isKilledWhenDepleted = isKilledWhenDepleted
		targetedByGroup = CreateGroup()
		workProgress = 0.

	ondestroy
		for u from targetedByGroup
			doAfter(MIN_TRIGGER_SLEEP_TIME, () -> u.issueTargetAbilityOrder(AbilityIdsCustom.harvest, u.findNextResource(), true))
		targetedByGroup.destr()

	private function work(real workProgress) returns bool
		this.workProgress += workProgress
		if this.workProgress >= 1.
			this.workProgress -= 1.
			return true
		else
			return false

	/** Perform harvest and returns the harvested wares. */
	function harvest(int workerUnitId) returns LinkedList<ware>
		let resourceUnitId = resource.getUnitId()
		// Work resource:
		if work(getWorkProgressPerHarvest(workerUnitId, resourceUnitId))
			// Return harvested wares:
			return getWaresPerFinishedWork(resourceUnitId)
		// No wares harvested yet:
		return null

	function checkForDepletionKill() returns bool
		if isKilledWhenDepleted and wares.isEmpty()
			return true
		return false

	function addAsTarget(unit source)
		if targetedByGroup.contains(source) == false
			targetedByGroup.addUnit(source)

	function removeAsTarget(unit source)
		if targetedByGroup.contains(source)
			targetedByGroup.removeUnit(source)


function unit.addResource()
	if RESOURCE_MAP.has(this) == false
		var unitType = this.getUnitId()
		var wares = getDefaultInitWares(unitType)
		if wares.isEmpty()
			destroy wares
		else
			var resource = new Resource(this, isKilledWhenDepleted(unitType), wares)
			RESOURCE_MAP.put(this, resource)

function unit.removeResource()
	if RESOURCE_MAP.has(this)
		destroy RESOURCE_MAP.get(this)
		RESOURCE_MAP.remove(this)

function unit.findNextResource() returns unit
	// Check if worker has enough free space:
	if this.getStorage().getFreeCapacity() > 0
		var filter = Filter() ->
			var conditionsFulfilled = false
			let resource = GetFilterUnit().getResource()
			// Only allow resources that have wares left:
			if resource != null and resource.hasWares()
				conditionsFulfilled = true
			return conditionsFulfilled
		let target = this.getPos().getNearestUnit(MAX_AUTO_ORDER_RANGE, filter)
		filter.destr()
		return target
	else
		return null

/** Returns the resource of given unit. */
public function unit.getResource() returns Resource
	if RESOURCE_MAP.has(this)
		return RESOURCE_MAP.get(this)
	else
		return null

/** Sets system relevant infos for given object in target multiboard. */
public function multiboard.setObjectInfoMultiboard(Resource r) returns bool
	this.addMultiboardLine("Resource:", HEADLINE_ICON_PATH)
	for i = 0 to (r.getAmountOfWareTypes() - 1)
		var ware = r.getWare(i)
		this.addMultiboardLine(ware.count.toString() + " " + ware.toString(true), ware.getIconPath())
	return true

init
	// Add resource to every appropriate new unit:
	onEnter() ->
		getEnterLeaveUnit().addResource()
	// Remove resource from every appropriate removed unit:
	onLeave() ->
		getEnterLeaveUnit().removeResource()