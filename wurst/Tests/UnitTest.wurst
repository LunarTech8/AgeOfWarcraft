/*-------------------------------------------------------------
// Version number:
1.0.0

// Description:
Ingame test alternative to the Wurstunit package with additional functionality.

// Examples:
testDebug("test<SystemName>_<FunctionName>", "Debug message")  // DEBUG: only for testing
testFail(testName, "Test implementation not finished yet")  // TODO: finish implementation

// Changelog:
- 1.0.0:
Initial version.
-------------------------------------------------------------*/
package UnitTest
import HashMap


// --------------------
// Data code
// --------------------

let SHOW_START_TEST_MESSAGE = false
let TEST_NAME_WURSTUNIT = "UseWurstunit"


// --------------------
// Functional code
// --------------------

let TEST_NAME_MAP = new HashMap<string, int>
let TEST_SUCCESS_MAP = new HashMap<string, bool>

function useTestName(string testName)
	if testName != TEST_NAME_WURSTUNIT
		var testNameCounter = 1
		if TEST_NAME_MAP.has(testName)
			testNameCounter = TEST_NAME_MAP.get(testName) + 1
		else
			TEST_SUCCESS_MAP.put(testName, true)
			if SHOW_START_TEST_MESSAGE
				printLog(Loglevel.INFO, "[Start test for: " + testName + "]")
		TEST_NAME_MAP.put(testName, testNameCounter)

function getUsedTestName(string testName) returns string
	return testName + " " + TEST_NAME_MAP.get(testName).toString()

public function setTestName(string testName, bool isInGameTest) returns string
	if not isInGameTest
		return TEST_NAME_WURSTUNIT
	else
		return testName

public function testFinish(string testName)
	if testName == TEST_NAME_WURSTUNIT
		testSuccess()
	else
		useTestName(testName)
		if TEST_SUCCESS_MAP.get(testName)
			printLog(Loglevel.INFO, "[" + getUsedTestName(testName) + "] " + "Test successful")
		else
			printLog(Loglevel.WARNING, "[" + getUsedTestName(testName) + "] " + "Test NOT successful")
		TEST_NAME_MAP.remove(testName)

function testFail(string testName, bool useTestName, string msg)
	if testName == TEST_NAME_WURSTUNIT
		testFail(msg)
	else
		if useTestName
			useTestName(testName)
		printLog(Loglevel.ERROR, "[" + getUsedTestName(testName) + "] " + msg)
		TEST_SUCCESS_MAP.put(testName, false)
public function testFail(string testName, string msg)
	testFail(testName, true, msg)

public function testDebug(string testName, string msg)
	if testName == TEST_NAME_WURSTUNIT
		println(msg)
	else
		useTestName(testName)
		printLog(Loglevel.DEBUG, "[" + getUsedTestName(testName) + "] " + msg)
public function testDebug(string testName, int msg)
	testDebug(testName, msg.toString())

/**
 * Asserts that two ints are equal. If they are not, an error is thrown with a message.
 */
public function int.assertEquals(string testName, int expected)
	useTestName(testName)
	if this != expected
		testFail(testName, false, "Expected <" + expected.toString() + ">, Actual <" + this.toString() + ">")

/**
 * Asserts that the passed int is greater than the parameter. If they are not, an error is thrown with a message.
 */
public function int.assertGreaterThan(string testName, int less)
	useTestName(testName)
	if this <= less
		testFail(testName, false, "Expected <" + this.toString() + "> to be greater than <" + less.toString() + ">")

/**
 * Asserts that the passed int is greater than the parameter. If they are not, an error is thrown with a message.
 */
public function int.assertGreaterThanOrEqual(string testName, int less)
	useTestName(testName)
	if this < less
		testFail(testName, false, "Expected <" + this.toString() + "> to be greater than or equal to <" + less.toString() + ">")

/**
 * Asserts that the passed int is greater than the parameter. If they are not, an error is thrown with a message.
 */
public function int.assertLessThan(string testName, int greater)
	useTestName(testName)
	if this >= greater
		testFail(testName, false, "Expected <" + this.toString() + "> to be less than <" + greater.toString() + ">")

/**
 * Asserts that the passed int is greater than the parameter. If they are not, an error is thrown with a message.
 */
public function int.assertLessThanOrEqual(string testName, int greater)
	useTestName(testName)
	if this > greater
		testFail(testName, false, "Expected <" + this.toString() + "> to be less than or equal to <" + greater.toString() + ">")

/**
 * Asserts that two strings are equal. If they are not, an error is thrown with a message.
 */
public function string.assertEquals(string testName, string expected)
	useTestName(testName)
	if this != expected
		testFail(testName, false, "Expected <" + expected + ">, Actual <" + this + ">")

/**
 * Asserts that two reals are equal. If they are not, an error is thrown with a message.
 */
public function real.assertEquals(string testName, real expected)
	useTestName(testName)
	if this != expected
		testFail(testName, false, "Expected <" + expected.toString() + ">, Actual <" + this.toString() + ">")

/**
 * Asserts that the passed real is greater than the parameter. If they are not, an error is thrown with a message.
 */
public function real.assertGreaterThan(string testName, real less)
	useTestName(testName)
	if this <= less
		testFail(testName, false, "Expected <" + this.toString() + "> to be greater than <" + less.toString() + ">")

/**
 * Asserts that the passed real is greater than the parameter. If they are not, an error is thrown with a message.
 */
public function real.assertGreaterThanOrEqual(string testName, real less)
	useTestName(testName)
	if this < less
		testFail(testName, false, "Expected <" + this.toString() + "> to be greater than or equal to <" + less.toString() + ">")

/**
 * Asserts that the passed real is greater than the parameter. If they are not, an error is thrown with a message.
 */
public function real.assertLessThan(string testName, real greater)
	useTestName(testName)
	if this >= greater
		testFail(testName, false, "Expected <" + this.toString() + "> to be less than <" + greater.toString() + ">")

/**
 * Asserts that the passed real is greater than the parameter. If they are not, an error is thrown with a message.
 */
public function real.assertLessThanOrEqual(string testName, real greater)
	useTestName(testName)
	if this > greater
		testFail(testName, false, "Expected <" + this.toString() + "> to be less than or equal to <" + greater.toString() + ">")


/**
 * Asserts that two reals are equal to within a positive delta. If they are not, an error is thrown
 * with a message.
 */
public function real.assertEquals(string testName, real expected, real delta)
	useTestName(testName)
	if (this - expected > delta) or (expected - this > delta)
		testFail(testName, false, "Expected <" + expected.toString() + ">, Actual <" + this.toString() + " with delta " + delta.toString() + ">")

/**
 * Asserts that two booleans are equal. If they are not, an error is thrown with a message.
 */
public function bool.assertEquals(string testName, bool expected)
	useTestName(testName)
	if this != expected
		testFail(testName, false, "Expected <" + expected.toString() + ">, Actual <" + this.toString() + ">")

/** Asserts that this booleans is true. If it is not, an error is thrown with a message. */
public function bool.assertTrue(string testName)
	this.assertEquals(testName, true)

/** Asserts that this booleans is false. If it is not, an error is thrown with a message. */
public function bool.assertFalse(string testName)
	this.assertEquals(testName, false)

/** Asserts that this booleans is true. If it is not, an error is thrown. */
public function assertTrue(string testName, bool b)
	useTestName(testName)
	if not b
		testFail(testName, false, "Assertion failed")

/** Asserts that this booleans is true. If it is not, an error is thrown with the supplied message. */
public function assertTrue(string testName, bool b, string msg)
	useTestName(testName)
	if not b
		testFail(testName, false, "Assertion failed: " + msg)

/** Asserts that the reference t is not null. */
public function assertNotNull<T>(string testName, T t)
	useTestName(testName)
	if t == null
		testFail(testName, false, "Assertion failed: Reference was null.")

/** Asserts that the references a and b are pointing to the same target. */
public function assertEquals<T>(string testName, T a, T b)
	useTestName(testName)
	if a != b
		testFail(testName, false, "Assertion failed: References were not equal.")