/*-------------------------------------------------------------
// Version number:
1.0.0

// Description:
Provides generic lists based on dynamic arrays.

// Changelog:
- 1.0.0:
Initial version.
-------------------------------------------------------------*/
package ArrayList
import UnitTest


// --------------------
// Functional code
// --------------------

interface IArrayList<T>
	protected function initUsedSlots(int usedSlots)  // Only for use at inital element copyings from other data instance
	protected function initSetElem(int index, T elem)  // Only for use at inital element copyings from other data instance
	function getMaxSize() returns int
	function getUsedSlots() returns int
	function getElem(int index) returns T
	function setElem(int index, T elem)
	function add(T elem)
	function add(int index, T elem)
	function remove(int index)
	function getIndex(T elem) returns int

class ArrayListBase<T>
	protected var usedSlots = 0

	protected function checkSlot(int index)
		if index > usedSlots - 1
			Log.error("ERROR: Given index (" + index.toString() + ") is out of bounds (bigger than " + (usedSlots - 1).toString() + ")")
		else if index < 0
			Log.error("ERROR: Given index (" + index.toString() + ") has to be bigger or equal to 0")

	protected function checkSize(int size)
		if usedSlots > size
			Log.error("ERROR: ArrayList size (" + usedSlots.toString() + ") is out of bounds (bigger than array size " + size.toString() + ")")
		else if usedSlots < 0
			Log.error("ERROR: Size of ArrayList can't be negative")

/* Generic ArrayList data class with fixed specific array size */
class ArrayListSize2<T> extends ArrayListBase implements IArrayList<T>
	private let maxSize = 2
	private T array[maxSize] data

	override protected function initUsedSlots(int usedSlots)
		this.usedSlots = usedSlots
		checkSize(maxSize)

	override protected function initSetElem(int index, T elem)
		data[index] = elem

	override function getMaxSize() returns int
		return maxSize

	override function getUsedSlots() returns int
		return usedSlots

	override function getElem(int index) returns T
		checkSlot(index)
		return data[index]

	override function setElem(int index, T elem)
		if index == usedSlots and usedSlots < maxSize
			usedSlots = index + 1
		checkSlot(index)
		data[index] = elem

	override function add(T elem)
		usedSlots++
		checkSize(maxSize)
		data[usedSlots - 1] = elem

	override function add(int index, T elem)
		usedSlots++
		checkSize(maxSize)
		checkSlot(index)
		for i = usedSlots - 1 downto index + 1
			data[i] = data[i - 1]
		data[index] = elem

	override function remove(int index)
		checkSlot(index)
		usedSlots--
		checkSize(maxSize)
		for i = index to usedSlots - 1
			data[i] = data[i + 1]

	override function getIndex(T elem) returns int
		for i = 0 to usedSlots - 1
			if data[i] == elem
				return i
		return -1

/* Generic ArrayList data class with fixed specific array size */
class ArrayListSize4<T> extends ArrayListBase implements IArrayList<T>
	private let maxSize = 4
	private T array[maxSize] data

	override protected function initUsedSlots(int usedSlots)
		this.usedSlots = usedSlots
		checkSize(maxSize)

	override protected function initSetElem(int index, T elem)
		data[index] = elem

	override function getMaxSize() returns int
		return maxSize

	override function getUsedSlots() returns int
		return usedSlots

	override function getElem(int index) returns T
		checkSlot(index)
		return data[index]

	override function setElem(int index, T elem)
		if index == usedSlots and usedSlots < maxSize
			usedSlots = index + 1
		checkSlot(index)
		data[index] = elem

	override function add(T elem)
		usedSlots++
		checkSize(maxSize)
		data[usedSlots - 1] = elem

	override function add(int index, T elem)
		usedSlots++
		checkSize(maxSize)
		checkSlot(index)
		for i = usedSlots - 1 downto index + 1
			data[i] = data[i - 1]
		data[index] = elem

	override function remove(int index)
		checkSlot(index)
		usedSlots--
		checkSize(maxSize)
		for i = index to usedSlots - 1
			data[i] = data[i + 1]

	override function getIndex(T elem) returns int
		for i = 0 to usedSlots - 1
			if data[i] == elem
				return i
		return -1

/* Generic ArrayList data class with fixed specific array size */
class ArrayListSize8<T> extends ArrayListBase implements IArrayList<T>
	private let maxSize = 8
	private T array[maxSize] data

	override protected function initUsedSlots(int usedSlots)
		this.usedSlots = usedSlots
		checkSize(maxSize)

	override protected function initSetElem(int index, T elem)
		data[index] = elem

	override function getMaxSize() returns int
		return maxSize

	override function getUsedSlots() returns int
		return usedSlots

	override function getElem(int index) returns T
		checkSlot(index)
		return data[index]

	override function setElem(int index, T elem)
		if index == usedSlots and usedSlots < maxSize
			usedSlots = index + 1
		checkSlot(index)
		data[index] = elem

	override function add(T elem)
		usedSlots++
		checkSize(maxSize)
		data[usedSlots - 1] = elem

	override function add(int index, T elem)
		usedSlots++
		checkSize(maxSize)
		checkSlot(index)
		for i = usedSlots - 1 downto index + 1
			data[i] = data[i - 1]
		data[index] = elem

	override function remove(int index)
		checkSlot(index)
		usedSlots--
		checkSize(maxSize)
		for i = index to usedSlots - 1
			data[i] = data[i + 1]

	override function getIndex(T elem) returns int
		for i = 0 to usedSlots - 1
			if data[i] == elem
				return i
		return -1

/* Generic ArrayList data class with fixed specific array size */
class ArrayListSize16<T> extends ArrayListBase implements IArrayList<T>
	private let maxSize = 16
	private T array[maxSize] data

	override protected function initUsedSlots(int usedSlots)
		this.usedSlots = usedSlots
		checkSize(maxSize)

	override protected function initSetElem(int index, T elem)
		data[index] = elem

	override function getMaxSize() returns int
		return maxSize

	override function getUsedSlots() returns int
		return usedSlots

	override function getElem(int index) returns T
		checkSlot(index)
		return data[index]

	override function setElem(int index, T elem)
		if index == usedSlots and usedSlots < maxSize
			usedSlots = index + 1
		checkSlot(index)
		data[index] = elem

	override function add(T elem)
		usedSlots++
		checkSize(maxSize)
		data[usedSlots - 1] = elem

	override function add(int index, T elem)
		usedSlots++
		checkSize(maxSize)
		checkSlot(index)
		for i = usedSlots - 1 downto index + 1
			data[i] = data[i - 1]
		data[index] = elem

	override function remove(int index)
		checkSlot(index)
		usedSlots--
		checkSize(maxSize)
		for i = index to usedSlots - 1
			data[i] = data[i + 1]

	override function getIndex(T elem) returns int
		for i = 0 to usedSlots - 1
			if data[i] == elem
				return i
		return -1

/* Generic ArrayList data class with fixed specific array size */
class ArrayListSize32<T> extends ArrayListBase implements IArrayList<T>
	private let maxSize = 32
	private T array[maxSize] data

	override protected function initUsedSlots(int usedSlots)
		this.usedSlots = usedSlots
		checkSize(maxSize)

	override protected function initSetElem(int index, T elem)
		data[index] = elem

	override function getMaxSize() returns int
		return maxSize

	override function getUsedSlots() returns int
		return usedSlots

	override function getElem(int index) returns T
		checkSlot(index)
		return data[index]

	override function setElem(int index, T elem)
		if index == usedSlots and usedSlots < maxSize
			usedSlots = index + 1
		checkSlot(index)
		data[index] = elem

	override function add(T elem)
		usedSlots++
		checkSize(maxSize)
		data[usedSlots - 1] = elem

	override function add(int index, T elem)
		usedSlots++
		checkSize(maxSize)
		checkSlot(index)
		for i = usedSlots - 1 downto index + 1
			data[i] = data[i - 1]
		data[index] = elem

	override function remove(int index)
		checkSlot(index)
		usedSlots--
		checkSize(maxSize)
		for i = index to usedSlots - 1
			data[i] = data[i + 1]

	override function getIndex(T elem) returns int
		for i = 0 to usedSlots - 1
			if data[i] == elem
				return i
		return -1

/* Generic ArrayList data class with fixed specific array size */
class ArrayListSize64<T> extends ArrayListBase implements IArrayList<T>
	private let maxSize = 64
	private T array[maxSize] data

	override protected function initUsedSlots(int usedSlots)
		this.usedSlots = usedSlots
		checkSize(maxSize)

	override protected function initSetElem(int index, T elem)
		data[index] = elem

	override function getMaxSize() returns int
		return maxSize

	override function getUsedSlots() returns int
		return usedSlots

	override function getElem(int index) returns T
		checkSlot(index)
		return data[index]

	override function setElem(int index, T elem)
		if index == usedSlots and usedSlots < maxSize
			usedSlots = index + 1
		checkSlot(index)
		data[index] = elem

	override function add(T elem)
		usedSlots++
		checkSize(maxSize)
		data[usedSlots - 1] = elem

	override function add(int index, T elem)
		usedSlots++
		checkSize(maxSize)
		checkSlot(index)
		for i = usedSlots - 1 downto index + 1
			data[i] = data[i - 1]
		data[index] = elem

	override function remove(int index)
		checkSlot(index)
		usedSlots--
		checkSize(maxSize)
		for i = index to usedSlots - 1
			data[i] = data[i + 1]

	override function getIndex(T elem) returns int
		for i = 0 to usedSlots - 1
			if data[i] == elem
				return i
		return -1

/* Generic ArrayList data class with fixed specific array size */
class ArrayListSize128<T> extends ArrayListBase implements IArrayList<T>
	private let maxSize = 128
	private T array[maxSize] data

	override protected function initUsedSlots(int usedSlots)
		this.usedSlots = usedSlots
		checkSize(maxSize)

	override protected function initSetElem(int index, T elem)
		data[index] = elem

	override function getMaxSize() returns int
		return maxSize

	override function getUsedSlots() returns int
		return usedSlots

	override function getElem(int index) returns T
		checkSlot(index)
		return data[index]

	override function setElem(int index, T elem)
		if index == usedSlots and usedSlots < maxSize
			usedSlots = index + 1
		checkSlot(index)
		data[index] = elem

	override function add(T elem)
		usedSlots++
		checkSize(maxSize)
		data[usedSlots - 1] = elem

	override function add(int index, T elem)
		usedSlots++
		checkSize(maxSize)
		checkSlot(index)
		for i = usedSlots - 1 downto index + 1
			data[i] = data[i - 1]
		data[index] = elem

	override function remove(int index)
		checkSlot(index)
		usedSlots--
		checkSize(maxSize)
		for i = index to usedSlots - 1
			data[i] = data[i + 1]

	override function getIndex(T elem) returns int
		for i = 0 to usedSlots - 1
			if data[i] == elem
				return i
		return -1

/* Generic ArrayList data class with fixed specific array size */
class ArrayListSize256<T> extends ArrayListBase implements IArrayList<T>
	private let maxSize = 256
	private T array[maxSize] data

	override protected function initUsedSlots(int usedSlots)
		this.usedSlots = usedSlots
		checkSize(maxSize)

	override protected function initSetElem(int index, T elem)
		data[index] = elem

	override function getMaxSize() returns int
		return maxSize

	override function getUsedSlots() returns int
		return usedSlots

	override function getElem(int index) returns T
		checkSlot(index)
		return data[index]

	override function setElem(int index, T elem)
		if index == usedSlots and usedSlots < maxSize
			usedSlots = index + 1
		checkSlot(index)
		data[index] = elem

	override function add(T elem)
		usedSlots++
		checkSize(maxSize)
		data[usedSlots - 1] = elem

	override function add(int index, T elem)
		usedSlots++
		checkSize(maxSize)
		checkSlot(index)
		for i = usedSlots - 1 downto index + 1
			data[i] = data[i - 1]
		data[index] = elem

	override function remove(int index)
		checkSlot(index)
		usedSlots--
		checkSize(maxSize)
		for i = index to usedSlots - 1
			data[i] = data[i + 1]

	override function getIndex(T elem) returns int
		for i = 0 to usedSlots - 1
			if data[i] == elem
				return i
		return -1

/* Generic ArrayList data class with fixed specific array size */
class ArrayListSize512<T> extends ArrayListBase implements IArrayList<T>
	private let maxSize = 512
	private T array[maxSize] data

	override protected function initUsedSlots(int usedSlots)
		this.usedSlots = usedSlots
		checkSize(maxSize)

	override protected function initSetElem(int index, T elem)
		data[index] = elem

	override function getMaxSize() returns int
		return maxSize

	override function getUsedSlots() returns int
		return usedSlots

	override function getElem(int index) returns T
		checkSlot(index)
		return data[index]

	override function setElem(int index, T elem)
		if index == usedSlots and usedSlots < maxSize
			usedSlots = index + 1
		checkSlot(index)
		data[index] = elem

	override function add(T elem)
		usedSlots++
		checkSize(maxSize)
		data[usedSlots - 1] = elem

	override function add(int index, T elem)
		usedSlots++
		checkSize(maxSize)
		checkSlot(index)
		for i = usedSlots - 1 downto index + 1
			data[i] = data[i - 1]
		data[index] = elem

	override function remove(int index)
		checkSlot(index)
		usedSlots--
		checkSize(maxSize)
		for i = index to usedSlots - 1
			data[i] = data[i + 1]

	override function getIndex(T elem) returns int
		for i = 0 to usedSlots - 1
			if data[i] == elem
				return i
		return -1

/* Generic ArrayList data class with fixed specific array size */
class ArrayListSize1024<T> extends ArrayListBase implements IArrayList<T>
	private let maxSize = 1024
	private T array[maxSize] data

	override protected function initUsedSlots(int usedSlots)
		this.usedSlots = usedSlots
		checkSize(maxSize)

	override protected function initSetElem(int index, T elem)
		data[index] = elem

	override function getMaxSize() returns int
		return maxSize

	override function getUsedSlots() returns int
		return usedSlots

	override function getElem(int index) returns T
		checkSlot(index)
		return data[index]

	override function setElem(int index, T elem)
		if index == usedSlots and usedSlots < maxSize
			usedSlots = index + 1
		checkSlot(index)
		data[index] = elem

	override function add(T elem)
		usedSlots++
		checkSize(maxSize)
		data[usedSlots - 1] = elem

	override function add(int index, T elem)
		usedSlots++
		checkSize(maxSize)
		checkSlot(index)
		for i = usedSlots - 1 downto index + 1
			data[i] = data[i - 1]
		data[index] = elem

	override function remove(int index)
		checkSlot(index)
		usedSlots--
		checkSize(maxSize)
		for i = index to usedSlots - 1
			data[i] = data[i + 1]

	override function getIndex(T elem) returns int
		for i = 0 to usedSlots - 1
			if data[i] == elem
				return i
		return -1

/* Generic ArrayList data class with fixed specific array size */
class ArrayListSize2048<T> extends ArrayListBase implements IArrayList<T>
	private let maxSize = 2048
	private T array[maxSize] data

	override protected function initUsedSlots(int usedSlots)
		this.usedSlots = usedSlots
		checkSize(maxSize)

	override protected function initSetElem(int index, T elem)
		data[index] = elem

	override function getMaxSize() returns int
		return maxSize

	override function getUsedSlots() returns int
		return usedSlots

	override function getElem(int index) returns T
		checkSlot(index)
		return data[index]

	override function setElem(int index, T elem)
		if index == usedSlots and usedSlots < maxSize
			usedSlots = index + 1
		checkSlot(index)
		data[index] = elem

	override function add(T elem)
		usedSlots++
		checkSize(maxSize)
		data[usedSlots - 1] = elem

	override function add(int index, T elem)
		usedSlots++
		checkSize(maxSize)
		checkSlot(index)
		for i = usedSlots - 1 downto index + 1
			data[i] = data[i - 1]
		data[index] = elem

	override function remove(int index)
		checkSlot(index)
		usedSlots--
		checkSize(maxSize)
		for i = index to usedSlots - 1
			data[i] = data[i + 1]

	override function getIndex(T elem) returns int
		for i = 0 to usedSlots - 1
			if data[i] == elem
				return i
		return -1

/* Generic ArrayList data class with fixed specific array size */
class ArrayListSize4096<T> extends ArrayListBase implements IArrayList<T>
	private let maxSize = 4096
	private T array[maxSize] data

	override protected function initUsedSlots(int usedSlots)
		this.usedSlots = usedSlots
		checkSize(maxSize)

	override protected function initSetElem(int index, T elem)
		data[index] = elem

	override function getMaxSize() returns int
		return maxSize

	override function getUsedSlots() returns int
		return usedSlots

	override function getElem(int index) returns T
		checkSlot(index)
		return data[index]

	override function setElem(int index, T elem)
		if index == usedSlots and usedSlots < maxSize
			usedSlots = index + 1
		checkSlot(index)
		data[index] = elem

	override function add(T elem)
		usedSlots++
		checkSize(maxSize)
		data[usedSlots - 1] = elem

	override function add(int index, T elem)
		usedSlots++
		checkSize(maxSize)
		checkSlot(index)
		for i = usedSlots - 1 downto index + 1
			data[i] = data[i - 1]
		data[index] = elem

	override function remove(int index)
		checkSlot(index)
		usedSlots--
		checkSize(maxSize)
		for i = index to usedSlots - 1
			data[i] = data[i + 1]

	override function getIndex(T elem) returns int
		for i = 0 to usedSlots - 1
			if data[i] == elem
				return i
		return -1
/* Generic ArrayList data class with fixed specific array size */
class ArrayListSize8192<T> extends ArrayListBase implements IArrayList<T>
	private let maxSize = 8192
	private T array[maxSize] data

	override protected function initUsedSlots(int usedSlots)
		this.usedSlots = usedSlots
		checkSize(maxSize)

	override protected function initSetElem(int index, T elem)
		data[index] = elem

	override function getMaxSize() returns int
		return maxSize

	override function getUsedSlots() returns int
		return usedSlots

	override function getElem(int index) returns T
		checkSlot(index)
		return data[index]

	override function setElem(int index, T elem)
		if index == usedSlots and usedSlots < maxSize
			usedSlots = index + 1
		checkSlot(index)
		data[index] = elem

	override function add(T elem)
		usedSlots++
		checkSize(maxSize)
		data[usedSlots - 1] = elem

	override function add(int index, T elem)
		usedSlots++
		checkSize(maxSize)
		checkSlot(index)
		for i = usedSlots - 1 downto index + 1
			data[i] = data[i - 1]
		data[index] = elem

	override function remove(int index)
		checkSlot(index)
		usedSlots--
		checkSize(maxSize)
		for i = index to usedSlots - 1
			data[i] = data[i + 1]

	override function getIndex(T elem) returns int
		for i = 0 to usedSlots - 1
			if data[i] == elem
				return i
		return -1

/** A generic list based on dynamically sized arrays. */
public class ArrayList<T>
	private let minPossibleSize = 2
	private let maxPossibleSize = 8192
	private let growthFactor = 2
	private constant int minSize  // User defined min size for this instance
	private IArrayList<T> data

	construct()
		minSize = minPossibleSize
		data = createData(minSize)
	construct(int minSize)
		this.minSize = validizeSize(minSize)
		data = createData(this.minSize)

	ondestroy
		destroy data

	private function createData(int validatedSize) returns IArrayList<T>
		switch validatedSize
			case 2
				return new ArrayListSize2<T>()
			case 4
				return new ArrayListSize4<T>()
			case 8
				return new ArrayListSize8<T>()
			case 16
				return new ArrayListSize16<T>()
			case 32
				return new ArrayListSize32<T>()
			case 64
				return new ArrayListSize64<T>()
			case 128
				return new ArrayListSize128<T>()
			case 256
				return new ArrayListSize256<T>()
			case 512
				return new ArrayListSize512<T>()
			case 1024
				return new ArrayListSize1024<T>()
			case 2048
				return new ArrayListSize2048<T>()
			case 4096
				return new ArrayListSize4096<T>()
			case 8192
				return new ArrayListSize8192<T>()
		return null

	private function validizeSize(int newSize) returns int
		// Check if newSize is between the general valid boundaries:
		if newSize < 0
			Log.error("ERROR: Size of ArrayList has to be bigger or equal to 0")
		else if newSize > maxPossibleSize
			Log.error("ERROR: Size of ArrayList can't be bigger than " + maxPossibleSize.toString())
		// Evaluate min valid size:
		var validatedSize = minPossibleSize
		while newSize > validatedSize
			validatedSize *= growthFactor
		return validatedSize

	private function resize(int newSize)
		// Evaluate required resizing:
		var validatedSize = validizeSize(newSize)
		let maxSize = data.getMaxSize()
		if validatedSize * growthFactor * growthFactor <= maxSize
			validatedSize *= growthFactor  // Shrink size
		else if validatedSize <= maxSize
			return  // No resizing needed
		// Restrict resizing to user defined min size of this instance:
		if validatedSize < minSize
			validatedSize = minSize
		// Check if resizing is valid:
		let usedSlots = data.getUsedSlots()
		if validatedSize < usedSlots
			Log.error("ERROR: Can't resize ArrayList to " + validatedSize.toString() + " because it is smaller than the used slots " + usedSlots.toString())
		// Create new data with copied elements:
		let newData = createData(validatedSize)
		newData.initUsedSlots(usedSlots)
		for i = 0 to usedSlots - 1
			newData.initSetElem(i, data.getElem(i))
		// Replace old data:
		destroy data
		data = newData

	/* Get the current max size of the list. Only for testing/debugging. */
	protected function maxSize() returns int
		return data.getMaxSize()

	/** Get the current size of the list. */
	function size() returns int
		return data.getUsedSlots()

	/** Return whether the list is empty. */
	function isEmpty() returns bool
		return data.getUsedSlots() == 0

	/** Return whether the element exists in the list. */
	function has(T elem) returns bool
		return data.getIndex(elem) >= 0

	/** Get the element at the given index from this list. */
	function get(int index) returns T
		return data.getElem(index)

	/** Get the first element from this list. */
	function getFirst() returns T
		if isEmpty()
			return null
		return data.getElem(0)

	/** Get the last element from this list. */
	function getLast() returns T
		if isEmpty()
			return null
		return data.getElem(data.getUsedSlots() - 1)

	/** Equal to getLast function (available for compability). */
	function peek() returns T
		return getLast()

	/** Set an existing element at the given position to a new value. */
	function set(int index, T elem)
		data.setElem(index, elem)

	/** Set an existing element at the given position to a new value. Resizes with given null elements if necessary. */
	function setWithResize(int index, T elem, T nullElem)
		let usedSlots = data.getUsedSlots()
		if index - (usedSlots - 1) > 0
			// Resize if index is bigger than the current max array size:
			if index > data.getMaxSize() - 1
				resize(index + 1)
			// Add null elements:
			for i = usedSlots to index - 1
				data.setElem(i, nullElem)
		data.setElem(index, elem)

	/** Adds the given elements to the end of the list. */
	function add(vararg T elems)
		// Evaluate new size:
		var newSize = data.getUsedSlots()
		for _elem in elems
			newSize += 1
		// Resize if new size is bigger than the current max array size:
		if newSize > data.getMaxSize()
			resize(newSize)
		// Add new elements:
		for elem in elems
			data.add(elem)
	/** Adds the given element directly at the given index shifting the following elements towards the back. */
	function add(T elem, int index)
		// Resize if used slots already occupy the current max array size:
		let maxSize = data.getMaxSize()
		if data.getUsedSlots() >= maxSize
			resize(maxSize + 1)
		// Add new element:
		data.add(index, elem)

	/** Remove the first occurences of the given elements from this list. */
	function remove(vararg T elems)
		for elem in elems
			// Remove target element:
			data.remove(data.getIndex(elem))
		// Resize if used slots now would fit into array of smaller validized size:
		resize(data.getUsedSlots())

	/** Remove the element at the given index. */
	function removeByIndex(int index)
		// Remove target element:
		data.remove(index)
		// Resize if used slots now would fit into array of smaller validized size:
		resize(data.getUsedSlots())

	/** Replaces the first occurence of 'whichElement' with 'newElement'. */
	function replace(T whichElement, T newElement) returns bool
		let index = data.getIndex(whichElement)
		if index < 0
			return false
		data.setElem(index, newElement)
		return true

	/** Remove all elements from this list without destroying it. */
	function clear()
		destroy data
		data = createData(minPossibleSize)

	/** Get an iterator for this list. */
	function iterator() returns ALIterator<T>
		return new ALIterator(this)

	/** Get an iterator for this list that ignores given null elements. */
	function iteratorIgnoreNull(T nullElem) returns ALIteratorIgnoreNull<T>
		return new ALIteratorIgnoreNull(this, nullElem)

/** Iterator class for ArrayList. */
public class ALIterator<T>
	protected int i = 0
	protected ArrayList<T> list

	construct(ArrayList<T> list)
		this.list = list
	private construct()  // Needed because generic variables can't be passed in super call

	function hasNext() returns bool
		return i < list.size()

	function lookahead() returns T
		T retVal = null
		if hasNext()
			retVal = list.get(i)
		return retVal

	function next() returns T
		// Change to next element:
		i++
		// Return element:
		return list.get(i - 1)

	function remove()

	function close()
		destroy this

/** Iterator class for ArrayList that ignores given null elements. */
public class ALIteratorIgnoreNull<T> extends ALIterator<T>
	private T nullElem

	construct(ArrayList<T> list, T nullElem)
		super()
		this.list = list  // Needed because generic variables can't be passed in super call
		this.nullElem = nullElem
		// Skip null entries:
		let size = list.size()
		while i < size and list.get(i) == nullElem
			i++

	override function next() returns T
		// Change to next element:
		i++
		let nextValue = list.get(i - 1)
		// Skip null entries:
		let size = list.size()
		while i < size and list.get(i) == nullElem
			i++
		// Return element:
		return nextValue


// --------------------
// Test code
// --------------------

@Test public function testArrayList_CreateAndSize()
	let testName = "testArrayList_CreateAndSize"
	// Create new list and check sizes:
	ArrayList<int> a = new ArrayList<int>(4)
	a.maxSize().assertEquals(testName, 4)
	a.size().assertEquals(testName, 0)
	a.has(5).assertFalse(testName)
	// Add entry and check sizes:
	a.add(5)
	a.maxSize().assertEquals(testName, 4)
	a.size().assertEquals(testName, 1)
	a.has(5).assertTrue(testName)
	a.getLast().assertEquals(testName, 5)
	// Create another list and check sizes:
	var b = new ArrayList<int>(5)
	b.maxSize().assertEquals(testName, 8)
	b.size().assertEquals(testName, 0)
	// Add entry and check sizes:
	b.add(7)
	b.size().assertEquals(testName, 1)
	b.getFirst().assertEquals(testName, 7)
	b.getLast().assertEquals(testName, 7)
	b.peek().assertEquals(testName, 7)
	testDebug(useTestName(testName), "Following test has to fail for working testing functionality")
	b.getLast().assertEquals(testName, 6)  // TEST: should be wrong (check for working testing functionality)

@Test public function testArrayList_AddAndRemove()
	let testName = "testArrayList_AddAndRemove"
	string usedTestName
	// Create and check empty list:
	var a = new ArrayList<int>(4)
	usedTestName = useTestName(testName)
	if a.isEmpty() != true
		testFail(usedTestName, "Test failed")
	// Add entry and check content:
	a.add(5)
	if a.isEmpty() != false
		testFail(usedTestName, "Test failed")
	usedTestName = useTestName(testName)
	if a.get(0) != 5
		testFail(usedTestName, "Test failed")
	// Add another entry and check content:
	a.add(8)
	usedTestName = useTestName(testName)
	if a.get(1) != 8
		testFail(usedTestName, "Test failed")
	// Add another entry and check content:
	a.add(7)
	usedTestName = useTestName(testName)
	if a.get(2) != 7
		testFail(usedTestName, "Test failed")
	// Remove by index and check content:
	a.removeByIndex(1)
	usedTestName = useTestName(testName)
	if a.get(1) != 7
		testFail(usedTestName, "Test failed")
	// Add and remove duplicate entry and check content:
	a.add(5)
	a.remove(5)
	usedTestName = useTestName(testName)
	if a.get(1) != 5
		testFail(usedTestName, "Test failed")
	// Replace entry and check content:
	a.replace(5, 3)
	if a.get(1) != 3
		testFail(usedTestName, "Test failed")
	// Set entry and check content:
	a.set(0, 4)
	usedTestName = useTestName(testName)
	if a.get(0) != 4
		testFail(usedTestName, "Test failed")

@Test public function testArrayList_Resizing()
	let testName = "testArrayList_Resizing"
	// Create and check dynamic list:
	var a = new ArrayList<int>()
	a.maxSize().assertEquals(testName, 2)
	a.size().assertEquals(testName, 0)
	// Add entries and check max size:
	a.add(1)
	a.isEmpty().assertFalse(testName)
	a.add(2)
	a.maxSize().assertEquals(testName, 2)
	a.add(3)
	a.maxSize().assertEquals(testName, 4)
	a.add(4)
	a.add(5)
	a.maxSize().assertEquals(testName, 8)
	a.getFirst().assertEquals(testName, 1)
	a.getLast().assertEquals(testName, 5)
	// Remove entries and check sizes:
	a.remove(2)
	a.maxSize().assertEquals(testName, 8)
	a.size().assertEquals(testName, 4)
	a.remove(4)
	a.remove(5)
	a.maxSize().assertEquals(testName, 4)
	a.size().assertEquals(testName, 2)
	// Clear entries and check sizes:
	a.clear()
	a.maxSize().assertEquals(testName, 2)
	a.size().assertEquals(testName, 0)

@Test public function testArrayList_Iterating()
	let testName = "testArrayList_Iterating"
	// Create and fill list:
	var a = new ArrayList<int>(8)
	a.add(1, 2, 3, 4, 5, 6, 7)
	a.get(4).assertEquals(testName, 5)
	// Iterate through list and check:
	int i = 1
	for value in a
		value.assertEquals(testName, i)
		i++
	// Iterate through iterator and check:
	i = 1
	var iteratorA = a.iterator()
	for value from iteratorA
		value.assertEquals(testName, i)
		i++
	iteratorA.close()
	// Step through iterator and check:
	iteratorA = a.iterator()
	iteratorA.next().assertEquals(testName, 1)
	iteratorA.lookahead().assertEquals(testName, 2)
	iteratorA.next().assertEquals(testName, 2)
	iteratorA.next().assertEquals(testName, 3)
	iteratorA.lookahead().assertEquals(testName, 4)
	iteratorA.close()
	// Step through string iterator with null entries and check:
	var b = new ArrayList<string>(9)
	b.add(null, "a", "b", null, "d", null, null, "g", null)
	b.get(2).assertEquals(testName, "b")
	b.get(3).assertEquals(testName, null)
	b.get(4).assertEquals(testName, "d")
	var iteratorB = b.iteratorIgnoreNull(null)
	iteratorB.next().assertEquals(testName, "a")
	iteratorB.next().assertEquals(testName, "b")
	iteratorB.next().assertEquals(testName, "d")
	iteratorB.next().assertEquals(testName, "g")
	iteratorB.hasNext().assertFalse(testName)
	iteratorB.close()
	// Step through int iterator with null entries and check:
	var c = new ArrayList<int>(8)
	c.add(1, 0, 3, 4, 0, 0, 7)
	c.get(0).assertEquals(testName, 1)
	c.get(1).assertEquals(testName, 0)
	c.get(2).assertEquals(testName, 3)
	var iteratorC = c.iteratorIgnoreNull(0)
	iteratorC.next().assertEquals(testName, 1)
	iteratorC.next().assertEquals(testName, 3)
	iteratorC.next().assertEquals(testName, 4)
	iteratorC.hasNext().assertTrue(testName)
	iteratorC.next().assertEquals(testName, 7)
	iteratorC.hasNext().assertFalse(testName)
	iteratorC.close()

@Test public function testArrayList_SetWithResize()
	let testName = "testArrayList_SetWithResize"
	// Set element with resize and check:
	var a = new ArrayList<int>(4)
	a.add(1, 2, 3)
	a.setWithResize(6, 7, 0)
	a.get(0).assertEquals(testName, 1)
	a.get(2).assertEquals(testName, 3)
	a.get(3).assertEquals(testName, 0)
	a.get(4).assertEquals(testName, 0)
	a.get(6).assertEquals(testName, 7)
	a.size().assertEquals(testName, 7)