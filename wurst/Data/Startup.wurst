/*-------------------------------------------------------------
// Version number:
1.0.0

// Description:
Initializes startup processes.

// Changelog:
- 1.0.0:
Initial version.
-------------------------------------------------------------*/
package Startup
import ConstantData
import ClosureTimers
import StorageSystem
import Stock
import SettlementSystem
import WorldGenerationSystem
import LoadStatusSystem
import ComputationControl


// --------------------
// Data code
// --------------------

// General:
let USER_PLAYER = Player(0)

// Player units:
let START_VEC = vec2(-6144., -7680.)
let START_PEASANT_COUNT = 5
let START_WOOD_COUNT_PER_PEASANT = 5


// --------------------
// Functional code
// --------------------

function runStartup()
	SetMusicVolume(0)  // DEBUG: only for development
	// Create terrain:
	startInitStatus("Initialisation", 3, "Terrain creation")
	generateTerrain()
	forceComputationBreak()
	// Create plants:
	newInitStatus("Plants creation")
	generatePlants()
	forceComputationBreak()
	// Create player units:
	newInitStatus("Player units creation")
	let settlementCentre = createUnit(USER_PLAYER, UnitIdsCustom.AoW.townHall, START_VEC, angle(225.))
	settlementCentre.tryAddSettlement()
	for i = 1 to START_PEASANT_COUNT
		let u = createUnit(USER_PLAYER, UnitIdsCustom.AoW.peasant, START_VEC, angle(0.))
		nullTimer() ->
			u.tryAddToSettlement(settlementCentre)
			let storage = u.getStorage()
			if storage != null
				storage.addWare(ware(WareType.WOOD, START_WOOD_COUNT_PER_PEASANT))
	createUnit(USER_PLAYER, UnitIdsCustom.AoW.footman, START_VEC, angle(0.)).tryAddToSettlement(settlementCentre)
	// Initialisation finished:
	newInitStatus(null)

init
	// Use a trigger to allow the use of computation breaks:
	CreateTrigger()
	..addAction(function runStartup)
	..execute()