/*-------------------------------------------------------------
// Version number:
1.0.0

// Description:
Stores home buildings and its inhabitants.

// Changelog:
- 1.0.0:
Initial version.
-------------------------------------------------------------*/
package HomeSystem
import ConstantDataSystem
import UnitMap
import UtilityFunctions
import MultiboardPrioritySystem
import UnitIndexer
import OnUnitEnterLeave
import Icons
import RegisterEvents


// --------------------
// Data code
// --------------------

let INHABITANTS_ICON_PATH = Icons.bTNSnazzyScroll

/** Returns if the given unit type can inhabit the given building type. */
function isInhabitantable(int unitId, int buildingId) returns bool
	switch buildingId
		case UnitIdsCustom.AoW.peasantHouse
			switch unitId
				case UnitIdsCustom.AoW.peasant
					return true
				case UnitIdsCustom.AoW.peasantGirl
					return true
	return false

/** Returns the maximum allowed amount of inhabitants for the given building type. */
public function getMaxInhabitants(int buildingId) returns int
	switch buildingId
		case UnitIdsCustom.AoW.peasantHouse
			return 5
	return 0


// --------------------
// Functional code
// --------------------

let HOME_MAP = new IterableUnitHashMap<Home>(null)

public class Home
	private unit user
	private group inhabitants

	construct(unit home)
		user = home
		inhabitants = CreateGroup()

	ondestroy
		for inhabitant in inhabitants
			inhabitant.show()
		inhabitants.destr()

	function getUnit() returns unit
		return user

	function getInhabitantCount() returns int
		return inhabitants.size()

	function isValidInhabitantType(int unitId) returns bool
		return isInhabitantable(unitId, user.getUnitId())

	function isInhabitant(unit inhabitant) returns bool
		return inhabitants.contains(inhabitant)

	function addInhabitant(unit inhabitant)
		if inhabitants.contains(inhabitant) == false and inhabitants.size() < getMaxInhabitants(user.getUnitId())
			inhabitants.addUnit(inhabitant)
		else
			Log.error("ERROR: Can't add inhabitant to this home")

	function removeInhabitant(unit inhabitant)
		if inhabitants.contains(inhabitant)
			inhabitants.removeUnit(inhabitant)
		else
			Log.error("ERROR: Can't remove inhabitant from this home")


function unit.addHome()
	if HOME_MAP.has(this) == false and getMaxInhabitants(this.getUnitId()) > 0.
		HOME_MAP.put(this, new Home(this))

function unit.removeHome()
	let home = HOME_MAP.tryRemove(this)
	if home != null
		destroy home

/** Returns the home of given unit. */
public function unit.getHome() returns Home
	return HOME_MAP.tryGet(this)

/** Sets system relevant infos for given object in target multiboard. */
public function multiboard.setObjectInfoMultiboard(Home h) returns bool
	this.addMultiboardLine("Home:", HEADLINE_ICON_PATH)
	this.addMultiboardLine("Inhabitants: " + h.getInhabitantCount().toString(), INHABITANTS_ICON_PATH)
	return true

init
	// Add home to every appropriate new unit:
	onEnter() ->
		getEnterLeaveUnit().addHome()
	// Remove home from every appropriate removed unit:
	onUnitDeindex() ->
		getIndexingUnit().removeHome()
	// Register construction finishes:
	registerPlayerUnitEvent(EVENT_PLAYER_UNIT_UPGRADE_FINISH) ->
		GetTriggerUnit().addHome()