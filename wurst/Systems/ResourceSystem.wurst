/*-------------------------------------------------------------
// Version number:
1.01

// Description:
Gives predefined unit types resources wares that can be extracted by workers via the harvest ability.

// Changelog:
- 1.01:
Initial version.
-------------------------------------------------------------*/
package ResourceSystem
import RegisterEvents
import LinkedList
import HashMap
import ConstantDataSystem
import MultiboardPrioritySystem
import StorageSystem
import UtilityFunctions
import OnUnitEnterLeave


// --------------------
// Data code
// --------------------

let countPlayers = 12  // Highest player slot in use
let infoMsgTime = 2.

function getDefaultInitWares(int unitId) returns LinkedList<ware>
	var wares = new LinkedList<ware>()
	switch unitId
		case UnitIdsCustom.beech
			wares.add(ware(WareType.Wood, GetRandomInt(6, 8)))
		case UnitIdsCustom.birch
			wares.add(ware(WareType.Wood, GetRandomInt(4, 6)))
		case UnitIdsCustom.greyOak
			wares.add(ware(WareType.Wood, GetRandomInt(6, 8)))
		case UnitIdsCustom.chestnut
			wares.add(ware(WareType.Wood, GetRandomInt(4, 6)))
	return wares

function isKilledWhenDepleted(int unitId) returns bool
	switch unitId
		case UnitIdsCustom.beech
			return true
		case UnitIdsCustom.birch
			return true
		case UnitIdsCustom.greyOak
			return true
		case UnitIdsCustom.chestnut
			return true
		default
			return false

function getWorkProgressPerHarvest(int workerUnitId, int resourceUnitId) returns real
	switch resourceUnitId
		case UnitIdsCustom.beech
			switch workerUnitId
				case UnitIdsCustom.peasant
					return 0.67
			return 0.5
		case UnitIdsCustom.birch
			return 0.5
		case UnitIdsCustom.greyOak
			return 0.5
		case UnitIdsCustom.chestnut
			return 0.5
		default
			return 0.

function getWaresPerFinishedWork(int unitId) returns LinkedList<ware>
	var wares = new LinkedList<ware>()
	switch unitId
		case UnitIdsCustom.beech
			wares.add(ware(WareType.Wood, 1))
		case UnitIdsCustom.birch
			wares.add(ware(WareType.Wood, 1))
		case UnitIdsCustom.greyOak
			wares.add(ware(WareType.Wood, 1))
		case UnitIdsCustom.chestnut
			wares.add(ware(WareType.Wood, 1))
	return wares
			
	
// --------------------
// Functional code
// --------------------

let resourceMap = new HashMap<unit, Resource>  // TODO: maybe make a general unit to class hash map system with corresponding utility functions

class Resource
	private unit resourceUnit
	private bool isKilledWhenDepleted
	private real workProgress
	private LinkedList<ware> wares

	construct(unit resourceUnit, bool isKilledWhenDepleted, LinkedList<ware> initWares)
		this.resourceUnit = resourceUnit
		this.isKilledWhenDepleted = isKilledWhenDepleted
		workProgress = 0.
		wares = initWares

	ondestroy
		destroy wares

	function getWare(int index) returns ware
		if index >= wares.size()
			Log.error("ERROR: Index has to be smaller than list size")
		return wares.get(index)
		
	function getAmountOfWareTypes() returns int
		return wares.size()

	function getWareCount(WareType wareType) returns int
		for iWare in wares
			if iWare.wareType == wareType
				return iWare.count
		return 0
	
	function removeWare(ware ware)
		for iWare in wares
			if iWare.hasSameType(ware)
				if iWare.count <= ware.count
					wares.remove(iWare)
				else
					wares.replace(iWare, iWare.changedCopy(-ware.count))

	function work(real workProgress) returns bool
		this.workProgress += workProgress
		if this.workProgress >= 1.
			this.workProgress -= 1.
			return true
		else
			return false

	function checkForDepletionKill() returns bool
		if isKilledWhenDepleted and wares.isEmpty()
			return true
		return false


function addResource(unit targetUnit)
	if resourceMap.has(targetUnit) == false
		var unitType = getUnitId(targetUnit)
		var wares = getDefaultInitWares(unitType)
		if wares.isEmpty()
			destroy wares
		else
			var resource = new Resource(targetUnit, isKilledWhenDepleted(unitType), wares)
			resourceMap.put(targetUnit, resource)
	
function removeResource(unit targetUnit)
	if resourceMap.has(targetUnit)
		destroy resourceMap.get(targetUnit)
		resourceMap.remove(targetUnit)

/** Returns the resource of given unit */
public function getResource(unit targetUnit) returns Resource
	if resourceMap.has(targetUnit)
		return resourceMap.get(targetUnit)
	else
		return null

/** Returns true if the harvest was valid */
public function harvest(unit workerUnit, unit targetUnit) returns bool
	var storage = getStorage(workerUnit)
	var resource = getResource(targetUnit)
	// Check if source and target are valid:
	if storage == null or resource == null
		printTimedToPlayer("Invalid harvest target", infoMsgTime, workerUnit.getOwner())
		return false
	// Check if wares can be harvested:
	if storage.getFreeCapacity() <= 0
		printTimedToPlayer("No free storage to harvest", infoMsgTime, workerUnit.getOwner())
		return false
	else if resource.getAmountOfWareTypes() <= 0
		printTimedToPlayer("Harvest target is already depleted", infoMsgTime, workerUnit.getOwner())
		return false
	else
		let resourceUnitId = getUnitId(targetUnit)
		// Work resource:
		if resource.work(getWorkProgressPerHarvest(getUnitId(workerUnit), resourceUnitId))
			// Transfere wares:
			let wares = getWaresPerFinishedWork(resourceUnitId)
			for ware in wares
				// Check resource count:
				let resourceWareCount = resource.getWareCount(ware.wareType)
				if resourceWareCount > 0
					// Limit by resource count:
					if resourceWareCount < ware.count
						ware.count = resourceWareCount
					// Add ware to storage:
					var excess = storage.addWare(ware)
					// Remove ware from resource:
					if excess < ware.count
						ware.count -= excess
						resource.removeWare(ware)
			destroy wares
			// Check for resource depletion:
			if resource.checkForDepletionKill()
				targetUnit.kill()
		return true

/** Sets system relevant infos for given object in target multiboard */
public function setObjectInfoMultiboard(multiboard targetMultiboard, Resource resource) returns bool
	addMultiboardLine(targetMultiboard, "Resource:", BaseIconType.Headline.getIconPath())
	for i = 0 to (resource.getAmountOfWareTypes() - 1)
		var ware = resource.getWare(i)
		addMultiboardLine(targetMultiboard, ware.count.toString() + " " + ware.toString(true), ware.getIconPath())
	return true
	
init
	// Add resource to every appropriate new unit:
	onEnter() -> 
		addResource(getEnterLeaveUnit())
	// Remove resource from every appropriate removed unit:
	onLeave() -> 
		removeResource(getEnterLeaveUnit())
	// Register harvest spell:
	registerPlayerUnitEvent(EVENT_PLAYER_UNIT_SPELL_CAST) ->
		if GetSpellAbilityId() == AbilityIdsCustom.harvest
			let worker = GetTriggerUnit()
			if harvest(worker, GetSpellTargetUnit()) == false
				worker.abortOrder()