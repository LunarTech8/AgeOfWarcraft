/*-------------------------------------------------------------
// Version number:
1.0.0

// Description:
Contains all data of persons like name, home, workplace, etc.
Monitors basic values like sleep and food.
Handles the automatizations based on the data and basic values.

// Changelog:
- 1.0.0:
Initial version.
-------------------------------------------------------------*/
package PersonSystem
import ConstantData
import MultiboardPrioritySystem
import Icons
import UnitMap
import ErrorHandling
import ClosureTimers
import UtilityFunctions
import WorkplaceSystem
import HomeSystem
import WorkshopSystem
import BuildingSystem
import GatherplaceSystem
import DepositorySystem
import InstantDummyCaster
import UnitTest
import DamageEvent
import UnitIndexer
import RegisterEvents
import Unit_Peasant


// --------------------
// Data code
// --------------------

let FOOD_ICON_PATH = Icons.bTNMonsterLure
let SLEEP_ICON_PATH = Icons.bTNSleep
let HOME_ICON_PATH = Icons.bTNFarm
let WORKPLACE_ICON_PATH = Icons.bTNWorkshop

let MAX_FOOD = 100.
let MAX_SLEEP = 100.
let MAX_DAYS_NO_FOOD = 4. // Max days of no food before person dies of starvation
let MAX_DAYS_NO_SLEEP = 3.  // Max days of no sleep before person falls asleep on the ground
let DAYS_TILL_EXHAUSTED = 1.  // Days of no sleep before person gets exhausted by sleep deprivation
let STATS_ADJUSTMENT_RATE = INGAME_DAY_DURATION / 24.
let SLEEP_BOOST_BY_DAMAGE = 2 * (MAX_SLEEP / MAX_DAYS_NO_SLEEP) * (STATS_ADJUSTMENT_RATE / INGAME_DAY_DURATION)  // Adrenalin boost by taking damage

var surnameCounter = 0

function isPersonType(int unitId) returns bool
	switch unitId
		case UnitIdsCustom.AoW.peasant
			return true
		case UnitIdsCustom.AoW.footman
			return true
		default
			return false

/** Returns the sleep rate per day for the given building type. */
function getSleepRate(int buildingUnitId) returns real
	switch buildingUnitId
		case 0  // Outside on the ground
			return (MAX_SLEEP / MAX_DAYS_NO_SLEEP) * (24 / 10)
		case UnitIdsCustom.AoW.peasantHouse
			return (MAX_SLEEP / MAX_DAYS_NO_SLEEP) * (24 / 6)
		default
			error("Unregistered buildingUnitId + (" + buildingUnitId.toString() + ") for sleeping")
			return 0.

function getRandomForename() returns string
	let i = GetRandomInt(1, 4)
	switch i
		case 1
			return "Peter"
		case 2
			return "Hans"
		case 3
			return "Theodor"
		case 4
			return "Michael"
		default
			error("Wrong configuration for getRandomForename")
			return null

function getRandomSurname() returns string
	surnameCounter++
	if surnameCounter > 23
		surnameCounter = 1
	switch surnameCounter
		// Source: https://en.wiktionary.org/wiki/Category:English_surnames_from_Old_English
		case 1
			return "Abram"
		case 2
			return "Acker"
		case 3
			return "Acton"
		case 4
			return "Addington"
		case 5
			return "Adley"
		case 6
			return "Ainsley"
		case 7
			return "Ainsworth"
		case 8
			return "Alby"
		case 9
			return "Allerton"
		case 10
			return "Alston"
		case 11
			return "Altham"
		case 12
			return "Alton"
		case 13
			return "Anderton"
		case 14
			return "Ansley"
		case 15
			return "Anstey"
		case 16
			return "Appleton"
		case 17
			return "Asheton"
		case 18
			return "Ashley"
		case 19
			return "Ashton"
		case 20
			return "Astley"
		case 21
			return "Atherton"
		case 22
			return "Atterton"
		case 23
			return "Axton"
		default
			error("Wrong configuration for getRandomSurname")
			return null


// --------------------
// Functional code
// --------------------

let PERSON_MAP = new IterableUnitHashMap<Person>(null)

public class Person
	private unit user
	private string name
	private unit enteredBuilding
	protected real food
	protected real sleep
	protected real sleepRate
	protected Home home
	protected Workplace workplace

	construct(unit person, string name)
		user = person
		this.name = name
		enteredBuilding = null
		food = MAX_FOOD
		sleep = MAX_SLEEP
		sleepRate = 0.
		home = null
		workplace = null

	private function sleep(int buildingUnitId)
		if isSleeping() == true
			error("Person is already sleeping")
		sleepRate = getSleepRate(buildingUnitId)

	protected function reduceStats() returns bool
		// Adjust food:
		food -= (MAX_FOOD / MAX_DAYS_NO_FOOD) * (STATS_ADJUSTMENT_RATE / INGAME_DAY_DURATION)
		food = min(food, MAX_FOOD)
		// Adjust sleep:
		sleep -= (MAX_SLEEP / MAX_DAYS_NO_SLEEP) * (STATS_ADJUSTMENT_RATE / INGAME_DAY_DURATION)
		sleep += sleepRate * (STATS_ADJUSTMENT_RATE / INGAME_DAY_DURATION)
		sleep = min(sleep, MAX_SLEEP)
		if sleep <= 0. and isSleeping() == false
			if isInBuilding()
				leaveBuilding()
			InstantDummyCaster.castTarget(null, AbilityIdsCustom.addSleepingBuff, 1, AbilityIdsCustom.addSleepingBuff.getAbilityOrder(), user)
			sleep(0)
		else if sleep >= MAX_SLEEP
			if home != null and enteredBuilding == home.getUnit()
				leaveBuilding()
			else
				user.removeAbility(BuffIdsCustom.sleeping)
				sleepRate = 0.
		if sleep <= MAX_SLEEP * (1 - DAYS_TILL_EXHAUSTED / MAX_DAYS_NO_SLEEP) and user.hasAbility(BuffIdsCustom.exhausted) == false
			InstantDummyCaster.castTarget(null, AbilityIdsCustom.addExhaustedBuff, 1, AbilityIdsCustom.addExhaustedBuff.getAbilityOrder(), user)
		else if sleep > MAX_SLEEP * (1 - DAYS_TILL_EXHAUSTED / MAX_DAYS_NO_SLEEP) and user.hasAbility(BuffIdsCustom.exhausted)
			user.removeAbility(BuffIdsCustom.exhausted)
		return food <= 0.

	protected function awake()
		if isSleeping() == false
			error("Person is already awake")
		sleepRate = 0.

	function isSleeping() returns bool
		return sleepRate > 0.

	function isInBuilding() returns bool
		return enteredBuilding != null

	function getName() returns string
		return name

	function getUnit() returns unit
		return user

	function getEnteredBuilding() returns unit
		return enteredBuilding

	function getWorkplaceBuilding() returns unit
		if this.workplace != null
			return workplace.getUnit()
		return null

	function setHomeBuilding(Home home)
		if this.home != null
			this.home.removeInhabitant(user)
		if home != null
			home.addInhabitant(user)
		this.home = home

	function setWorkplaceBuilding(Workplace workplace)
		if this.workplace != null
			this.workplace.removeWorker(user)
		if workplace != null
			workplace.addWorker(user)
		this.workplace = workplace

	function enterBuilding(unit building)
		if isInBuilding()
			error("Person is already in a building")
		let targetHome = building.getHome()
		let targetWorkplace = building.getWorkplace()
		if targetHome != null and targetHome == home
			sleep(building.getUnitId())
		else if targetWorkplace instanceof Workshop and targetWorkplace == workplace
			(targetWorkplace castTo Workshop).enterBuilding(user)
		else if targetWorkplace instanceof Depository and targetWorkplace == workplace
			DoNothing()
		else
			error("Unrecognized building type to enter (" + building.getName() + ")")
		enteredBuilding = building
		user.hide()

	function leaveBuilding()
		if isInBuilding() == false
			error("Person is not in a building")
		let targetHome = enteredBuilding.getHome()
		let targetWorkplace = enteredBuilding.getWorkplace()
		if targetHome != null and targetHome == home
			awake()
		else if targetWorkplace instanceof Workshop and targetWorkplace == workplace
			(targetWorkplace castTo Workshop).leaveBuilding(user)
		else if targetWorkplace instanceof Depository and targetWorkplace == workplace
			DoNothing()
		else
			error("Unrecognized building type to leave (" + enteredBuilding.getName() + ")")
		enteredBuilding = null
		user.show()


function getRandomName() returns string
	return getRandomForename() + " " + getRandomSurname()

function Home.removePersons()
	let inhabitants = this.getInhabitants()
	for inhabitant from inhabitants
		let person = inhabitant.getPerson()
		if person != null
			if person.getEnteredBuilding() == this.getUnit()
				person.leaveBuilding()
			person.setHomeBuilding(null)
	inhabitants.destr()
function Workplace.removePersons()
	let workers = this.getWorkers()
	for worker from workers
		let person = worker.getPerson()
		if person != null
			if person.getEnteredBuilding() == this.getUnit()
				person.leaveBuilding()
			person.setWorkplaceBuilding(null)
	workers.destr()


function unit.addPerson(string name)
	if PERSON_MAP.has(this) == false
		if isPersonType(GetUnitTypeId(this))
			let person = new Person(this, name)
			PERSON_MAP.put(this, person)

function unit.removePerson()
	let person = PERSON_MAP.tryRemove(this)
	if person != null
		destroy person

/** Returns the workplace of given unit. */
public function unit.getWorkplace() returns Workplace
	Workplace workplace
	workplace = this.getBuildingSite()
	if workplace != null
		return workplace
	workplace = this.getWorkshop()
	if workplace != null
		return workplace
	workplace = this.getGatherplace()
	if workplace != null
		return workplace
	workplace = this.getDepository()
	if workplace != null
		return workplace
	return null

/** Returns an unemployed person fitting to this workplace from given unit group. */
public function Workplace.getUnemployedFromGroup(group source) returns Person
	Person person = null
	for iUnit from source
		person = iUnit.getPerson()
		if person != null and person.getWorkplaceBuilding() == null and this.isValidWorkerType(iUnit.getUnitId())
			break
		person = null
	source.destr()
	return person

/** Returns the person of given unit. */
public function unit.getPerson() returns Person
	return PERSON_MAP.tryGet(this)

/** Sets system relevant infos for given object in target multiboard. */
public function multiboard.setObjectInfoMultiboard(Person p) returns bool
	this.addMultiboardLine("Person: " + p.getName(), HEADLINE_ICON_PATH)
	this.addMultiboardLine("Food: " + p.food.toString(), FOOD_ICON_PATH)
	this.addMultiboardLine("Sleep: " + p.sleep.toString(), SLEEP_ICON_PATH)
	if p.home != null
		this.addMultiboardLine("Home: " + p.home.getUnit().getName(), HOME_ICON_PATH)
	if p.workplace != null
		this.addMultiboardLine("Workplace: " + p.workplace.getUnit().getName(), WORKPLACE_ICON_PATH)
	return true

init
	// Add person to every appropriate new unit:
	onUnitIndex(() -> getIndexingUnit().addPerson(getRandomName()))
	// Remove person from every appropriate removed unit:
	onUnitDeindex(() -> getIndexingUnit().removePerson())
	registerPlayerUnitEvent(EVENT_PLAYER_UNIT_DEATH, () -> GetTriggerUnit().removePerson())
	// Register death of homes and workplaces:
	registerPlayerUnitEvent(EVENT_PLAYER_UNIT_DEATH) ->
		let killedUnit = GetTriggerUnit()
		let targetHome = killedUnit.getHome()
		let targetWorkplace = killedUnit.getWorkplace()
		if targetHome != null
			targetHome.removePersons()
		else if targetWorkplace != null
			targetWorkplace.removePersons()
	// Reduce stats:
	doPeriodically(STATS_ADJUSTMENT_RATE) cb ->
		for person in PERSON_MAP
			if person != null and PERSON_MAP.get(person).reduceStats()
				// person.kill()  // DEBUG: for testing deactivated
	// Register attacks on sleeping persons:
	DamageEvent.addListener() ->
		let targetPerson = DamageEvent.getTarget().getPerson()
		if targetPerson != null and targetPerson.isSleeping()
			targetPerson.sleep += SLEEP_BOOST_BY_DAMAGE
			targetPerson.awake()


// --------------------
// Test code
// --------------------

public function testPersonSystem_StatsAndBuildings(vec2 testCentre)
	let testName = setTestName("testPersonSystem_StatsAndBuildings", true)
	// Create person and reduce stats:
	let unitA = createUnit(Settings.USER_PLAYER, UnitIdsCustom.AoW.peasant, testCentre, angle(0))
	let personA = unitA.getPerson()
	personA.reduceStats()
	personA.reduceStats()
	personA.reduceStats()
	personA.reduceStats()
	personA.food.assertEquals(testName, MAX_FOOD * (1 - 4 * STATS_ADJUSTMENT_RATE / (MAX_DAYS_NO_FOOD * INGAME_DAY_DURATION)), 0.001)
	personA.sleep.assertEquals(testName, MAX_SLEEP * (1 - 4 * STATS_ADJUSTMENT_RATE / (MAX_DAYS_NO_SLEEP * INGAME_DAY_DURATION)), 0.001)
	// Check home building and sleep:
	let unitB = createHomeBuilding(Settings.USER_PLAYER, UnitIdsCustom.AoW.peasantHouse, testCentre, angle(0))
	let unitC = createHomeBuilding(Settings.USER_PLAYER, UnitIdsCustom.AoW.peasantHouse, testCentre, angle(0))
	let homeA = unitB.getHome()
	let homeB = unitC.getHome()
	personA.setHomeBuilding(homeA)
	homeA.isInhabitant(unitA).assertTrue(testName)
	personA.setHomeBuilding(homeB)
	homeA.isInhabitant(unitA).assertFalse(testName)
	homeB.isInhabitant(unitA).assertTrue(testName)
	personA.isSleeping().assertFalse(testName)
	personA.enterBuilding(unitC)
	personA.isSleeping().assertTrue(testName)
	personA.sleepRate.assertEquals(testName, getSleepRate(unitC.getUnitId()))
	personA.reduceStats()
	personA.sleep.assertEquals(testName, MAX_SLEEP * (1 - 5 * STATS_ADJUSTMENT_RATE / (MAX_DAYS_NO_SLEEP * INGAME_DAY_DURATION)) + getSleepRate(unitC.getUnitId()) * (STATS_ADJUSTMENT_RATE / INGAME_DAY_DURATION), 0.001)
	// Check max sleep limit:
	personA.sleep.assertEquals(testName, (MAX_SLEEP / MAX_DAYS_NO_SLEEP) * (MAX_DAYS_NO_SLEEP + (4 - 5) * (STATS_ADJUSTMENT_RATE / INGAME_DAY_DURATION)), 0.001)
	assertEquals(testName, personA.getEnteredBuilding(), unitC)
	personA.isSleeping().assertTrue(testName)
	personA.reduceStats()
	personA.sleep.assertEquals(testName, MAX_SLEEP)
	assertEquals(testName, personA.getEnteredBuilding(), null)
	personA.isSleeping().assertFalse(testName)
	testFinish(testName)
	// Remove test units:
	unitA.kill()
	unitA.remove()
	unitB.kill()
	unitB.remove()
	unitC.kill()
	unitC.remove()

public function testPersonSystem_LowerStatLimits(vec2 testCentre)
	let testName = setTestName("testPersonSystem_LowerStatLimits", true)
	// Check lower stat limits:
	let unitA = createUnit(Settings.USER_PLAYER, UnitIdsCustom.AoW.peasant, testCentre, angle(0))
	let personA = unitA.getPerson()
	personA.sleep = (MAX_SLEEP / MAX_DAYS_NO_SLEEP) * (MAX_DAYS_NO_SLEEP - DAYS_TILL_EXHAUSTED + (STATS_ADJUSTMENT_RATE / INGAME_DAY_DURATION))
	unitA.hasAbility(BuffIdsCustom.exhausted).assertFalse(testName)
	personA.reduceStats()
	doAfter(MIN_ACTION_SLEEP_TIME) () ->
		// Check that person is exhausted:
		unitA.hasAbility(BuffIdsCustom.exhausted).assertTrue(testName)
		personA.sleep = (MAX_SLEEP / MAX_DAYS_NO_SLEEP) * (STATS_ADJUSTMENT_RATE / INGAME_DAY_DURATION)
		unitA.hasAbility(BuffIdsCustom.sleeping).assertFalse(testName)
		personA.isSleeping().assertFalse(testName)
		personA.reduceStats()
	doAfter(2 * MIN_ACTION_SLEEP_TIME) () ->
		// Check that person is sleeping on the ground:
		unitA.hasAbility(BuffIdsCustom.sleeping).assertTrue(testName)
		personA.sleepRate.assertEquals(testName, getSleepRate(0))
		personA.isSleeping().assertTrue(testName)
		personA.sleep = MAX_SLEEP * (1 - DAYS_TILL_EXHAUSTED / MAX_DAYS_NO_SLEEP)
		unitA.hasAbility(BuffIdsCustom.exhausted).assertTrue(testName)
		personA.reduceStats()
	doAfter(3 * MIN_ACTION_SLEEP_TIME) () ->
		// Check that person isn't exhausted anymore but still sleeping:
		unitA.hasAbility(BuffIdsCustom.exhausted).assertFalse(testName)
		unitA.hasAbility(BuffIdsCustom.sleeping).assertTrue(testName)
		personA.sleep = MAX_SLEEP
		personA.isSleeping().assertTrue(testName)
		personA.reduceStats()
	doAfter(4 * MIN_ACTION_SLEEP_TIME) () ->
		// Check that person woke up:
		unitA.hasAbility(BuffIdsCustom.sleeping).assertFalse(testName)
		personA.isSleeping().assertFalse(testName)
		testFinish(testName)
	doAfter(5 * MIN_ACTION_SLEEP_TIME) () ->
		// Remove test units:
		unitA.kill()
		unitA.remove()

public function testPersonSystem_DamageReaction(vec2 testCentre)
	let testName = setTestName("testPersonSystem_DamageReaction", true)
	// Check lower stat limits:
	let unitA = createUnit(Settings.USER_PLAYER, UnitIdsCustom.AoW.peasant, testCentre, angle(0))
	let unitB = createUnit(Settings.USER_PLAYER, UnitIdsCustom.AoW.peasant, testCentre, angle(0))
	unitB.setFacing(unitB.getPos().angleTo(unitA.getPos()))
	let personA = unitA.getPerson()
	personA.sleep = (MAX_SLEEP / MAX_DAYS_NO_SLEEP) * (STATS_ADJUSTMENT_RATE / INGAME_DAY_DURATION)
	personA.reduceStats()
	doAfter(MIN_ACTION_SLEEP_TIME) () ->
		// Check that person is sleeping and attack it:
		personA.isSleeping().assertTrue(testName)
		unitB.issueTargetOrder("attack", unitA)
	doAfter(MIN_ACTION_SLEEP_TIME + UnitData_Peasant.attack1CooldownTime) () ->
		// Check that person woke up:
		personA.isSleeping().assertFalse(testName)
		testFinish(testName)
	doAfter(2 * MIN_ACTION_SLEEP_TIME + UnitData_Peasant.attack1CooldownTime) () ->
		// Remove test units:
		unitA.kill()
		unitB.kill()
		unitA.remove()
		unitB.remove()