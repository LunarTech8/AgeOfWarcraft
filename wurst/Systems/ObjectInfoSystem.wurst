/*-------------------------------------------------------------
// Version number:
1.0.0

// Description:
This system shows each player informations about his currently targeted object in a multiboard and periodically refreshes these informations.
Objects can be targeted by using the "Show Target Info" ability on it. Units are also targeted by simply selecting them.
The currently supported object types are: Units and destructables (Adjust the "Show Target Info" ability adequately)

Other systems can show system relevant info through a public function setObjectInfoMultiboard that should be called and priorized through the createMultiboardLines function.
These other systems can set the relevant info through the use of the addMultiboardLine function that is defined in the MultiboardPrioritySystem package.

Add new lines with "AddMultiboardline" with a text and an icon input.
Add head/subhead lines by setting the icon path of a line to "UI\\Minimap\\MinimapIconCreepLoc2.blp"/"UI\\Minimap\\MinimapIconCreepLoc2.blp".
You can show different types of informations depending on the targeted object by adding if-else conditions, etc.
Use "AddArrow" to mark objects that are linked in a way to the current targeted object.

// Changelog:
- 1.0.0:
Initial version.
-------------------------------------------------------------*/
package ObjectInfoSystem
import RegisterEvents
import TimerUtils
import MultiboardPrioritySystem
import StorageSystem
import ResourceSystem
import BuildingSystem
import ConstantDataSystem
import Entity
import OrderSystem
import PersonSystem
import WorkshopSystem
import HomeSystem
import SettlementSystem
import UtilityFunctions


// --------------------
// Data code
// --------------------

let COUNT_PLAYERS = 12  // Highest player slot in use
let MULTIBOARD_PRIORITY = 1
let ADJUSTING_TIME = 0.5
let MULTIBOARD_NAME = "ObjectInfoSystem"


// --------------------
// Functional code
// --------------------

Dataset array datasets

class Dataset
	private constant int playerID
	private multiboard usedMultiboard
	private timer adjustingTimer
	protected entity target

	construct(int playerID)
		this.playerID = playerID
		usedMultiboard = null
		adjustingTimer = getTimer()
		target = entity(null, null)

	ondestroy
		DestroyMultiboard(usedMultiboard)
		adjustingTimer.release()

	function getMultiboard() returns multiboard
		if usedMultiboard == null
			// Initialize multiboard:
			usedMultiboard = CreateMultiboard()
			MultiboardSetTitleText(usedMultiboard, "Object Informations")
			MultiboardSetColumnCount(usedMultiboard, 1)
			MultiboardMinimize(usedMultiboard, false)
		return usedMultiboard

	function resetMultiboard()
		if usedMultiboard != null
			DestroyMultiboard(usedMultiboard)  // Use destroy because clear doesn't remove the lines
			usedMultiboard = null

	function displayMultiboard(int playerID, bool show)
		if usedMultiboard != null
			if GetLocalPlayer() == Player(playerID)
				// Use only local code (no net traffic) within this block to avoid desyncs.
				MultiboardDisplay(usedMultiboard, show)
		else if show
			Log.error("ERROR: Empty multiboard can't be displayed")

	function setTimer(real adjustingTime)
		if adjustingTime > 0.
			adjustingTimer.setData(playerID)
			adjustingTimer.startPeriodic(adjustingTime, () -> showObjectInfo(GetExpiredTimer().getData()))
		else
			adjustingTimer.pause()

function deactivateDataset(int playerID)
	let dataset = datasets[playerID]
	// Reset dataset:
	dataset.setTimer(0.)
	dataset.target = entity(null, null)
	// Disable multiboard:
	dataset.displayMultiboard(playerID, false)

/** Checks if targeted object of given player has relevant infos that should be displayed and sets them over the corresponding setObjectInfoMultiboard function of that system. */
function createMultiboardLines(int playerID) returns bool
	var hasInfo = false
	let resource = datasets[playerID].target.getResource(false)
	if resource != null
		hasInfo = datasets[playerID].getMultiboard().setObjectInfoMultiboard(resource) or hasInfo
	if datasets[playerID].target.userUnit != null
		let targetUnit = datasets[playerID].target.assertUnit()
		// Check info sources that require ownerhsip by the given player:
		if targetUnit.getOwner() == Player(playerID)
			let buildingSite = targetUnit.getBuildingSite()
			if buildingSite != null
				hasInfo = datasets[playerID].getMultiboard().setObjectInfoMultiboard(buildingSite) or hasInfo
			let person = targetUnit.getPerson()
			if person != null
				hasInfo = datasets[playerID].getMultiboard().setObjectInfoMultiboard(person) or hasInfo
			let workshop = targetUnit.getWorkshop()
			if workshop != null
				hasInfo = datasets[playerID].getMultiboard().setObjectInfoMultiboard(workshop) or hasInfo
			let home = targetUnit.getHome()
			if home != null
				hasInfo = datasets[playerID].getMultiboard().setObjectInfoMultiboard(home) or hasInfo
			if isCentreBuilding(targetUnit.getUnitId())
				hasInfo = datasets[playerID].getMultiboard().setObjectInfoMultiboard(targetUnit.getSettlement()) or hasInfo
			let storage = targetUnit.getStorage()
			if storage != null
				hasInfo = datasets[playerID].getMultiboard().setObjectInfoMultiboard(storage) or hasInfo
			let orderSource = targetUnit.getOrderSource()
			if orderSource != null
				hasInfo = datasets[playerID].getMultiboard().setObjectInfoMultiboard(orderSource) or hasInfo
	return hasInfo

function showObjectInfo(int playerID)
	let dataset = datasets[playerID]
	// Check if unit is still selected:
	if dataset.target.userUnit != null and IsUnitSelected(dataset.target.userUnit, Player(playerID)) == false
		disableBoard(playerID, MULTIBOARD_NAME)
	// Refresh multiboard informations:
	else if enableBoard(playerID, MULTIBOARD_NAME, MULTIBOARD_PRIORITY, (int playerID) -> deactivateDataset(playerID))
		dataset.resetMultiboard()
		// Show object informations if relevant:
		if createMultiboardLines(playerID)
			dataset.displayMultiboard(playerID, true)
		else
			disableBoard(playerID, MULTIBOARD_NAME)
	// Stop timer because multiboard couldn't be used:
	else
		dataset.setTimer(0.)

init
	// Init variables:
	for i = 0 to COUNT_PLAYERS - 1
		datasets[i] = new Dataset(i)
		if datasets[i] == null
			Log.error("ERROR: InfoBoard struct cap exceeded")
	// Register unit selections:
	registerPlayerUnitEvent(EVENT_PLAYER_UNIT_SELECTED) ->
		let playerID = GetPlayerId(GetTriggerPlayer())
		let dataset = datasets[playerID]
		// Remove old informations:
		dataset.setTimer(0.)
		// Get new unit informations:
		dataset.target = entity(GetTriggerUnit(), null)
		dataset.setTimer(ADJUSTING_TIME)
		showObjectInfo(playerID)
	// Register showTargetInfo spell:
	registerPlayerUnitEvent(EVENT_PLAYER_UNIT_SPELL_CAST) ->
		if GetSpellAbilityId() == AbilityIdsCustom.showTargetInfo
			let playerID = GetPlayerId(GetTriggerPlayer())
			let target = entity(GetSpellTargetUnit(), GetSpellTargetDestructable())
			let dataset = datasets[playerID]
			// Remove old informations:
			dataset.setTimer(0.)
			if GetLocalPlayer() == Player(playerID)
				// Use only local code (no net traffic) within this block to avoid desyncs.
				ClearSelection()
			// Get new object informations:
			if target.userUnit != null
				if GetLocalPlayer() == Player(playerID)
					// Use only local code (no net traffic) within this block to avoid desyncs.
					SelectUnit(target.userUnit, true)
			else if target.userDest != null
				dataset.target = target
				dataset.setTimer(ADJUSTING_TIME)
				showObjectInfo(playerID)
