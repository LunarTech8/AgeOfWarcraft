/*-------------------------------------------------------------
// Version number:
1.0.0

// Description:
Handles world map generation like terrain deformation and unit placement.

// Changelog:
- 1.0.0:
Initial version.
-------------------------------------------------------------*/
package WorldGenerationSystem
import TerrainUtils
import Interpolation
import Array2D
import ConstantData
import UtilityFunctions
import Entity
import ResourceSystem
import LoadStatusSystem
import ComputationControl
import NoiseFunctions
import SaveLoadData
import UnitTest
import ConversionFunctions
import Destructable_Spruce
import Destructable_Maple


// --------------------
// Data code
// --------------------

// General:
var TILES_X = 104  // Has to be non-constant to allow for manageable unit tests
var TILES_Y = 104  // Has to be non-constant to allow for manageable unit tests
let ORIGIN_VEC = vec2(-6656., -7168.)  // Left, bottom point from which the terrain generation starts towards right, top point
let USER_PLAYER = Player(0)
let WORLD_DATA_LOAD = false
let WORLD_DATA_SAVE = true
let WORLD_DATA_FILE_NAME = "WorldData.pld"  // In folder ..\Documents\Warcraft III\CustomMapData
let WORLD_DATA_PART_LENGTHS = [0, 4, 5]  // Indices where one data value ends and the next one starts

// Terrain:
let TERRAIN_HEIGHT_INIT = 0.
let TERRAIN_HEIGHT_MIN = -64.  // Min HEIGHT_DEEP_WATER_MIN
let TERRAIN_HEIGHT_MAX = HEIGHT_LAND_MIN + 764.  // Max HEIGHT_LAND_MAX

// Plants:
let NATURE_PLAYER = Player(PLAYER_NEUTRAL_PASSIVE)

enum PlantBiomeType
	BARRENS
	MEADOW
	SHRUBLAND
	WOODS
	FOREST

function getPlantBiomeType(real plantNoiseValue) returns PlantBiomeType
	if plantNoiseValue >= 0.75
		return PlantBiomeType.FOREST
	else if plantNoiseValue >= 0.5
		return PlantBiomeType.WOODS
	else if plantNoiseValue >= 0.3
		return PlantBiomeType.SHRUBLAND
	else if plantNoiseValue >= 0.1
		return PlantBiomeType.MEADOW
	else
		return PlantBiomeType.BARRENS


// --------------------
// Functional code
// --------------------

let heightMap = new Array2DReal(TILES_X, TILES_Y)
let plantMap = new Array2DInt(TILES_X, TILES_Y)
var isWorldDataLoaded = false

function encodeWorldData() returns ChunkedString
	let maxHeightValueEncoded = (10).pow(WORLD_DATA_PART_LENGTHS[1] - WORLD_DATA_PART_LENGTHS[0])
	let data = new ChunkedString(DEFAULT_CHUNK_SIZE)
	// newInitSubStatus("Test9 " + computationCost.toString())  // DEBUG:
	for	x = 0 to TILES_X - 1
		// setInitStepStatus(x + 1, TILES_X)  // DEBUG:
		for	y = 0 to TILES_Y - 1
			let heightValueEncoded = (((heightMap.get(x, y) - TERRAIN_HEIGHT_MIN) * 10.).round() + maxHeightValueEncoded).toString().substring(1)
			let plantValueEncoded = plantMap.get(x, y).toString()
			data.append(heightValueEncoded + plantValueEncoded)
			computationCost += 0.092
		checkForComputationBreak()
	forceComputationBreak()
	let convertedData = convertNumbersToChars(data)
	// newInitSubStatus("Test11 " + computationCost.toString())  // DEBUG:
	destroy data
	forceComputationBreak()
	return convertedData

function decodeWorldData(ChunkedString data)
	let dataPartLength = WORLD_DATA_PART_LENGTHS[WORLD_DATA_PART_LENGTHS.length - 1]
	let convertedData = convertCharsToNumbers(data)
	// newInitSubStatus("Test13 " + computationCost.toString())  // DEBUG:
	for	x = 0 to TILES_X - 1
		// setInitStepStatus(x + 1, TILES_X)  // DEBUG:
		for	y = 0 to TILES_Y - 1
			let dataPart = convertedData.getUnsafeSubString((y + TILES_Y * x) * dataPartLength, (y + TILES_Y * x + 1) * dataPartLength)
			var i = 0
			let heightValueDecoded = dataPart.substring(WORLD_DATA_PART_LENGTHS[i], WORLD_DATA_PART_LENGTHS[i] + WORLD_DATA_PART_LENGTHS[i + 1]).toReal() * 0.1 + TERRAIN_HEIGHT_MIN
			i += 1
			let plantValueDecoded = dataPart.substring(WORLD_DATA_PART_LENGTHS[i], WORLD_DATA_PART_LENGTHS[i] + WORLD_DATA_PART_LENGTHS[i + 1]).toInt()
			heightMap.set(x, y, heightValueDecoded)
			plantMap.set(x, y, plantValueDecoded)
			computationCost += 0.124
		checkForComputationBreak()
	destroy convertedData
	forceComputationBreak()

function generateWorldData()
	// Create height map:
	var noiseMap = generatePerlinNoise(TILES_X, TILES_Y, 7, 0.6, "Cosine")
	newInitSubStatus("Calculate height data")
	// newInitSubStatus("Test5 " + computationCost.toString())  // DEBUG:
	for	x = 0 to TILES_X - 1
		setInitStepStatus(x + 1, TILES_X)
		for	y = 0 to TILES_Y - 1
			heightMap.set(x, y, linear(TERRAIN_HEIGHT_MIN, TERRAIN_HEIGHT_MAX, noiseMap.get(x, y)))
			computationCost += 0.069
		checkForComputationBreak()
	forceComputationBreak()
	destroy noiseMap
	forceComputationBreak()
	// Create plant map:
	noiseMap = generatePerlinNoise(TILES_X, TILES_Y, 5, 0.6, "Cosine")
	newInitSubStatus("Calculate plant data")
	// newInitSubStatus("Test6 " + computationCost.toString())  // DEBUG:
	for	x = 0 to TILES_X - 1
		setInitStepStatus(x + 1, TILES_X)
		for	y = 0 to TILES_Y - 1
			if heightMap.get(x, y) >= HEIGHT_LAND_MIN
				plantMap.set(x, y, getPlantBiomeType(noiseMap.get(x, y)) castTo int)
			else
				plantMap.set(x, y, PlantBiomeType.BARRENS castTo int)
			computationCost += 0.088
		checkForComputationBreak()
	forceComputationBreak()
	destroy noiseMap

public function createWorldData()
	newInitStatus("World data creation")
	if WORLD_DATA_LOAD
		// Load world data:
		newInitSubStatus("Load and synchronize data")
		USER_PLAYER.loadData(WORLD_DATA_FILE_NAME) (status, data) ->
			if status == SUCCESS
				decodeWorldData(data)
			else
				Log.error(status.toString())
			isWorldDataLoaded = true
			destroy data
		while isWorldDataLoaded == false
			TriggerSleepAction(WAIT_SLEEP_TIME)
	else
		// Generate world data:
		generateWorldData()
		isWorldDataLoaded = true
		// Save world data if requested:
		if WORLD_DATA_SAVE
			newInitSubStatus("Save data")
			let encodedData = encodeWorldData()
			USER_PLAYER.saveData(WORLD_DATA_FILE_NAME, encodedData)
			destroy encodedData

public function createTerrain()
	newInitStatus("Terrain creation")
	// Adjust the height for each tile:
	newInitSubStatus("Adjust terrain heights")
	// newInitSubStatus("Test7 " + computationCost.toString())  // DEBUG:
	for	x = 0 to TILES_X - 1
		setInitStepStatus(x + 1, TILES_X)
		for	y = 0 to TILES_Y - 1
			let z = heightMap.get(x, y)
			let pos = ORIGIN_VEC.add(x * TILE_DISTANCE, y * TILE_DISTANCE)
			pos.addTerrainHeight(z - TERRAIN_HEIGHT_INIT)  // Terrain has to have water on it before hand for it to show up
			let tile = pos.getTile()
			// Assert that pathing is set to deep water beforehand
			if z >= HEIGHT_LAND_MIN
				tile.setPathing(PATHING_TYPE_FLOATABILITY, false)
				tile.setPathing(PATHING_TYPE_WALKABILITY, true)
				tile.setPathing(PATHING_TYPE_BUILDABILITY, true)
			else if z >= HEIGHT_SHALLOW_WATER_MIN
				tile.setPathing(PATHING_TYPE_WALKABILITY, true)
				tile.setPathing(PATHING_TYPE_BUILDABILITY, false)
			computationCost += 0.821
		checkForComputationBreak()

public function createPlants()
	newInitStatus("Plants creation")
	// Have 1 or 0 tree per tile:
	newInitSubStatus("Add trees")
	// newInitSubStatus("Test8 " + computationCost.toString())  // DEBUG:
	for	x = 0 to TILES_X - 1
		setInitStepStatus(x + 1, TILES_X)
		for	y = 0 to TILES_Y - 1
			let plantBiome = plantMap.get(x, y) castTo PlantBiomeType
			if plantBiome == FOREST
				let pos = ORIGIN_VEC + vec2(x + GetRandomReal(-0.5, 0.5), y + GetRandomReal(-0.5, 0.5)) * TILE_DISTANCE
				// createUnit(NATURE_PLAYER, UnitIdsCustom.Trees.beech.getUnitTypeId(), pos, getRandomAngle())  // DEBUG:
				// entity(null, createDestructable(DestructableIdsCustom.Trees.spruce, pos, getRandomAngle(), GetRandomReal(DestructableData_Spruce.minScale, DestructableData_Spruce.maxScale), getRandomVariation(DestructableData_Spruce.variations))).tryAddResouce()
				entity(null, createDestructable(DestructableIdsCustom.Trees.spruce, pos, getRandomAngle(), DestructableData_Spruce.maxScale, getRandomVariation(DestructableData_Spruce.variations))).tryAddResouce()
			else if plantBiome == WOODS
				let pos = ORIGIN_VEC + vec2(x + GetRandomReal(-0.5, 0.5), y + GetRandomReal(-0.5, 0.5)) * TILE_DISTANCE
				entity(null, createDestructable(DestructableIdsCustom.Trees.maple, pos, getRandomAngle(), DestructableData_Maple.minScale, getRandomVariation(DestructableData_Maple.variations))).tryAddResouce()
			computationCost += 0.206
		checkForComputationBreak()


// --------------------
// Test code
// --------------------

@Test public function testWorldGenerationSystem_Encode()
	testWorldGenerationSystem_Encode(false)
public function testWorldGenerationSystem_Encode(bool isInGameTest)
	let REAL_COMPARE_DELTA = 0.01
	let MAX_HEIGHT_VALUE_ENCODED = (10).pow(WORLD_DATA_PART_LENGTHS[1] - WORLD_DATA_PART_LENGTHS[0])
	let MAX_PLANT_VALUE_ENCODED = (PlantBiomeType.FOREST castTo int) + 1
	let DATA_PART_LENGTH = WORLD_DATA_PART_LENGTHS[WORLD_DATA_PART_LENGTHS.length - 1]
	let testName = setTestName("testWorldGenerationSystem_Encode", isInGameTest)
	if isInGameTest == false
		isComputationControlActivated = false
		TILES_X = 45
		TILES_Y = 55
	// Set and check data:
	for	x = 0 to TILES_X - 1
		for	y = 0 to TILES_Y - 1
			heightMap.set(x, y, ((y + TILES_Y * x) mod MAX_HEIGHT_VALUE_ENCODED) * 0.5 + TERRAIN_HEIGHT_MIN)
			plantMap.set(x, y, (y + TILES_Y * x) mod MAX_PLANT_VALUE_ENCODED)
	heightMap.get(0, 0).assertEquals(testName, 0.0 + TERRAIN_HEIGHT_MIN, REAL_COMPARE_DELTA)
	heightMap.get(0, 1).assertEquals(testName, 0.5 + TERRAIN_HEIGHT_MIN, REAL_COMPARE_DELTA)
	heightMap.get(0, 2).assertEquals(testName, 1.0 + TERRAIN_HEIGHT_MIN, REAL_COMPARE_DELTA)
	heightMap.get(0, 3).assertEquals(testName, 1.5 + TERRAIN_HEIGHT_MIN, REAL_COMPARE_DELTA)
	heightMap.get(0, 9).assertEquals(testName, 4.5 + TERRAIN_HEIGHT_MIN, REAL_COMPARE_DELTA)
	// Encode and check data:
	let encodedData = encodeWorldData()
	encodedData.length().assertEquals(testName, (TILES_X * TILES_Y * DATA_PART_LENGTH / NUMBER_BASE_CHUNK_SIZE).ceil() * CHAR_BASE_CHUNK_SIZE)
	encodedData.getChunkCount().assertEquals(testName, (encodedData.length() / DEFAULT_CHUNK_SIZE).ceil())
	let encodedDataNumbers = convertCharsToNumbers(encodedData)
	encodedDataNumbers.getUnsafeSubString(0 * DATA_PART_LENGTH, (0 + 1) * DATA_PART_LENGTH).assertEquals(testName, "0000" + "0")
	encodedDataNumbers.getUnsafeSubString(1 * DATA_PART_LENGTH, (1 + 1) * DATA_PART_LENGTH).assertEquals(testName, "0005" + "1")
	encodedDataNumbers.getUnsafeSubString(2 * DATA_PART_LENGTH, (2 + 1) * DATA_PART_LENGTH).assertEquals(testName, "0010" + "2")
	encodedDataNumbers.getUnsafeSubString(3 * DATA_PART_LENGTH, (3 + 1) * DATA_PART_LENGTH).assertEquals(testName, "0015" + "3")
	encodedDataNumbers.getUnsafeSubString(9 * DATA_PART_LENGTH, (9 + 1) * DATA_PART_LENGTH).assertEquals(testName, "0045" + "4")
	encodedDataNumbers.getUnsafeSubString(2042 * DATA_PART_LENGTH, (2042 + 1) * DATA_PART_LENGTH).assertEquals(testName, "0210" + "2")
	destroy encodedDataNumbers
	destroy encodedData

@Test public function testWorldGenerationSystem_EncodeAndDecode()
	testWorldGenerationSystem_EncodeAndDecode(false)
public function testWorldGenerationSystem_EncodeAndDecode(bool isInGameTest)
	let REAL_COMPARE_DELTA = 0.01
	let testName = setTestName("testWorldGenerationSystem_EncodeAndDecode", isInGameTest)
	if isInGameTest == false
		isComputationControlActivated = false
		TILES_X = 45
		TILES_Y = 55
	// Set and check data:
	for	x = 0 to TILES_X - 1
		for	y = 0 to TILES_Y - 1
			heightMap.set(x, y, TERRAIN_HEIGHT_MIN)
			plantMap.set(x, y, 0)
	heightMap.set(42, 37, 847.2)
	plantMap.set(15, 23, PlantBiomeType.SHRUBLAND castTo int)
	heightMap.get(0, 0).assertEquals(testName, TERRAIN_HEIGHT_MIN, REAL_COMPARE_DELTA)
	plantMap.get(0, 0).assertEquals(testName, 0)
	heightMap.get(42, 37).assertEquals(testName, 847.2, REAL_COMPARE_DELTA)
	plantMap.get(42, 37).assertEquals(testName, 0)
	heightMap.get(15, 23).assertEquals(testName, TERRAIN_HEIGHT_MIN, REAL_COMPARE_DELTA)
	plantMap.get(15, 23).assertEquals(PlantBiomeType.SHRUBLAND castTo int)
	// Encode data:
	let encodedData = encodeWorldData()
	// Clear and check data:
	heightMap.set(42, 37, TERRAIN_HEIGHT_MIN)
	plantMap.set(15, 23, 0)
	heightMap.get(0, 0).assertEquals(testName, TERRAIN_HEIGHT_MIN, REAL_COMPARE_DELTA)
	plantMap.get(0, 0).assertEquals(testName, 0)
	heightMap.get(42, 37).assertEquals(testName, TERRAIN_HEIGHT_MIN, REAL_COMPARE_DELTA)
	plantMap.get(42, 37).assertEquals(testName, 0)
	heightMap.get(15, 23).assertEquals(testName, TERRAIN_HEIGHT_MIN, REAL_COMPARE_DELTA)
	plantMap.get(15, 23).assertEquals(testName, 0)
	// Decode and check data:
	decodeWorldData(encodedData)
	heightMap.get(0, 0).assertEquals(testName, TERRAIN_HEIGHT_MIN, REAL_COMPARE_DELTA)
	plantMap.get(0, 0).assertEquals(testName, 0)
	heightMap.get(42, 37).assertEquals(testName, 847.2, REAL_COMPARE_DELTA)
	plantMap.get(42, 37).assertEquals(testName, 0)
	heightMap.get(15, 23).assertEquals(testName, TERRAIN_HEIGHT_MIN, REAL_COMPARE_DELTA)
	plantMap.get(15, 23).assertEquals(PlantBiomeType.SHRUBLAND castTo int)
	destroy encodedData