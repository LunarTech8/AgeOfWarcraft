/*-------------------------------------------------------------
// Version number:
1.0.0

// Description:
Stores the sources (OrderSource) and targets (OrderTarget) of all current unit orders on any kind of target.
Targets automatically invalidate their sources if they get destroyed.
Sources can have an attached OrderAction to their order that can store appropriate callbacks for when the order is invalidated, canceled or finished.

// Changelog:
- 1.0.0:
Initial version.
-------------------------------------------------------------*/
package OrderSystem
import RegisterEvents
import Orders
import LinkedList
import TimerUtils
import InstantDummyCaster
import DummyRecycler
import Icons
import UtilityFunctions
import Entity
import MultiboardPrioritySystem
import UnitMap
import ErrorHandling
import UnitIndexer


// --------------------
// Data code
// --------------------

let ORDER_ICON_PATH = Icons.bTNSnazzyScroll
let POS_TOLERANCE_RANGE = 1.
let POS_CHECK_RATE = 1.


// --------------------
// Functional code
// --------------------

let ORDER_SOURCE_MAP = new UnitHashMap<OrderSource>(null)
let ORDER_TARGET_MAP = new EntityHashMap<OrderTarget>(null)

public interface CallbackSimple
	function call()

public interface CallbackCondition
	function call() returns bool

class OrderTarget
	private entity target
	private LinkedList<OrderSource> sources

	construct(entity target, OrderSource source)
		sources = new LinkedList<OrderSource>()
		sources.add(source)
		this.target = target

	ondestroy
		// Invalidate and remove order for sources:
		let cancelList = sources.copy()  // Use copy so that sources can still remove themselfs from the original list
		while cancelList.isEmpty() == false
			cancelList.pop().invalidate()
		destroy cancelList
		destroy sources

	function addSource(OrderSource source)
		if sources.has(source)
			error("Source already has that target")
		sources.add(source)

	function removeSource(OrderSource source)
		if sources.has(source) == false
			error("Source does not have that target")
		sources.remove(source)

public class OrderAction
	private timer t
	private CallbackSimple castedCb  // Is called if order is casted and resolves the cast finish execution actions of the order
	private CallbackSimple invalidateCb  // Is called if order becomes invalid (eg. target becomes invalid) and resolves consequential actions
	private CallbackSimple onDestroyCb  // Is called on destruction of the order (eg. if it is overwritten by another order or becoming invalid or is casted) and resolves clean up actions for the previous order
	private CallbackSimple timedFinishCb  // Is called after the given duration and resolves the timed finish execution actions of the order
	private CallbackCondition timedFinishCondition  // Is called repeatedly after the given duration and returns if the order action can be finished

	construct(CallbackSimple castedCb, CallbackSimple invalidateCb, CallbackSimple onDestroyCb)
		this.castedCb = castedCb
		this.invalidateCb = invalidateCb
		this.onDestroyCb = onDestroyCb
		this.timedFinishCb = null
		this.timedFinishCondition = null
		t = null
	construct(CallbackSimple castedCb, CallbackSimple invalidateCb, CallbackSimple onDestroyCb, CallbackSimple timedFinishCb, real timedFinishDuration, CallbackCondition timedFinishCondition)
		this.castedCb = castedCb
		this.invalidateCb = invalidateCb
		this.onDestroyCb = onDestroyCb
		this.timedFinishCb = timedFinishCb
		this.timedFinishCondition = timedFinishCondition
		t = getTimer()
		t.setData(this castTo int)
		if timedFinishCondition == null
			t.start(timedFinishDuration, () -> finish())
		else
			t.startPeriodic(timedFinishDuration, () -> finish())

	ondestroy
		if t != null
			t.release()
		if castedCb != null
			destroy castedCb
		if invalidateCb != null
			destroy invalidateCb
		if onDestroyCb != null
			onDestroyCb.call()
			destroy onDestroyCb
		if timedFinishCb != null
			destroy timedFinishCb
		if timedFinishCondition != null
			destroy timedFinishCondition

	private static function finish()
		let t = GetExpiredTimer()
		thistype cb = t.getData() castTo thistype
		if cb.timedFinishCondition == null or cb.timedFinishCondition.call()
			cb.t = null
			t.release()
			if cb.castedCb != null
				destroy cb.castedCb
				cb.castedCb = null
			if cb.invalidateCb != null
				destroy cb.invalidateCb
				cb.invalidateCb = null
			if cb.onDestroyCb != null
				destroy cb.onDestroyCb
				cb.onDestroyCb = null
			if cb.timedFinishCb != null
				cb.timedFinishCb.call()

	protected function casted()
		if castedCb != null
			castedCb.call()
		destroy this

	protected function invalidate()
		if invalidateCb != null
			invalidateCb.call()
		destroy this

class OrderSource
	protected unit source
	protected int orderId
	private OrderAction orderAction

	construct(unit source, int orderId, OrderAction orderAction)
		this.source = source
		this.orderId = orderId
		this.orderAction = orderAction

	ondestroy
		if orderAction != null
			destroy orderAction

	protected function casted()
		ORDER_SOURCE_MAP.remove(source)  // Has to be called first to avoid overwriting consequential callback orders
		if orderAction != null
			orderAction.casted()
			orderAction = null
		destroy this

	protected function invalidate()
		ORDER_SOURCE_MAP.remove(source)  // Has to be called first to avoid overwriting consequential callback orders
		if orderAction != null
			orderAction.invalidate()
			orderAction = null
		destroy this

class OrderSourceU extends OrderSource
	protected unit target

	construct(unit source, int orderId, unit target, OrderAction orderAction)
		super(source, orderId, orderAction)
		this.target = target
		let targetEntity = entity(target, null)
		let orderTarget = ORDER_TARGET_MAP.tryGet(targetEntity)
		if orderTarget != null
			orderTarget.addSource(this)
		else
			ORDER_TARGET_MAP.put(targetEntity, new OrderTarget(targetEntity, this))

	ondestroy
		let orderTarget = ORDER_TARGET_MAP.tryGet(entity(target, null))
		if orderTarget != null
			orderTarget.removeSource(this)

class OrderSourceD extends OrderSource
	protected destructable target

	construct(unit source, int orderId, destructable target, OrderAction orderAction)
		super(source, orderId, orderAction)
		this.target = target
		let targetEntity = entity(null, target)
		let orderTarget = ORDER_TARGET_MAP.tryGet(targetEntity)
		if orderTarget != null
			orderTarget.addSource(this)
		else
			ORDER_TARGET_MAP.put(targetEntity, new OrderTarget(targetEntity, this))

	ondestroy
		let orderTarget = ORDER_TARGET_MAP.tryGet(entity(null, target))
		if orderTarget != null
			orderTarget.removeSource(this)


class OrderSourceI extends OrderSource
	protected item target

	construct(unit source, int orderId, item target, OrderAction orderAction)
		super(source, orderId, orderAction)
		this.target = target

class OrderSourceV extends OrderSource
	protected vec2 target

	construct(unit source, int orderId, vec2 target, OrderAction orderAction)
		super(source, orderId, orderAction)
		this.target = target


function OrderSource.getTargetWidget() returns widget
	widget targetWidget = null
	if this instanceof OrderSourceU
		targetWidget = (this castTo OrderSourceU).target
	else if this instanceof OrderSourceD
		targetWidget = (this castTo OrderSourceD).target
	else if this instanceof OrderSourceI
		targetWidget = (this castTo OrderSourceI).target
	return targetWidget

function OrderSource.getTargetPos() returns vec2
	vec2 targetPos = ZERO2
	if this instanceof OrderSourceV
		targetPos = (this castTo OrderSourceV).target
	else if this instanceof OrderSourceU
		targetPos = (this castTo OrderSourceU).target.getPos()
	else if this instanceof OrderSourceD
		targetPos = (this castTo OrderSourceD).target.getPos()
	else if this instanceof OrderSourceI
		targetPos = (this castTo OrderSourceI).target.getPos()
	return targetPos

function unit.getConditionNoMovement() returns CallbackCondition
	var _lastPos = this.getPos()
	CallbackCondition condition = () ->
		let newPos = this.getPos()
		var noMomvement = true
		if newPos.distanceToSq(_lastPos) > POS_TOLERANCE_RANGE
			_lastPos = newPos
			noMomvement = false
		return noMomvement
	return condition

function unit.setOrder(OrderSource order)
	// Remove old order:
	let orderSource = ORDER_SOURCE_MAP.tryGet(this)
	if orderSource != null
		destroy orderSource
	// Add new order:
	ORDER_SOURCE_MAP.put(this, order)
/** Sets the units order to the given order Id. */
public function unit.setOrder(int orderId)
	this.setOrder(new OrderSource(this, orderId, null))
/** Sets the units order to the given order Id with given order action. */
public function unit.setOrder(int orderId, OrderAction orderAction)
	this.setOrder(new OrderSource(this, orderId, orderAction))
/** Sets the units order to the given order Id with given unit target. */
public function unit.setOrder(int orderId, unit target)
	this.setOrder(new OrderSourceU(this, orderId, target, null))
/** Sets the units order to the given order Id with given unit target and given order action. */
public function unit.setOrder(int orderId, unit target, OrderAction orderAction)
	this.setOrder(new OrderSourceU(this, orderId, target, orderAction))
/** Sets the units order to the given order Id with given destructable target. */
public function unit.setOrder(int orderId, destructable target)
	this.setOrder(new OrderSourceD(this, orderId, target, null))
/** Sets the units order to the given order Id with given destructable target and given order action. */
public function unit.setOrder(int orderId, destructable target, OrderAction orderAction)
	this.setOrder(new OrderSourceD(this, orderId, target, orderAction))
/** Sets the units order to the given order Id with given item target. */
public function unit.setOrder(int orderId, item target)
	this.setOrder(new OrderSourceI(this, orderId, target, null))
/** Sets the units order to the given order Id with given item target and given order action. */
public function unit.setOrder(int orderId, item target, OrderAction orderAction)
	this.setOrder(new OrderSourceI(this, orderId, target, orderAction))
/** Sets the units order to the given order Id with given vector target. */
public function unit.setOrder(int orderId, vec2 target)
	this.setOrder(new OrderSourceV(this, orderId, target, null))
/** Sets the units order to the given order Id with given vector target and given order action. */
public function unit.setOrder(int orderId, vec2 target, OrderAction orderAction)
	this.setOrder(new OrderSourceV(this, orderId, target, orderAction))
/** Sets the units order to the given order Id with given entity target. */
public function unit.setOrder(int orderId, entity target)
	if target.userUnit != null
		this.setOrder(new OrderSourceU(this, orderId, target.userUnit, null))
	else if target.userDest != null
		this.setOrder(new OrderSourceD(this, orderId, target.userDest, null))
	else
		error("Unit and destructable of entity are null")
/** Sets the units order to the given order Id with given entity target and given order action. */
public function unit.setOrder(int orderId, entity target, OrderAction orderAction)
	if target.userUnit != null
		this.setOrder(new OrderSourceU(this, orderId, target.userUnit, orderAction))
	else if target.userDest != null
		this.setOrder(new OrderSourceD(this, orderId, target.userDest, orderAction))
	else
		error("Unit and destructable of entity are null")

/** Sets the units order to casted if it has any else returns false. */
public function unit.setOrderToCasted() returns bool
	let orderSource = ORDER_SOURCE_MAP.tryGet(this)
	if orderSource != null
		orderSource.casted()
		return true
	else
		return false

/** Returns if the unit has an order with given id and target. */
public function unit.hasOrder(int orderId, widget target) returns bool
	let orderSource = ORDER_SOURCE_MAP.tryGet(this)
	if orderSource != null
		return orderSource.orderId == orderId and orderSource.getTargetWidget() == target
	else
		return false
/** Returns if the unit has an order with given id. */
public function unit.hasOrder(int orderId) returns bool
	let orderSource = ORDER_SOURCE_MAP.tryGet(this)
	if orderSource != null
		return orderSource.orderId == orderId
	else
		return false
/** Returns if given unit has any order. */
public function unit.hasOrder() returns bool
	return ORDER_SOURCE_MAP.has(this)

/** Returns the order name of given unit. */
public function unit.getOrderName() returns string
	let orderSource = ORDER_SOURCE_MAP.tryGet(this)
	if orderSource != null
		return orderSource.orderId.getOrderName(orderSource.source)
	else
		return "none"

/** Clear unit as order source. */
public function unit.removeSourceOrder()
	let orderSource = ORDER_SOURCE_MAP.tryRemove(this)
	if orderSource != null
		destroy orderSource

/** Clear entity as order target. */
public function entity.removeTargetOrder()
	let orderTarget = ORDER_TARGET_MAP.tryRemove(this)
	if orderTarget != null
		destroy orderTarget

/** Clear unit as order source and target. */
public function unit.removeAllOrders()
	let orderSource = ORDER_SOURCE_MAP.tryRemove(this)
	if orderSource != null
		destroy orderSource
	let orderTarget = ORDER_TARGET_MAP.tryRemove(entity(this, null))
	if orderTarget != null
		destroy orderTarget

/** Issues this unit to cast the ability stored by it's order source. */
public function unit.castAbilityOrder()
	let orderSource = ORDER_SOURCE_MAP.get(this)
	let targetWidget = orderSource.getTargetWidget()
	if targetWidget != null
		this.issueTargetAbilityOrder(orderSource.orderId, targetWidget, true)
	else if orderSource instanceof OrderSourceV
		this.issuePointAbilityOrder(orderSource.orderId, orderSource.getTargetPos(), true)
	else
		this.issueImmediateAbilityOrder(orderSource.orderId, true)

/** Returns the count of all order sources. */
public function getSourceOrderCount() returns int
	return ORDER_SOURCE_MAP.getValueCount()

/** Returns the count of all order targets. */
public function getTargetOrderCount() returns int
	return ORDER_TARGET_MAP.getValueCount()

/** Try to set system relevant infos for given object in this multiboard. Returns if it could be set. */
public function multiboard.trySetObjectInfoMultiboard(string currentOrderName) returns bool
	if currentOrderName == "none"
		return false
	this.addMultiboardLine("Order:", HEADLINE_ICON_PATH)
	this.addMultiboardLine("Current: " + currentOrderName.firstUpper(), ORDER_ICON_PATH)
	return true

init
	// Remove order source and target from every appropriate unit:
	onUnitDeindex(() -> getIndexingUnit().removeAllOrders())
	registerPlayerUnitEvent(EVENT_PLAYER_UNIT_DEATH, () -> GetTriggerUnit().removeAllOrders())
	registerPlayerUnitEvent(EVENT_PLAYER_UNIT_UPGRADE_CANCEL, () -> GetTriggerUnit().removeAllOrders())
	registerPlayerUnitEvent(EVENT_PLAYER_UNIT_UPGRADE_FINISH, () -> GetTriggerUnit().removeAllOrders())
	// Register issued orders:
	registerPlayerUnitEvent(EVENT_PLAYER_UNIT_ISSUED_TARGET_ORDER) ->
		let issuedOrderId = GetIssuedOrderId()
		if issuedOrderId != OrderIds.stunned  // Ignore callback orders
			let source = GetOrderedUnit()
			OrderAction orderAction = null
			let targetU = GetOrderTargetUnit()
			if targetU != null
				let sourceUnitId = source.getUnitId()
				if sourceUnitId != DUMMY_CASTER_UNIT_ID and sourceUnitId != DUMMY_UNIT_ID  // Ignore dummy orders
					if targetU.isType(UNIT_TYPE_STRUCTURE) and (issuedOrderId == OrderIds.smart or issuedOrderId == OrderIds.move)
						orderAction = new OrderAction(null, null, null, () -> source.removeSourceOrder(), POS_CHECK_RATE, source.getConditionNoMovement())
					source.setOrder(issuedOrderId, targetU, orderAction)
			else
				let targetD = GetOrderTargetDestructable()
				if targetD != null
					if issuedOrderId == OrderIds.smart or issuedOrderId == OrderIds.move
						orderAction = new OrderAction(null, null, null, () -> source.removeSourceOrder(), POS_CHECK_RATE, source.getConditionNoMovement())
					source.setOrder(issuedOrderId, targetD, orderAction)
				else
					let targetI = GetOrderTargetItem()
					if targetI != null
						if issuedOrderId == OrderIds.smart or issuedOrderId == OrderIds.move
							orderAction = new OrderAction(null, null, null, () -> source.removeSourceOrder(), POS_CHECK_RATE, () -> source.getPos().inRange(targetI.getPos(), POS_TOLERANCE_RANGE))
						source.setOrder(issuedOrderId, targetI, orderAction)
	registerPlayerUnitEvent(EVENT_PLAYER_UNIT_ISSUED_ORDER) ->
		let issuedOrderId = GetIssuedOrderId()
		let source = GetOrderedUnit()
		OrderAction orderAction = null
		if issuedOrderId == OrderIds.stop
			orderAction = new OrderAction(null, null, null, () -> source.removeSourceOrder(), MIN_ACTION_SLEEP_TIME, null)
		source.setOrder(issuedOrderId, orderAction)
	registerPlayerUnitEvent(EVENT_PLAYER_UNIT_ISSUED_POINT_ORDER) ->
		let issuedOrderId = GetIssuedOrderId()
		let source = GetOrderedUnit()
		let targetPos = vec2(GetOrderPointX(), GetOrderPointY())
		OrderAction orderAction = null
		if issuedOrderId == OrderIds.smart or issuedOrderId == OrderIds.move or issuedOrderId == OrderIds.attack or issuedOrderId == OrderIds.setrally
			orderAction = new OrderAction(null, null, null, () -> source.removeSourceOrder(), POS_CHECK_RATE, source.getConditionNoMovement())
		source.setOrder(issuedOrderId, targetPos, orderAction)