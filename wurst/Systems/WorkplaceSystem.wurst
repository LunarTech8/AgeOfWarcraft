/*-------------------------------------------------------------
// Version number:
1.0.0

// Description:
Abstract base class for workplace building systems.

// Changelog:
- 1.0.0:
Initial version.
-------------------------------------------------------------*/
package WorkplaceSystem
import ConstantData
import UtilityFunctions
import StorageSystem
import ErrorHandling


// --------------------
// Data code
// --------------------

/** Returns the worker type of the given workplace type. */
function getWorkerUnitId(int workplaceUnitId) returns int
	switch workplaceUnitId
		case UnitIdsCustom.AoW.lumberMill
			return UnitIdsCustom.AoW.peasant
		case UnitIdsCustom.AoW.blacksmith
			return UnitIdsCustom.AoW.peasant
		case UnitIdsCustom.AoW.lumberCamp
			return UnitIdsCustom.AoW.peasant
		case UnitIdsCustom.AoW.townHall
			return UnitIdsCustom.AoW.peasant
	return 0

/** Returns the maximum allowed amount of workers of the given workplace type. */
public function getMaxWorkers(int workplaceUnitId) returns int
	switch workplaceUnitId
		case UnitIdsCustom.AoW.lumberMill
			return 3
		case UnitIdsCustom.AoW.blacksmith
			return 3
		case UnitIdsCustom.AoW.lumberCamp
			return 3
		case UnitIdsCustom.AoW.townHall
			return 3
	return 0


// --------------------
// Functional code
// --------------------

public abstract class Workplace
	protected unit user
	protected group workers

	construct(unit workplace)
		user = workplace
		workers = CreateGroup()

	ondestroy
		workers.destr()

	abstract function transferWares(Storage source, bool takeWares)

	function isValidWorkerType(int unitId) returns bool
		return getWorkerUnitId(user.getUnitId()) == unitId

	function getUnit() returns unit
		return user

	function getWorkerCount() returns int
		return workers.size()

	function getFirstWorker() returns unit
		if workers.size() > 0
			return workers.getUnitAt(0)
		else
			error("Workplace doesn't have any worker")
			return null

	function isWorker(unit worker) returns bool
		return workers.contains(worker)

	function addWorker(unit worker)
		if workers.contains(worker) == false and workers.size() < getMaxWorkers(user.getUnitId())
			workers.addUnit(worker)
		else
			error("Can't add worker to this workplace")

	function removeWorker(unit worker)
		if workers.contains(worker)
			workers.removeUnit(worker)
		else
			error("Can't remove worker from this workplace")