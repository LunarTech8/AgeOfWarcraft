/*-------------------------------------------------------------
// Version number:
1.01

// Description:
Tracks the priority and name of the currently used multiboard for every player.
Checks if a new multiboard can be used through the return value of activateMultiboard.
Also provides standardized multiboard utility functions.

// Changelog:
- 1.01:
Initial version.
-------------------------------------------------------------*/
package MultiboardPrioritySystem
	

// --------------------
// Data code
// --------------------

let countPlayers = 12  // Highest player slot in use

public let headlineIconPath = "UI\\Minimap\\MinimapIconCreepLoc2.blp"
public let subHeadlineIconPath = "UI\\Minimap\\MinimapIconCreepLoc2.blp"


// --------------------
// Functional code
// --------------------

Board array currentBoards

public interface PlayerIDClosure
	function run(int playerID)

class Board
	string name
	int priority
	PlayerIDClosure disableFunc

	construct()
		name = null
		priority = 0
		disableFunc = null

public function isBoardActiv(integer playerID, string name) returns boolean
	return name == currentBoards[playerID].name
	
public function enableBoard(integer playerID, string name, integer priority, PlayerIDClosure disableFunc) returns boolean
	// Check if board is already active:
	if isBoardActiv(playerID, name)
		return true
	// Check if board has required priority:
	let currentBoard = currentBoards[playerID]
	if (priority >= currentBoard.priority)
		// Disable former board:
		if currentBoard.disableFunc != null
			currentBoard.disableFunc.run(playerID)
		// Change to new board:
		currentBoard.disableFunc = disableFunc
		currentBoard.priority = priority
		currentBoard.name = name
		return true
	return false

public function disableBoard(integer playerID, string name) returns boolean
	// Check if board is active:
	if isBoardActiv(playerID, name) == false
		return false
	// Disable former board:
	let currentBoard = currentBoards[playerID]
	if currentBoard.disableFunc != null
		currentBoard.disableFunc.run(playerID)
	// Reset current board:
	currentBoard.disableFunc = null
	currentBoard.priority = 0
	currentBoard.name = null
	return true

/** Adds a standardized multiboard line at the bottom of given multiboard. */
public function addMultiboardLine(multiboard targetMultiboard, string text, string iconPath)
	var lineNumber = MultiboardGetRowCount(targetMultiboard) + 1
	MultiboardSetRowCount(targetMultiboard, lineNumber)
	let multiboardItem = MultiboardGetItem(targetMultiboard, lineNumber - 1, 0)
	MultiboardSetItemValue(multiboardItem, text)
	MultiboardSetItemIcon(multiboardItem, iconPath)
	if iconPath == headlineIconPath
		MultiboardSetItemValueColor(multiboardItem, 255, 0, 0, 255)
	else if iconPath == subHeadlineIconPath
		MultiboardSetItemValueColor(multiboardItem, 255, 200, 0, 255)
	MultiboardSetItemWidth(multiboardItem, 0.15)
	MultiboardReleaseItem(multiboardItem)

init
	// Init variables:
	for i = 0 to countPlayers - 1
		currentBoards[i] = new Board()
		if currentBoards[i] == null
			Log.error("ERROR: MultiboardInfo struct cap exceeded")