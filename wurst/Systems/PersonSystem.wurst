/*-------------------------------------------------------------
// Version number:
1.0.0

// Description:
TODO

// Changelog:
- 1.0.0:
Initial version.
-------------------------------------------------------------*/
package PersonSystem
import OnUnitEnterLeave
import ConstantDataSystem
import MultiboardPrioritySystem
import Icons
import UnitMap
import ErrorHandling
import ClosureTimers
import UtilityFunctions
import HomeSystem
import WorkshopSystem
import InstantDummyCaster


// --------------------
// Data code
// --------------------

let FOOD_ICON_PATH = Icons.bTNMonsterLure
let SLEEP_ICON_PATH = Icons.bTNSleep
let HOME_ICON_PATH = Icons.bTNFarm
let WORKPLACE_ICON_PATH = Icons.bTNWorkshop

let MAX_FOOD = 100.
let MAX_SLEEP = 100.
let MAX_DAYS_NO_FOOD = 4. // Max days of no food before person dies of starvation
let MAX_DAYS_NO_SLEEP = 3.  // Max days of no sleep before person falls asleep on the ground
let DAYS_TILL_EXHAUSTED = 1.  // Days of no sleep before person gets exhausted by sleep deprivation
let STATS_ADJUSTMENT_RATE = INGAME_DAY_DURATION / 24.

int surnameCounter = 0

function isPersonType(int unitId) returns bool
	switch unitId
		case UnitIdsCustom.AoW.peasant
			return true
		case UnitIdsCustom.AoW.footman
			return true
		default
			return false

/** Returns the sleep rate per day for the given building type. */
function getSleepRate(int buildingUnitId) returns real
	switch buildingUnitId
		case 0  // Outside on the ground
			return (MAX_SLEEP / MAX_DAYS_NO_SLEEP) * (24 / 10)
		case UnitIdsCustom.AoW.peasantHouse
			return (MAX_SLEEP / MAX_DAYS_NO_SLEEP) * (24 / 6)
	error("Unregistered buildingUnitId + (" + buildingUnitId.toString() + ") for sleeping")
	return 0.

function getRandomForename() returns string
	let i = GetRandomInt(1, 4)
	switch i
		case 1
			return "Peter"
		case 2
			return "Hans"
		case 3
			return "Theodor"
		case 4
			return "Michael"
		default
			error("Wrong configuration for getRandomForename")
			return null

function getRandomSurname() returns string
	surnameCounter++
	if surnameCounter > 23
		surnameCounter = 1
	switch surnameCounter
		// Source: https://en.wiktionary.org/wiki/Category:English_surnames_from_Old_English
		case 1
			return "Abram"
		case 2
			return "Acker"
		case 3
			return "Acton"
		case 4
			return "Addington"
		case 5
			return "Adley"
		case 6
			return "Ainsley"
		case 7
			return "Ainsworth"
		case 8
			return "Alby"
		case 9
			return "Allerton"
		case 10
			return "Alston"
		case 11
			return "Altham"
		case 12
			return "Alton"
		case 13
			return "Anderton"
		case 14
			return "Ansley"
		case 15
			return "Anstey"
		case 16
			return "Appleton"
		case 17
			return "Asheton"
		case 18
			return "Ashley"
		case 19
			return "Ashton"
		case 20
			return "Astley"
		case 21
			return "Atherton"
		case 22
			return "Atterton"
		case 23
			return "Axton"
		default
			error("Wrong configuration for getRandomSurname")
			return null


// --------------------
// Functional code
// --------------------

let PERSON_MAP = new IterableUnitHashMap<Person>(null)

public class Person
	private unit user
	private string name
	protected real food
	protected real sleep
	protected real sleepRate
	protected Home home
	protected Workshop workplace
	unit enteredBuilding

	construct(unit person, string name)
		user = person
		this.name = name
		food = MAX_FOOD
		sleep = MAX_SLEEP
		sleepRate = 0.
		enteredBuilding = null
		home = null
		workplace = null

	private function sleep(int buildingUnitId)
		if sleepRate > 0.
			Log.error("ERROR: Person is already sleeping")
		sleepRate = getSleepRate(buildingUnitId)

	private function awake()
		if sleepRate <= 0.
			Log.error("ERROR: Person is already awake")
		sleepRate = 0.

	protected function reduceStats() returns bool
		// Adjust food:
		food -= (MAX_FOOD / MAX_DAYS_NO_FOOD) * (STATS_ADJUSTMENT_RATE / INGAME_DAY_DURATION)
		food = min(food, MAX_FOOD)
		// Adjust sleep:
		sleep -= (MAX_SLEEP / MAX_DAYS_NO_SLEEP) * (STATS_ADJUSTMENT_RATE / INGAME_DAY_DURATION)
		sleep += sleepRate * (STATS_ADJUSTMENT_RATE / INGAME_DAY_DURATION)
		sleep = min(sleep, MAX_SLEEP)
		if sleep <= 0.
			if enteredBuilding != null
				leaveBuilding()
			InstantDummyCaster.castTarget(null, AbilityIdsCustom.addSleepingBuff, 1, AbilityIdsCustom.addSleepingBuff.getAbilityOrder(), user)
			sleep(0)
		else if sleep <= DAYS_TILL_EXHAUSTED and user.hasAbility(BuffIdsCustom.exhausted) == false
			InstantDummyCaster.castTarget(null, AbilityIdsCustom.addExhaustedBuff, 1, AbilityIdsCustom.addSleepingBuff.getAbilityOrder(), user)
		else if sleep > DAYS_TILL_EXHAUSTED and user.hasAbility(BuffIdsCustom.exhausted)
			user.removeAbility(BuffIdsCustom.exhausted)
		if sleep >= MAX_SLEEP
			if enteredBuilding == home.getUnit()
				leaveBuilding()
			else
				user.removeAbility(BuffIdsCustom.sleeping)
		return food <= 0.

	function getName() returns string
		return name

	function setHomeBuilding(Home home)
		if this.home != null
			this.home.removeInhabitant(user)
		if home != null
			home.addInhabitant(user)
		this.home = home

	function setWorkplaceBuilding(Workshop workplace)
		if this.workplace != null
			this.workplace.removeWorker(user)
		if workplace != null
			workplace.addWorker(user)
		this.workplace = workplace

	function enterBuilding(unit building)
		if enteredBuilding == null
			enteredBuilding = building
			user.hide()
			let targetHome = building.getHome()
			let targetWorkshop = building.getWorkshop()
			if targetHome != null and targetHome == home
				sleep(building.getUnitId())
			else if targetWorkshop != null and targetWorkshop == workplace
				targetWorkshop.enterBuilding(user)
		else
			Log.error("ERROR: Person is already in a building")

	function leaveBuilding()
		if enteredBuilding != null
			let targetHome = enteredBuilding.getHome()
			let targetWorkshop = enteredBuilding.getWorkshop()
			if targetHome != null and targetHome == home
				awake()
			else if targetWorkshop != null and targetWorkshop == workplace
				targetWorkshop.leaveBuilding(user)
			enteredBuilding = null
			user.show()
		else
			Log.error("ERROR: Person is not in a building")


function getRandomName() returns string
	return getRandomForename() + " " + getRandomSurname()

function unit.addPerson(string name)
	if PERSON_MAP.has(this) == false
		if isPersonType(GetUnitTypeId(this))
			let person = new Person(this, name)
			PERSON_MAP.put(this, person)

function unit.removePerson()
	let person = PERSON_MAP.tryRemove(this)
	if person != null
		destroy person

/** Returns the person of given unit. */
public function unit.getPerson() returns Person
	return PERSON_MAP.tryGet(this)

/** Sets system relevant infos for given object in target multiboard. */
public function multiboard.setObjectInfoMultiboard(Person p) returns bool
	this.addMultiboardLine(p.getName() + ":", HEADLINE_ICON_PATH)
	this.addMultiboardLine("Food: " + p.food.toString(), FOOD_ICON_PATH)
	this.addMultiboardLine("Sleep: " + p.sleep.toString(), SLEEP_ICON_PATH)
	if p.home != null
		this.addMultiboardLine("Home: " + p.home.getUnit().getName(), HOME_ICON_PATH)
	if p.workplace != null
		this.addMultiboardLine("Workplace: " + p.workplace.getUnit().getName(), WORKPLACE_ICON_PATH)
	return true

init
	// Add person to every appropriate new unit:
	onEnter() ->
		getEnterLeaveUnit().addPerson(getRandomName())
	// Remove person from every appropriate removed unit:
	onLeave() ->
		getEnterLeaveUnit().removePerson()
	// Reduce stats:
	doPeriodically(STATS_ADJUSTMENT_RATE) cb ->
		for person in PERSON_MAP
			if person != null and PERSON_MAP.get(person).reduceStats()
				// person.kill()  // DEBUG: