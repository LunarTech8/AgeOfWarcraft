/*-------------------------------------------------------------
// Version number:
1.0.0

// Description:
TODO

// Changelog:
- 1.0.0:
Initial version.
-------------------------------------------------------------*/
package PersonSystem
import OnUnitEnterLeave
import ConstantDataSystem
import MultiboardPrioritySystem
import Icons
import UnitMap
import ErrorHandling
import ClosureTimers
import UtilityFunctions


// --------------------
// Data code
// --------------------

let FOOD_ICON_PATH = Icons.bTNMonsterLure
let SLEEP_ICON_PATH = Icons.bTNSleep
let HOME_ICON_PATH = Icons.bTNFarm
let WORKPLACE_ICON_PATH = Icons.bTNWorkshop

let MAX_FOOD = 100.
let MAX_SLEEP = 100.
let MAX_DAYS_NO_FOOD = 3
let MAX_DAYS_NO_SLEEP = 5
let STATS_ADJUSTMENT_RATE = INGAME_DAY_SECONDS / 24

int surnameCounter = 0

function isPersonType(int unitId) returns bool
	switch unitId
		case UnitIdsCustom.AoW.peasant
			return true
		case UnitIdsCustom.AoW.footman
			return true
		default
			return false

/** Returns the sleep rate per day for the given building type. */
function getSleepRate(int buildingUnitId) returns real
	switch buildingUnitId
		case 0  // Outside on the ground
			return (MAX_SLEEP / MAX_DAYS_NO_SLEEP) * (24 / 10)
		case UnitIdsCustom.AoW.peasantHouse
			return (MAX_SLEEP / MAX_DAYS_NO_SLEEP) * (24 / 6)
	error("Unregistered buildingUnitId + (" + buildingUnitId.toString() + ") for sleeping")
	return 0.

function getRandomForename() returns string
	let i = GetRandomInt(1, 4)
	switch i
		case 1
			return "Peter"
		case 2
			return "Hans"
		case 3
			return "Theodor"
		case 4
			return "Michael"
		default
			error("Wrong configuration for getRandomForename")
			return null

function getRandomSurname() returns string
	surnameCounter++
	if surnameCounter > 23
		surnameCounter = 1
	switch surnameCounter
		// Source: https://en.wiktionary.org/wiki/Category:English_surnames_from_Old_English
		case 1
			return "Abram"
		case 2
			return "Acker"
		case 3
			return "Acton"
		case 4
			return "Addington"
		case 5
			return "Adley"
		case 6
			return "Ainsley"
		case 7
			return "Ainsworth"
		case 8
			return "Alby"
		case 9
			return "Allerton"
		case 10
			return "Alston"
		case 11
			return "Altham"
		case 12
			return "Alton"
		case 13
			return "Anderton"
		case 14
			return "Ansley"
		case 15
			return "Anstey"
		case 16
			return "Appleton"
		case 17
			return "Asheton"
		case 18
			return "Ashley"
		case 19
			return "Ashton"
		case 20
			return "Astley"
		case 21
			return "Atherton"
		case 22
			return "Atterton"
		case 23
			return "Axton"
		default
			error("Wrong configuration for getRandomSurname")
			return null


// --------------------
// Functional code
// --------------------

let PERSON_MAP = new IterableUnitHashMap<Person>(null)

public interface CallbackPerson
	function call(Person person)

public class Person
	private unit user
	private string name
	private CallbackPerson maxSleepCb  // Is called if max sleep value is reached and resolves consequential actions
	protected real food
	protected real sleep
	protected real sleepRate
	unit enteredBuilding
	unit homeBuilding
	unit workplaceBuilding

	construct(unit person, string name)
		user = person
		this.name = name
		food = MAX_FOOD
		sleep = MAX_SLEEP
		sleepRate = 0.
		enteredBuilding = null
		homeBuilding = null
		workplaceBuilding = null

	ondestroy
		if maxSleepCb != null
			destroy maxSleepCb

	protected function reduceStats() returns bool
		food -= (MAX_FOOD / MAX_DAYS_NO_FOOD) * (STATS_ADJUSTMENT_RATE / INGAME_DAY_SECONDS)
		sleep -= (MAX_SLEEP / MAX_DAYS_NO_SLEEP) * (STATS_ADJUSTMENT_RATE / INGAME_DAY_SECONDS)
		sleep += sleepRate * (STATS_ADJUSTMENT_RATE / INGAME_DAY_SECONDS)
		sleep = min(sleep, MAX_SLEEP)
		if sleep >= MAX_SLEEP and maxSleepCb != null
			maxSleepCb.call(this)
			destroy maxSleepCb
			maxSleepCb = null
		return food <= 0.

	function getUnit() returns unit
		return user

	function getName() returns string
		return name

	function sleep(int buildingId, CallbackPerson maxSleepCb)
		if sleepRate > 0.
			Log.error("ERROR: Person is already sleeping")
		sleepRate = getSleepRate(buildingId)
		if this.maxSleepCb != null
			destroy this.maxSleepCb
		this.maxSleepCb = maxSleepCb

	function awake()
		if sleepRate <= 0.
			Log.error("ERROR: Person is already awake")
		sleepRate = 0.


function getRandomName() returns string
	return getRandomForename() + " " + getRandomSurname()

function unit.addPerson(string name)
	if PERSON_MAP.has(this) == false
		if isPersonType(GetUnitTypeId(this))
			let person = new Person(this, name)
			PERSON_MAP.put(this, person)

function unit.removePerson()
	let person = PERSON_MAP.tryRemove(this)
	if person != null
		destroy person

/** Returns the person of given unit. */
public function unit.getPerson() returns Person
	return PERSON_MAP.tryGet(this)

/** Sets system relevant infos for given object in target multiboard. */
public function multiboard.setObjectInfoMultiboard(Person p) returns bool
	this.addMultiboardLine(p.getName() + ":", HEADLINE_ICON_PATH)
	this.addMultiboardLine("Food: " + p.food.toString(), FOOD_ICON_PATH)
	this.addMultiboardLine("Sleep: " + p.sleep.toString(), SLEEP_ICON_PATH)
	if p.homeBuilding != null
		this.addMultiboardLine("Home: " + p.homeBuilding.getName(), HOME_ICON_PATH)
	if p.workplaceBuilding != null
		this.addMultiboardLine("Workplace: " + p.workplaceBuilding.getName(), WORKPLACE_ICON_PATH)
	return true

init
	// Add person to every appropriate new unit:
	onEnter() ->
		getEnterLeaveUnit().addPerson(getRandomName())
	// Remove person from every appropriate removed unit:
	onLeave() ->
		getEnterLeaveUnit().removePerson()
	// Reduce stats:
	doPeriodically(STATS_ADJUSTMENT_RATE) cb ->
		for person in PERSON_MAP
			if person != null and PERSON_MAP.get(person).reduceStats()
				// person.kill()  // DEBUG: