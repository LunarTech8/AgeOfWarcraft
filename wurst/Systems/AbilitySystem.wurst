/*-------------------------------------------------------------
// Version number:
1.0.0

// Description:
Handles all custom abilities and allows for the addition of custom, unrestricted functionality.

// Changelog:
- 1.0.0:
Initial version.
-------------------------------------------------------------*/
package AbilitySystem
import RegisterEvents
import ConstantDataSystem
import UtilityFunctions
import Entity
import Stock
import StorageSystem
import BuildingSystem
import ResourceSystem
import OrderSystem
import Ability_Harvest
import InstantDummyCaster
import DummyRecycler
import ClosureTimers
import WorkshopSystem
import HomeSystem
import PersonSystem


// --------------------
// Data code
// --------------------

let INFO_MSG_TIME = 2.

enum Validity
	VALID
	UNREGISTERED
	ERROR
	INVALID_SOURCE
	INVALID_TARGET
	WARES_NOT_AVAILABLE
	WORKERS_NOT_AVAILABLE
	NO_FREE_UNIT_SLOT
	NO_FREE_STORAGE
	NO_REQUIRED_WARES
	WORKER_ALREADY_BUILDING
	RESOURCE_IS_DEPLETED

function getInvalidMessageText(int abilityId, Validity val) returns string
	switch abilityId
		case AbilityIdsCustom.transferWares
			switch val
				case INVALID_SOURCE
					return "Unit can't transfer wares"
				case INVALID_TARGET
					return "Can't transfer wares to this kind of target"
				case WARES_NOT_AVAILABLE
					return "No wares to transfer are available"
				case NO_FREE_STORAGE
					return "Target has no free storage for transfer"
				case NO_REQUIRED_WARES
					return "Target has no required wares left"
				default
					return null
		case AbilityIdsCustom.build
			switch val
				case INVALID_SOURCE
					return "Worker can't build at target building site type"
				case INVALID_TARGET
					return "Build target is no building site"
				case WARES_NOT_AVAILABLE
					return "Not all required wares are available for building"
				case WORKER_ALREADY_BUILDING
					return "Worker is already building"
				default
					return null
		case AbilityIdsCustom.harvest
			switch val
				case INVALID_SOURCE
					return "No storage for harvest"
				case INVALID_TARGET
					return "Harvest target is no resource"
				case NO_FREE_UNIT_SLOT
					return "Target already reached its maximum of concurrent harvesters"
				case NO_FREE_STORAGE
					return "No free storage for harvest"
				case RESOURCE_IS_DEPLETED
					return "Harvest target is already depleted"
				default
					return null
		case AbilityIdsCustom.enterBuilding
			switch val
				case INVALID_SOURCE
					return "Unit can't enter target building type"
				case INVALID_TARGET
					return "Can't enter this kind of building"
				case NO_FREE_UNIT_SLOT
					return "Target already reached its maximum of concurrent units"
				default
					return null
		case AbilityIdsCustom.removeWorker
			switch val
				case WORKERS_NOT_AVAILABLE
					return "No workers left to remove"
				default
					return null
		case AbilityIdsCustom.targetDestructable
			switch val
				case INVALID_TARGET
					return "Target is no destructable"
				default
					return null
	return null


// --------------------
// Functional code
// --------------------

/** Perform harvest and returns if another harvest with the given target is still valid. */
function unit.harvest(entity target) returns bool
	let storage = this.getStorage()
	let resource = target.getResource(true)
	// Work resource:
	let wares = resource.harvest(this.getUnitId())
	if wares != null
		// Transfere wares:
		for iWare in wares
			// Check resource count:
			let resourceWareCount = resource.getWareCount(iWare.wareType)
			let freeCapacity = storage.getFreeCapacity()
			if resourceWareCount > 0 and freeCapacity > 0
				// Limit by resource count:
				if resourceWareCount < iWare.count
					iWare.count = resourceWareCount
				// Limit by storage free capacity:
				if freeCapacity < iWare.count
					iWare.count = freeCapacity
				// Add ware to storage and remove from resource:
				storage.addWare(iWare)
				resource.removeWare(iWare)
		destroy wares
		// Check for resource depletion:
		if resource.checkForDepletionKill()
			target.kill()
			return false
	return this.isAbilityValid(AbilityIdsCustom.harvest, target)

/** Transfer wares from the unit to the given target. */
function unit.transferWares(unit target)
	// Check if wares can be transfered:
	let sourceStorage = this.getStorage()
	if sourceStorage != null
		// Check for possible transfer methods based on target:
		let targetStorage = target.getStorage()
		if targetStorage != null
			// Give wares to target storage:
			sourceStorage.transferWares(targetStorage)
		let targetWorkshop = target.getWorkshop()
		if targetWorkshop != null
			// Exchange wares with source storage:
			targetWorkshop.transferWares(sourceStorage, true)
		let targetBuildingSite = target.getBuildingSite()
		if targetBuildingSite != null
			// Take wares from source storage:
			targetBuildingSite.transferWares(sourceStorage)
			// Call over idel workers if no required wares are missing:
			if targetBuildingSite.isEmpty()
				targetBuildingSite.callOverIdleWorkers()

/** Run general reaction on invalid ability command. */
function unit.reactOnInvalidAbility(int abilityId, Validity val)
	if val == Validity.VALID or val == Validity.UNREGISTERED
		Log.error("ERROR: Given validity is not invalid (" + (val castTo int).toString() + ")")
	// React on invalid command:
	let owner = this.getOwner()
	if IsUnitSelected(this, owner)
		let messageText = getInvalidMessageText(abilityId, val)
		if messageText == null
			Log.error("ERROR: Unregistered invalidity message text for " + abilityId.toString() + " / " + (val castTo int).toString())
		printTimedToPlayer("Invalid: " + messageText, INFO_MSG_TIME, owner)
	this.abortOrder()

/** Returns the units validity for casting given ability on given target. */
function unit.getAbilityValidity(int abilityId, entity target) returns Validity
	if abilityId == AbilityIdsCustom.transferWares
		if target.userUnit == null
			return Validity.INVALID_TARGET
		let targetUnit = target.assertUnit()
		// Check if source and target are valid:
		let sourceStorage = this.getStorage()
		if sourceStorage == null
			return Validity.INVALID_SOURCE
		let targetStorage = targetUnit.getStorage()
		let targetWorkshop = targetUnit.getWorkshop()
		let targetBuildingSite = targetUnit.getBuildingSite()
		if targetStorage == null and targetWorkshop == null and targetBuildingSite == null
			return Validity.INVALID_TARGET
		// Check target type specific validities:
		if targetStorage != null
			// Check if target has free storage:
			if targetStorage.getFreeCapacity() <= 0
				return Validity.NO_FREE_STORAGE
			// Check if source has wares that can be transfered:
			if sourceStorage.getUsedCapacity() <= 0
				return Validity.WARES_NOT_AVAILABLE
		else if targetBuildingSite != null
			// Check if target requires wares:
			if targetBuildingSite.isEmpty()
				return Validity.NO_REQUIRED_WARES
			// Check if source has resources that can be transfered:
			if sourceStorage.containsAny(targetBuildingSite) == false
				return Validity.WARES_NOT_AVAILABLE
		else if targetWorkshop != null
			// Check if source has educts or target has products that can be transfered:
			let educts = targetWorkshop.getEducts()
			let hasAnyEducts = sourceStorage.hasWaresAny(educts)
			destroy educts
			if hasAnyEducts == false and targetWorkshop.getStoredProducts() <= 0
				return Validity.WARES_NOT_AVAILABLE
	else if abilityId == AbilityIdsCustom.build
		if target.userUnit == null
			return Validity.INVALID_TARGET
		let targetUnit = target.assertUnit()
		// Check if source and target are valid:
		if targetUnit.getUnitId().isValidWorkerType(this.getUnitId()) == false
			return Validity.INVALID_SOURCE
		let buildingSite = targetUnit.getBuildingSite()
		if buildingSite == null
			return Validity.INVALID_TARGET
		// Check if required wares are available:
		if buildingSite.isEmpty() == false
			return Validity.WARES_NOT_AVAILABLE
		// Check if worker is already building:
		if this.getBuildingSiteOfWorker() != null
			return Validity.WORKER_ALREADY_BUILDING
	else if abilityId == AbilityIdsCustom.harvest
		// Check if source and target are valid:
		let storage = this.getStorage()
		if storage == null
			return Validity.INVALID_SOURCE
		let resource = target.getResource(false)
		if resource == null
			return Validity.INVALID_TARGET
		// Check if wares can be harvested:
		if storage.getFreeCapacity() <= 0
			return Validity.NO_FREE_STORAGE
		else if resource.isEmpty()
			return Validity.RESOURCE_IS_DEPLETED
		else if resource.getFreeWorkerSlots() <= 0
			return Validity.NO_FREE_UNIT_SLOT
	else if abilityId == AbilityIdsCustom.enterBuilding
		if target.userUnit == null
			return Validity.INVALID_TARGET
		let targetUnit = target.assertUnit()
		// Check if source and target are valid:
		let targetWorkshop = targetUnit.getWorkshop()
		let targetHome = targetUnit.getHome()
		if targetWorkshop == null and targetHome == null
			return Validity.INVALID_TARGET
		// Check target type specific validities:
		if targetWorkshop != null
			// Check if source is allowed to work at target:
			if targetWorkshop.isValidWorkerType(this.getUnitId()) == false
				return Validity.INVALID_SOURCE
			// Check if target has free work slot:
			if targetWorkshop.getWorkerCount() >= getMaxWorkers(targetUnit.getUnitId())
				return Validity.NO_FREE_UNIT_SLOT
		else if targetHome != null
			// Check if source can inhabit target:
			let sourcePerson = this.getPerson()
			if sourcePerson == null or targetHome.isValidInhabitantType(this.getUnitId()) == false
				return Validity.INVALID_SOURCE
			// Check if source is inhabitant or target has free apartement slot:
			if targetHome.isInhabitant(sourcePerson) == false and targetHome.getInhabitantCount() >= getMaxInhabitants(targetUnit.getUnitId())
				return Validity.NO_FREE_UNIT_SLOT
	else if abilityId == AbilityIdsCustom.removeWorker
		// Check if source is valid:
		let sourceWorkshop = this.getWorkshop()
		if sourceWorkshop == null
			Log.error("ERROR: Casting building is no workshop (" + this.getName() + ")")
			return Validity.ERROR
		// Check if source has workers:
		if sourceWorkshop.getWorkerCount() <= 0
			return Validity.WORKERS_NOT_AVAILABLE
	else if abilityId == AbilityIdsCustom.changeProduct
		// Check if source is valid:
		let sourceWorkshop = this.getWorkshop()
		if sourceWorkshop == null
			Log.error("ERROR: Casting building is no workshop (" + this.getName() + ")")
			return Validity.ERROR
	else if abilityId == AbilityIdsCustom.targetDestructable
		// Check if target is valid:
		if target.userDest == null or target.userUnit != null
			return Validity.INVALID_TARGET
	else
		// Unregistered abilityId:
		return Validity.UNREGISTERED
	// No validity check failed:
	return Validity.VALID

/** Returns if casting given ability by the unit on given target is valid. */
public function unit.isAbilityValid(int abilityId, entity target) returns bool
	return this.getAbilityValidity(abilityId, target) == Validity.VALID

init
	// Register abilities being cast:
	registerPlayerUnitEvent(EVENT_PLAYER_UNIT_SPELL_CAST) ->
		let source = GetTriggerUnit()
		let target = entity(GetSpellTargetUnit(), GetSpellTargetDestructable())
		let abilityId = GetSpellAbilityId()
		let sourceUnitId = source.getUnitId()
		if sourceUnitId != DUMMY_CASTER_UNIT_ID and sourceUnitId != DUMMY_UNIT_ID  // Ignore dummy orders
			// Cancel current target order for clean cast validity and ordering:
			let orderSource = source.getOrderSource()
			if orderSource == null
				Log.warn("WARNING: " + source.getName() + " cast " + abilityId.getOrderName() + " on " + target.getName() + " without being registered as an OrderSource")
			else
				orderSource.cancel()
			// Check ability validity:
			let val = source.getAbilityValidity(abilityId, target)
			if val == Validity.VALID
				switch abilityId
					case AbilityIdsCustom.transferWares
						// Transfer wares from source to target:
						source.transferWares(target.assertUnit())
					case AbilityIdsCustom.build
						// Add worker to building site:
						let targetBuildingSite = target.assertUnit().getBuildingSite()
						CallbackSimple invalidateCb = () ->
							doAfter(MIN_TRIGGER_SLEEP_TIME) ->
								let nextBuildingSite = source.findNextBuildingSite()
								if nextBuildingSite != null
									source.issueTargetAbilityOrder(AbilityIdsCustom.build, nextBuildingSite, true)
						CallbackSimple cancelCb = () ->
							targetBuildingSite.removeWorker(source)
						source.setOrder(AbilityIdsCustom.build, target, new OrderAction(invalidateCb, cancelCb))
						targetBuildingSite.addWorker(source)
					case AbilityIdsCustom.harvest
						// Perform harvest after ability is finished:
						let targetResource = target.getResource(true)
						CallbackSimple invalidateCb = () ->
							var nextResource = source.findNextResource()  // Look for new resource in range of worker
							if nextResource.isEmpty()
								nextResource = source.findNextResource(target.getPos())  // Look for new resource in range of last target
							if nextResource.isEmpty() == false
								source.issueTargetAbilityOrder(AbilityIdsCustom.harvest, nextResource.getWidget(), true)
							else
								printTimedToPlayer("Warning: Worker has no resource in range anymore", INFO_MSG_TIME, source.getOwner())
								source.abortOrder()
						CallbackSimple cancelCb = () ->
							targetResource.removeWorker()
						CallbackSimple finishCb = () ->
							targetResource.removeWorker()
							if source.harvest(target)
								source.issueTargetAbilityOrder(AbilityIdsCustom.harvest, target.getWidget(), true)  // Auto-recast on same target
							else
								let nextResource = source.findNextResource()
								if nextResource.isEmpty() == false
									source.issueTargetAbilityOrder(AbilityIdsCustom.harvest, nextResource.getWidget(), true)  // Auto-recast on new target
								else
									printTimedToPlayer("Warning: Worker has no resource in range anymore", INFO_MSG_TIME, source.getOwner())
									source.abortOrder()
						source.setOrder(AbilityIdsCustom.harvest, target, new OrderAction(invalidateCb, cancelCb, finishCb, AbilityData_Harvest.cooldown, null))
						targetResource.addWorker()
					case AbilityIdsCustom.enterBuilding
						let targetUnit = target.assertUnit()
						let targetWorkshop = targetUnit.getWorkshop()
						let targetHome = targetUnit.getHome()
						if targetWorkshop != null
							// Transfer educts and add source to target workshop as worker:
							targetWorkshop.transferWares(source.getStorage(), false)
							targetWorkshop.addWorker(source)
						else if targetHome != null
							// Add source to target home as inhabitant or enter it:
							let sourcePerson = source.getPerson()
							if targetHome.isInhabitant(sourcePerson)
								targetHome.enterBuilding(sourcePerson)
							else
								targetHome.addInhabitant(sourcePerson)
					case AbilityIdsCustom.removeWorker
						// Remove a worker from source workshop:
						source.getWorkshop().removeWorker()
					case AbilityIdsCustom.changeProduct
						// Cancel current production and change it to the next variant:
						source.getWorkshop().changeProduct()
					default
						Log.error("ERROR: Unmapped ability (" + abilityId.getOrderName() + ")")
			else if val != Validity.UNREGISTERED
				source.reactOnInvalidAbility(abilityId, val)
	// Register issued ability orders:
	registerPlayerUnitEvent(EVENT_PLAYER_UNIT_ISSUED_TARGET_ORDER) ->
		let issuedOrderId = GetIssuedOrderId()
		let source = GetOrderedUnit()
		// Check for custom ability:
		let orderName = issuedOrderId.getOrderName(source, true)
		if orderName != null
			// Override registered order in OrderSystem to add fitting OrderAction and target handling (works because through the dependency this function is called afterwards):
			let abilityId = orderName.getOrderNameAbility()
			let target = entity(GetOrderTargetUnit(), GetOrderTargetDestructable())
			var val = source.getAbilityValidity(abilityId, target)
			if val == Validity.VALID
				switch orderName
					case "harvest"
						let targetResource = target.getResource(true)
						CallbackSimple invalidateCb = () ->
							let nextResource = source.findNextResource()
							if nextResource.isEmpty() == false
								source.issueTargetAbilityOrder(AbilityIdsCustom.harvest, nextResource.getWidget(), true)
						CallbackSimple cancelCb = () ->
							targetResource.removeWorker()
						source.setOrder(issuedOrderId, target, new OrderAction(invalidateCb, cancelCb))
						targetResource.addWorker()  // Reserve worker slot to avoid that too many workers target the same resource
					case "build"
						CallbackSimple invalidateCb = () ->
							let nextBuildingSite = source.findNextBuildingSite()
							if nextBuildingSite != null
								source.issueTargetAbilityOrder(AbilityIdsCustom.build, nextBuildingSite, true)
						source.setOrder(issuedOrderId, target.assertUnit(), new OrderAction(invalidateCb, null))
					case "target destructable"
						if source.hasAbility(AbilityIdsCustom.harvest)
							val = source.getAbilityValidity(AbilityIdsCustom.harvest, target)
							if val == Validity.VALID
								source.issueTargetAbilityOrder(AbilityIdsCustom.harvest, target.getWidget(), true)
							else if val == Validity.NO_FREE_UNIT_SLOT
								let nextResource = source.findNextResource(target.getPos())
								if nextResource.isEmpty() == false
									source.issueTargetAbilityOrder(AbilityIdsCustom.harvest, nextResource.getWidget(), true)
								else
									printTimedToPlayer("Invalid: No free resource in range", INFO_MSG_TIME, source.getOwner())
									source.abortOrder()
							else
								source.reactOnInvalidAbility(AbilityIdsCustom.harvest, val)
						else
							source.issueTargetOrder("attack", target.getWidget())
			else if val != Validity.UNREGISTERED
				source.reactOnInvalidAbility(abilityId, val)