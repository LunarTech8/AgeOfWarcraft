/*-------------------------------------------------------------
// Version number:
1.0.0

// Description:
Handles storage buildings that act as ware drop off centres.
Workers fetch/deliver wares from/to other workplace buildings as required.

// Changelog:
- 1.0.0:
Initial version.
-------------------------------------------------------------*/
package DepositorySystem
import ConstantData
import UnitMap
import LinkedList
import Stock
import UtilityFunctions
import MultiboardPrioritySystem
import UnitIndexer
import Icons
import RegisterEvents
import ErrorHandling
import StorageSystem
import WorkplaceSystem
import WorkshopSystem
import GatherplaceSystem
import OrderSystem


// --------------------
// Data code
// --------------------

let MAX_AUTO_ORDER_RANGE = 1024.  // TODO: replace with taking all buildings of same settlement into account
let WORKERS_ICON_PATH = Icons.bTNBash

/** Returns the maximum ware capacity of the given depository type. */
function getDepositoryMaxCapacity(int depositoryUnitId) returns int
	switch depositoryUnitId
		case UnitIdsCustom.AoW.townHall
			return 500
		default
			return 0


// --------------------
// Functional code
// --------------------

let DEPOSITORY_MAP = new IterableUnitHashMap<Depository>(null)

public class Depository extends Workplace
	private Storage storage

	construct(unit depository)
		super(depository)
		storage = new Storage(depository, getDepositoryMaxCapacity(GetUnitTypeId(depository)))

	ondestroy
		destroy storage

	function getStorage() returns Storage
		return storage

	/** Searches a work task for the given worker (expecting him to be near/in the building). Returns if a task could be found. */
	function findWorkOrder(unit worker) returns bool
		// Search for workshop in need of educts:
		var target = this.findNextWorkshopInNeedOfEducts()
		if target != null
			// Give needed educts to worker:
			let targetWorkshop = target.getWorkshop()
			let targetEducts = targetWorkshop.getEducts()
			let targetStock = targetWorkshop.getStock()
			let workerStorage = worker.getStorage()
			for iWare in targetEducts
				let wareCount = min(iWare.count * MAX_STORABLE_EDUCTS - targetStock.getWareCount(iWare.wareType), storage.getWareCount(iWare.wareType), workerStorage.getFreeCapacity())
				if wareCount > 0
					// Transfer ware:
					storage.removeWare(ware(iWare.wareType, wareCount))
					workerStorage.addWare(ware(iWare.wareType, wareCount))
			destroy targetEducts
			// Order ware transfer:
			worker.setOrder(AbilityIdsCustom.transferWares, target)
			return true
		// Search for workplace with products:
		target = this.findNextWorkplaceWithProducts()
		if target != null
			// Order ware transfer:
			worker.setOrder(AbilityIdsCustom.transferWares, target)
			return true
		// Nothing to do at the moment:
		return false

	/** Transfers as many wares as possible from source to this depository. */
	override function transferWares(Storage source, bool _takeWares)
		// Look for wares in source storage:
		let wares = source.getWares()
		for iWare in wares
			let wareCount = min(iWare.count, storage.getFreeCapacity())
			if wareCount > 0
				// Transfer ware:
				source.removeWare(ware(iWare.wareType, wareCount))
				storage.addWare(ware(iWare.wareType, wareCount))
		destroy wares


function unit.addDepository() returns bool
	if DEPOSITORY_MAP.has(this) == false and getDepositoryMaxCapacity(this.getUnitId()) > 0
		DEPOSITORY_MAP.put(this, new Depository(this))
		return true
	return false

function unit.removeDepository()
	let depository = DEPOSITORY_MAP.tryRemove(this)
	if depository != null
		destroy depository

/** Returns next valid workshop unit in need of educts for this depository. */
function Depository.findNextWorkshopInNeedOfEducts() returns unit
	unit bestBuilding = null
	var bestNeededEducts = 1
	var bestDistanceSq = REAL_MAX
	// Check if wares are available:
	let sourceStorage = this.getStorage()
	if sourceStorage.isEmpty() == false
		// Search buildings in range:
		let sourcePos = this.getUnit().getPos()
		ENUM_GROUP.enumUnitsInRange(sourcePos, MAX_AUTO_ORDER_RANGE)
		for target from ENUM_GROUP
			let workshop = target.getWorkshop()
			if workshop != null and sourceStorage.hasWaresAny(workshop.getEducts())
				let neededEducts = MAX_STORABLE_EDUCTS - workshop.getStoredEductsCount()
				let distanceSq = sourcePos.distanceToSq(target.getPos())
				// Get workshop that needs the most educts and is closest:
				if neededEducts > bestNeededEducts or (neededEducts == bestNeededEducts and distanceSq < bestDistanceSq)
					bestBuilding = target
					bestNeededEducts = neededEducts
					bestDistanceSq = distanceSq
	return bestBuilding

/** Returns next valid workshop or gatherplace unit with products for this depository. */
function Depository.findNextWorkplaceWithProducts() returns unit
	unit bestBuilding = null
	var bestAvailableProducts = 1
	var bestDistanceSq = REAL_MAX
	// Search buildings in range:
	let sourcePos = this.getUnit().getPos()
	ENUM_GROUP.enumUnitsInRange(sourcePos, MAX_AUTO_ORDER_RANGE)
	for target from ENUM_GROUP
		let workshop = target.getWorkshop()
		let gatherplace = target.getGatherplace()
		var availableProducts = 0
		if workshop != null
			availableProducts = workshop.getStoredProductsCount()
		else if gatherplace != null
			availableProducts = gatherplace.getStoredProductsCount()
		let distanceSq = sourcePos.distanceToSq(target.getPos())
		// Get workplace that has the most available products and is closest:
		if availableProducts > bestAvailableProducts or (availableProducts == bestAvailableProducts and distanceSq < bestDistanceSq)
			bestBuilding = target
			bestAvailableProducts = availableProducts
			bestDistanceSq = distanceSq
	return bestBuilding

/** Returns if given unit is a depository. */
public function unit.isDepository() returns bool
	return DEPOSITORY_MAP.has(this)

/** Returns the depository of given unit. */
public function unit.getDepository() returns Depository
	return DEPOSITORY_MAP.tryGet(this)

/** Creates and returns a depository building with given values. */
public function createDepositoryBuilding(player owner, int unitId, vec2 pos, angle facing) returns unit
	let building = createUnit(owner, unitId, pos, facing)
	if building.addDepository() == false
		error("Could not create " + building.getName() + " as depository building")
	return building

/** Try to set system relevant infos for given object in this multiboard. Returns if it could be set. */
public function multiboard.trySetObjectInfoMultiboard(Depository object) returns bool
	if object == null
		return false
	let storage = object.getStorage()
	this.addMultiboardLine("Depository: " + object.user.getName(), HEADLINE_ICON_PATH)
	this.addMultiboardLine("Workers: " + object.getWorkerCount().toString() + "/" + object.getMaxWorkerSlots().toString(), WORKERS_ICON_PATH)
	this.addMultiboardLine("Capacity: " + storage.getUsedCapacity().toString() + "/" + storage.getMaxCapacity().toString(), SUB_HEADLINE_ICON_PATH)
	for i = 0 to (storage.getAmountOfWareTypes() - 1)
		let ware = storage.getWare(i)
		this.addMultiboardLine(storage.getWareCount(ware.wareType).toString() + " " + ware.toString(true), ware.getIconPath())
	return true

init
	// Add depository to every appropriate new unit:
	registerPlayerUnitEvent(EVENT_PLAYER_UNIT_UPGRADE_FINISH, () -> GetTriggerUnit().addDepository())
	// Remove depository from every appropriate removed unit:
	onUnitDeindex(() -> getIndexingUnit().removeDepository())