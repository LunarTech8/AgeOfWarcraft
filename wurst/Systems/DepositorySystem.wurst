/*-------------------------------------------------------------
// Version number:
1.0.0

// Description:
Handles storage buildings that act as ware drop off centres.
Workers fetch/deliver wares from/to other workplace buildings as required.

// Changelog:
- 1.0.0:
Initial version.
-------------------------------------------------------------*/
package DepositorySystem
import ConstantData
import UnitMap
import LinkedList
import Stock
import UtilityFunctions
import MultiboardPrioritySystem
import UnitIndexer
import OnUnitEnterLeave
import Icons
import RegisterEvents
import StorageSystem
import WorkplaceSystem


// --------------------
// Data code
// --------------------

let WORKERS_ICON_PATH = Icons.bTNBash

/** Returns the maximum ware capacity of the given depository type. */
function getDepositoryMaxCapacity(int depositoryUnitId) returns int
	switch depositoryUnitId
		case UnitIdsCustom.AoW.townHall
			return 500
		default
			return 0


// --------------------
// Functional code
// --------------------

let DEPOSITORY_MAP = new IterableUnitHashMap<Depository>(null)

public class Depository extends Workplace
	private Storage storage

	construct(unit depository)
		super(depository)
		storage = new Storage(depository, getDepositoryMaxCapacity(GetUnitTypeId(depository)))

	ondestroy
		destroy storage
		// TEST: check if show is called before ondestroy in Workplace
		for worker in workers
			worker.show()

	function getStorage() returns Storage
		return storage

	function orderWorking()
		for worker in workers
			// TODO: only for workers that are in the building
			// TODO: find workshop that requires wares from depository and deliver them
			// TODO: else find fullest workshop/gatherplace and take wares from there
			// worker.issueTargetAbilityOrder(AbilityIdsCustom.transferWares, targetBuilding, true)

	/** Transfers as many wares as possible from source to this depository. */
	override function transferWares(Storage source, bool _takeWares)
		// Look for wares in source storage:
		let wares = source.getWares()
		for iWare in wares
			let wareCount = min(iWare.count, storage.getFreeCapacity())
			if wareCount > 0
				// Transfer ware:
				source.removeWare(ware(iWare.wareType, wareCount))
				storage.addWare(ware(iWare.wareType, wareCount))
		destroy wares


function unit.addDepository()
	if DEPOSITORY_MAP.has(this) == false and getDepositoryMaxCapacity(this.getUnitId()) > 0
		DEPOSITORY_MAP.put(this, new Depository(this))

function unit.removeDepository()
	let depository = DEPOSITORY_MAP.tryRemove(this)
	if depository != null
		destroy depository

/** Returns the depository of given unit. */
public function unit.getDepository() returns Depository
	return DEPOSITORY_MAP.tryGet(this)

/** Sets system relevant infos for given object in target multiboard. */
public function multiboard.setObjectInfoMultiboard(Depository d) returns bool
	let storage = d.getStorage()
	this.addMultiboardLine("Depository:", HEADLINE_ICON_PATH)
	this.addMultiboardLine("Workers: " + d.getWorkerCount().toString(), WORKERS_ICON_PATH)
	this.addMultiboardLine("Capacity: " + storage.getUsedCapacity().toString() + "/" + storage.getMaxCapacity().toString(), SUB_HEADLINE_ICON_PATH)
	let wares = storage.getWares()
	for ware in wares
		this.addMultiboardLine(storage.getWareCount(ware.wareType).toString() + " " + ware.toString(true), ware.getIconPath())
	destroy wares
	return true

init
	// Add depository to every appropriate new unit:
	onEnter() ->
		getEnterLeaveUnit().addDepository()
	// Remove depository from every appropriate removed unit:
	onUnitDeindex() ->
		getIndexingUnit().removeDepository()
	// Register construction finishes:
	registerPlayerUnitEvent(EVENT_PLAYER_UNIT_UPGRADE_FINISH) ->
		GetTriggerUnit().addDepository()