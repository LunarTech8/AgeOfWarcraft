/*-------------------------------------------------------------
// Version number:
1.01

// Description:
Allows buildings to require wares as building cost before the building process can be started. Also allows for worker and building type dependant build speed.
Uses the upgrade mechanism from a general building ground to have a fully controllable building progress.
Dynamically adjustes the building health stats based on the building progress.

// Changelog:
- 1.01:
Initial version.
-------------------------------------------------------------*/
package BuildingSystem
import RegisterEvents
import InstantDummyCaster
import OnUnitEnterLeave
import ClosureTimers
import LinkedList
import HashMap
import Icons
import ConstantDataSystem
import MultiboardPrioritySystem
import UtilityFunctions
import Stock
import StorageSystem
import Unit_TownHall


// --------------------
// Data code
// --------------------

let BUILDING_ADJUSTMENT_RATE = 0.1
let BUILDING_START_HP_PERCENTAGE = 0.1  // Has to be smaller than 1 and bigger than 0
let MAX_AUTO_ORDER_RANGE = 1024.
let BUILDING_GROUND_UNIT_ID = UnitIdsCustom.buildingGround
let BUILD_PROGRESS_ICON_PATH = Icons.bTNEngineeringUpgrade
let BUILD_TIME_LEFT_ICON_PATH = Icons.bTNStatUp
let WORKERS_ICON_PATH = Icons.bTNBash

function getRequiredWares(int buildingUnitId) returns LinkedList<ware>
	var wares = new LinkedList<ware>()
	switch buildingUnitId
		case UnitIdsCustom.farm
			wares.add(ware(WareType.Wood, 4))
		case UnitIdsCustom.townHall
			wares.add(ware(WareType.Wood, 4))
			wares.add(ware(WareType.Stone, 3))
	return wares

function getUnitWorkPower(int workerUnitId, int buildingUnitId) returns real
	switch workerUnitId
		case UnitIdsCustom.peasant
			switch buildingUnitId
				case UnitIdsCustom.farm
					return 0.05
				case UnitIdsCustom.townHall
					return 0.01
	return 0.

function getBuildingScaling(int buildingUnitId) returns real
	switch buildingUnitId
		case UnitIdsCustom.farm
			return 1.
		case UnitIdsCustom.townHall
			return UnitData_Townhall.scalingValue
	return 0.


// --------------------
// Functional code
// --------------------

let BUILDING_SITE_MAP = new IterableMap<unit, BuildingSite>  // TODO: maybe make a general unit to class hash map system with corresponding utility functions
let WORKER_MAP = new HashMap<unit, BuildingSite>  // TODO: maybe make a general unit to class hash map system with corresponding utility functions

class BuildingSite extends Stock
	private unit building
	private real fullHP
	private group workers
	private real workProgress
	private real workPower
	private int upgradeProgress

	construct(unit building, real fullHP, LinkedList<ware> requiredWares)
		super(requiredWares)
		this.building = building
		this.fullHP = fullHP
		workers = CreateGroup()
		workProgress = 0.
		workPower = 0.
		upgradeProgress = 1

	ondestroy
		for worker in workers
			removeWorker(worker)
			doAfter(MIN_TRIGGER_SLEEP_TIME, () -> worker.issueTargetAbilityOrder(AbilityIdsCustom.build, worker.getPos().findNextBuildingSite(worker.getOwner()), true))
		workers.destr()

	function getWorkProgress() returns real
		return workProgress

	function getWorkPower() returns real
		return workPower

	function getWorkerCount() returns int
		return workers.size()

	function addWorker(unit worker)
		if WORKER_MAP.has(worker) == false and workers.contains(worker) == false
			WORKER_MAP.put(worker, this)
			workPower += getUnitWorkPower(worker.getUnitId(), building.getUnitId())
			workers.addUnit(worker)
			InstantDummyCaster.castTarget(null, AbilityIdsCustom.addBuildingBuff, 1, AbilityIdsCustom.addBuildingBuff.getAbilityOrder(), worker)
			doAfter(MIN_TRIGGER_SLEEP_TIME, () -> SetUnitAnimation(worker, "work"))
		else
			Log.error("ERROR: can't add worker to this building site")

	function removeWorker(unit worker)
		if WORKER_MAP.get(worker) == this and workers.contains(worker)
			WORKER_MAP.remove(worker)
			workPower -= getUnitWorkPower(worker.getUnitId(), building.getUnitId())
			workers.removeUnit(worker)
			ResetUnitAnimation(worker)
			worker.removeAbility(BuffIdsCustom.building)
		else
			Log.error("ERROR: can't remove worker from this building site")

	function adjustProgress() returns bool
		if workPower > 0.
			// Adjust work progress:
			workProgress += workPower * BUILDING_ADJUSTMENT_RATE
			if workProgress >= 1.
				// Finish construction:
				UnitSetUpgradeProgress(building, 100)
				return true
			else
				// Recalculate values:
				building.setMaxHP(max(1, (fullHP * (workProgress * (1 - BUILDING_START_HP_PERCENTAGE) + BUILDING_START_HP_PERCENTAGE)).toInt()))
				building.addHP(fullHP * (1 - BUILDING_START_HP_PERCENTAGE) * workPower * BUILDING_ADJUSTMENT_RATE)
				upgradeProgress = min(max(1, (workProgress * 100.).toInt()), 99)
		// Always adjust upgrade progress so that it stays correct:
		UnitSetUpgradeProgress(building, upgradeProgress)
		return false

	function callOverIdleWorkers(unit unconditionedOrderWorker)
		// Order nearby idle workers to build on building site:
		ENUM_GROUP.enumUnitsInRange(building.getPos(), MAX_AUTO_ORDER_RANGE, null)
		let owner = building.getOwner()
		for worker from ENUM_GROUP
			if building.getUnitId().isValidWorkerType(worker.getUnitId()) and worker.getOwner() == owner and (worker.getCurrentOrder() == 0 or worker == unconditionedOrderWorker) and worker.hasAbility(BuffIdsCustom.building) == false
				worker.issueTargetAbilityOrder(AbilityIdsCustom.build, building, true)

	function transferWares(Storage source)
		var leftRequiredWares = new LinkedList<ware>()
		// Look through all required wares:
		for i = 0 to getAmountOfWareTypes() - 1
			var ware = getWare(i)
			var count = source.getWareCount(ware.wareType)
			if count < ware.count
				// Note down still missing wares:
				leftRequiredWares.add(ware(ware.wareType, ware.count - count))
			else
				// Limit taken wares to required amount:
				count = ware.count
			if count > 0
				// Remove taken wares from source:
				source.removeWare(ware(ware.wareType, count))
		// Update still required wares:
		destroy wares
		wares = leftRequiredWares


function unit.addBuildingSite()
	if BUILDING_SITE_MAP.has(this) == false
		let targetUnitId = this.getUnitId()
		let fullHP = this.getMaxHP()
		let buildingGround = this.replace(BUILDING_GROUND_UNIT_ID)
		IssueImmediateOrderById(buildingGround, targetUnitId.getUnitTypeId())  // Upgrade building ground to target building type
		buildingGround.setScale(getBuildingScaling(targetUnitId))
		buildingGround.setMaxHP(max(1, (fullHP * BUILDING_START_HP_PERCENTAGE).toInt()))
		let buildingSite = new BuildingSite(buildingGround, fullHP, getRequiredWares(targetUnitId))
		BUILDING_SITE_MAP.put(buildingGround, buildingSite)
		if buildingSite.hasWares() == false
			buildingSite.callOverIdleWorkers(this)

function unit.removeBuildingSite()
	if BUILDING_SITE_MAP.has(this)
		destroy BUILDING_SITE_MAP.get(this)
		BUILDING_SITE_MAP.remove(this)

function vec2.findNextBuildingSite(player owner) returns unit
	var filter = Filter() ->
		var conditionsFulfilled = false
		let buildingSite = GetFilterUnit().getBuildingSite()
		// Only allow building sites that don't have any required wares left:
		if buildingSite != null and buildingSite.hasWares() == false
			conditionsFulfilled = true
		return conditionsFulfilled
	let building = this.getNearestUnit(MAX_AUTO_ORDER_RANGE, filter, owner)
	filter.destr()
	return building

/** If worker is building stop him. */
function unit.stopBuilding()
	if WORKER_MAP.has(this)
		WORKER_MAP.get(this).removeWorker(this)

/** Returns the building site of given unit. */
public function unit.getBuildingSite() returns BuildingSite
	if BUILDING_SITE_MAP.has(this)
		return BUILDING_SITE_MAP.get(this)
	else
		return null

/** Returns the building site of given worker. */
public function unit.getBuildingSiteOfWorker() returns BuildingSite
	if WORKER_MAP.has(this)
		return WORKER_MAP.get(this)
	else
		return null

/** Returns if the given worker type can work on given building type */
public function int.isValidWorkerType(int workerUnitId) returns bool
	return getUnitWorkPower(workerUnitId, this) > 0.

/** Sets system relevant infos for given object in target multiboard. */
public function multiboard.setObjectInfoMultiboard(BuildingSite bs) returns bool
	this.addMultiboardLine("Building site:", HEADLINE_ICON_PATH)
	this.addMultiboardLine("Build progress: " + (bs.getWorkProgress() * 100.).toInt().toString() + "%", BUILD_PROGRESS_ICON_PATH)
	let workPower = bs.getWorkPower()
	if workPower > 0.
		this.addMultiboardLine("Build time left: " + ((1 - bs.getWorkProgress()) / workPower).toInt().toString() + "s", BUILD_TIME_LEFT_ICON_PATH)
		this.addMultiboardLine("Workers: " + bs.getWorkerCount().toString(), WORKERS_ICON_PATH)
	let amountOfWareTypes = bs.getAmountOfWareTypes()
	if amountOfWareTypes > 0
		this.addMultiboardLine("Required wares:", HEADLINE_ICON_PATH)
		for i = 0 to (amountOfWareTypes - 1)
			var ware = bs.getWare(i)
			this.addMultiboardLine(ware.count.toString() + " " + ware.toString(true), ware.getIconPath())
	return true

init
	// Remove resource from every appropriate removed unit:
	onLeave() ->
		getEnterLeaveUnit().removeBuildingSite()
	// Adjust progress of all building sites:
	let finishedBuildings = CreateGroup()
	doPeriodically(BUILDING_ADJUSTMENT_RATE) cb ->
		for building in BUILDING_SITE_MAP
			if BUILDING_SITE_MAP.get(building).adjustProgress()
				finishedBuildings.addUnit(building)
		// Remove finished building sites:
		for building from finishedBuildings
			building.removeBuildingSite()
	// Register construction starts:
	registerPlayerUnitEvent(EVENT_PLAYER_UNIT_CONSTRUCT_START) ->
		let building = GetConstructingStructure()
		if getBuildingScaling(building.getUnitId()) > 0.
			doAfter(MIN_TRIGGER_SLEEP_TIME, () -> building.addBuildingSite())
	// Register construction abortions:
	registerPlayerUnitEvent(EVENT_PLAYER_UNIT_UPGRADE_CANCEL) ->
		let building = GetTriggerUnit()
		building.removeBuildingSite()
		building.kill()
		building.remove()
	// Register building stops:
	registerPlayerUnitEvent(EVENT_PLAYER_UNIT_ISSUED_ORDER, () -> GetTriggerUnit().stopBuilding())
	registerPlayerUnitEvent(EVENT_PLAYER_UNIT_ISSUED_POINT_ORDER, () -> GetTriggerUnit().stopBuilding())
	registerPlayerUnitEvent(EVENT_PLAYER_UNIT_ISSUED_TARGET_ORDER, () -> GetTriggerUnit().stopBuilding())
	registerPlayerUnitEvent(EVENT_PLAYER_UNIT_ISSUED_UNIT_ORDER, () -> GetTriggerUnit().stopBuilding())
	registerPlayerUnitEvent(EVENT_PLAYER_UNIT_ATTACKED, () -> GetTriggerUnit().stopBuilding())