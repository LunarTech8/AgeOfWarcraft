/*-------------------------------------------------------------
// Version number:
1.0.0

// Description:
Manages the type and count of wares that are associated with a stock object.
Base class that should be extended into specialised classes.

// Changelog:
- 1.0.0:
Initial version.
-------------------------------------------------------------*/
package Stock
import Icons
import LinkedList
import UnitTest
import ErrorHandling


// --------------------
// Data code
// --------------------

public let MAX_WARE_COUNT = 99999  // Is limited to allow tuple to be converted into a single int
let MAX_WARE_TYPES = 9999  // Is limited to allow tuple to be converted into a single int

public enum WareType
	WOOD
	STONE
	METAL
	FOOD
	IRON_ORE
	COAL
	WOODEN_BOARDS
	WOODEN_STICKS
	STRAW

function WareType.toString() returns string
	switch this
		case WOOD
			return "wood"
		case STONE
			return "stone"
		case METAL
			return "metal"
		case FOOD
			return "food"
		case IRON_ORE
			return "iron ore"
		case COAL
			return "coal"
		case WOODEN_BOARDS
			return "wooden boards"
		case WOODEN_STICKS
			return "wooden sticks"
		case STRAW
			return "straw"
		default
			return "undefined ware"

function WareType.getIconPath() returns string
	switch this
		case WOOD
			return Icons.bTNBundleOfLumber
		case STONE
			return "Icons\\BTNINV_Stone_12.blp"
		case METAL
			return Icons.bTNHumanArmorUpOne
		case FOOD
			return Icons.bTNMonsterLure
		case WOODEN_BOARDS
			return Icons.bTNHumanLumberUpgrade2
		case WOODEN_STICKS
			return Icons.bTNHumanLumberUpgrade1
		case STRAW
			return "Icons\\BTNStrawBunch.blp"
		default
			return null


// --------------------
// Functional code
// --------------------

public tuple ware(WareType wareType, int count)

public function wareToIndex(ware w) returns int
	let wareTypeInt = w.wareType castTo int
	if w.count < 1 or w.count > MAX_WARE_COUNT
		error("Ware count (" + w.count.toString() + ") isn't allowed to be smaller than 1 or bigger than " + MAX_WARE_COUNT.toString())
	else if wareTypeInt < 0 or wareTypeInt > MAX_WARE_TYPES
		error("Ware type (" + wareTypeInt.toString() + ") isn't allowed to be smaller than 0 or bigger than " + MAX_WARE_TYPES.toString())
	return w.count + wareTypeInt * (MAX_WARE_COUNT + 1)

public function wareFromIndex(int index) returns ware
	let count = index mod (MAX_WARE_COUNT + 1)
	let wareType = ((index - count) div (MAX_WARE_COUNT + 1)) castTo WareType
	return ware(wareType, count)

public function ware.hasSameType(ware otherWare) returns bool
	return (this.wareType == otherWare.wareType)

public function ware.toString(bool upperCase) returns string
	if upperCase
		return this.wareType.toString().firstUpper()
	else
		return this.wareType.toString()

public function ware.getIconPath() returns string
	return this.wareType.getIconPath()

public function ware.changedCopy(int countChange) returns ware
	return ware(this.wareType, this.count + countChange)
public function ware.changedCopy(WareType newWareType) returns ware
	return ware(newWareType, this.count)
public function ware.changedCopy(WareType newWareType, int countChange) returns ware
	return ware(newWareType, this.count + countChange)

public function LinkedList<ware>.isEqual(LinkedList<ware> waresCompare) returns bool
	for iWare in this
		var hasWare = false
		for jWare in waresCompare
			if jWare.hasSameType(iWare)
				if jWare.count == iWare.count
					hasWare = true
					break
				else
					return false
		if hasWare == false
			return false
	return true

public class Stock
	protected LinkedList<ware> wares

	construct()
		this.wares = new LinkedList<ware>()
	construct(LinkedList<ware> wares)
		this.wares = wares
	construct(Stock stock)
		this.wares = stock.getWares()

	ondestroy
		destroy wares

	/** Returns if the stock has no wares. */
	function isEmpty() returns bool
		return wares.isEmpty()

	/** Returns the ware by given index of the stock. */
	function getWare(int index) returns ware
		if index >= wares.size()
			error("Index has to be smaller than list size")
		return wares.get(index)

	/** Returns a copied list of the wares of the stock. */
	function getWares() returns LinkedList<ware>
		return wares.copy()

	/** Returns the last ware of the stock. */
	function getLastWare() returns ware
		return wares.peek()

	/** Returns amount of different ware types in the stock. */
	function getAmountOfWareTypes() returns int
		return wares.size()

	/** Returns count of given ware type in the stock. */
	function getWareCount(WareType wt) returns int
		for iWare in wares
			if iWare.wareType == wt
				return iWare.count
		return 0

	/** Returns count of given wares in the stock. */
	function getWareCount(LinkedList<ware> wares) returns int
		var wareCount = 0
		for iWare in wares
			wareCount += min(getWareCount(iWare.wareType), iWare.count)
		return wareCount

	/** Returns if the stock has the given ware. */
	function hasWare(ware w) returns bool
		for iWare in wares
			if iWare.hasSameType(w)
				// Check ware:
				if iWare.count >= w.count
					return true
				else
					return false
		return false

	/** Returns if the stock has any of the given ware. */
	function hasWareAny(ware w) returns bool
		return getWareCount(w.wareType) > 0

	/** Returns if the stock has the given wares. */
	function hasWares(LinkedList<ware> wares) returns bool
		for iWare in wares
			if hasWare(iWare) == false
				return false
		return true

	/** Returns if the stock has any of the given wares. */
	function hasWaresAny(LinkedList<ware> wares) returns bool
		for iWare in wares
			if getWareCount(iWare.wareType) > 0
				return true
		return false
	/** Returns if the stock has any wares of given target stock. */
	function hasWaresAny(Stock targetStock) returns bool
		for iWare in wares
			if targetStock.getWareCount(iWare.wareType) > 0
				return true
		return false

	/** Add given wares to the stock. */
	function addWare(ware w)
		// Adjust ware:
		for iWare in wares
			if iWare.hasSameType(w)
				wares.replace(iWare, iWare.changedCopy(w.count))
				return
		// Add new ware if none exists of that type yet:
		wares.add(w)

	/** Add given wares to the stock. */
	function addWares(LinkedList<ware> wares)
		for iWare in wares
			addWare(iWare)

	/** Remove given ware from the stock. */
	function removeWare(ware w)
		for iWare in wares
			if iWare.hasSameType(w)
				// Check and adjust ware:
				if iWare.count <= w.count
					wares.remove(iWare)
				else
					wares.replace(iWare, iWare.changedCopy(-w.count))

	/** Remove as many as available of given ware from the stock and return how many were removed. */
	function removeWareAny(ware w) returns int
		for iWare in wares
			if iWare.hasSameType(w)
				// Check and adjust ware:
				let removedWareCount = min(iWare.count, w.count)
				if iWare.count <= removedWareCount
					wares.remove(iWare)
				else
					wares.replace(iWare, iWare.changedCopy(-removedWareCount))
				return removedWareCount
		return 0

	/** Remove given wares from the stock. */
	function removeWares(LinkedList<ware> wares)
		for iWare in wares
			removeWare(iWare)

	/** Remove as many as available of given wares from the stock and return how many were removed. */
	function removeWaresAny(LinkedList<ware> wares) returns int
		var removedWareCount = 0
		for iWare in wares
			removedWareCount += removeWareAny(iWare)
		return removedWareCount

	/** Replaces all wares from the stock with the given wares. */
	function replaceWares(LinkedList<ware> wares)
		destroy this.wares
		this.wares = wares


// --------------------
// Test code
// --------------------

@Test public function testStock_AddAndRemove()
	testStock_AddAndRemove(false)
public function testStock_AddAndRemove(bool isInGameTest)
	let testName = setTestName("testStock_AddAndRemove", isInGameTest)
	// Create new stock and check content:
	let stockA = new Stock()
	stockA.isEmpty().assertTrue(testName)
	stockA.getAmountOfWareTypes().assertEquals(testName, 0)
	// Add wares and check content:
	stockA.addWare(ware(WareType.FOOD, 2))
	stockA.addWare(ware(WareType.STONE, 2))
	stockA.addWare(ware(WareType.STRAW, 1))
	stockA.addWare(ware(WareType.FOOD, 1))
	stockA.isEmpty().assertFalse(testName)
	stockA.getAmountOfWareTypes().assertEquals(testName, 3)
	stockA.getWareCount(WareType.FOOD).assertEquals(testName, 3)
	(stockA.getLastWare().wareType == WareType.STRAW).assertTrue(testName)
	(stockA.getWare(0).wareType == WareType.FOOD).assertTrue(testName)
	(stockA.getWare(1).wareType == WareType.STONE).assertTrue(testName)
	stockA.hasWare(ware(WareType.STONE, 3)).assertFalse(testName)
	stockA.hasWare(ware(WareType.STONE, 2)).assertTrue(testName)
	// Remove wares and check content:
	stockA.removeWare(ware(WareType.FOOD, 2))
	stockA.removeWare(ware(WareType.STONE, 2))
	stockA.getAmountOfWareTypes().assertEquals(testName, 2)
	stockA.getWareCount(WareType.FOOD).assertEquals(testName, 1)
	// Create another storage and check content:
	let stockB = new Stock()
	stockB.isEmpty().assertTrue(testName)
	stockB.getAmountOfWareTypes().assertEquals(testName, 0)
	// Add wares and check content:
	let waresA = new LinkedList<ware>()
	waresA.add(ware(WareType.FOOD, 2))
	waresA.add(ware(WareType.STONE, 3))
	waresA.add(ware(WareType.STRAW, 1))
	waresA.add(ware(WareType.WOOD, 6))
	stockB.hasWaresAny(waresA).assertFalse(testName)
	stockB.hasWaresAny(stockA).assertFalse(testName)
	stockB.addWares(waresA)
	stockB.isEmpty().assertFalse(testName)
	stockB.getAmountOfWareTypes().assertEquals(testName, 4)
	stockB.hasWares(waresA).assertTrue(testName)
	stockB.hasWaresAny(stockA).assertTrue(testName)
	// Remove wares and check content:
	let waresB = new LinkedList<ware>()
	waresB.add(ware(WareType.FOOD, 3))
	waresB.add(ware(WareType.WOOD, 1))
	stockB.removeWares(waresB)
	stockB.isEmpty().assertFalse(testName)
	stockB.getAmountOfWareTypes().assertEquals(testName, 3)
	stockB.getWareCount(WareType.FOOD).assertEquals(testName, 0)
	stockB.getWareCount(WareType.WOOD).assertEquals(testName, 5)
	stockB.hasWares(waresB).assertFalse(testName)
	stockB.hasWaresAny(waresB).assertTrue(testName)
	testFinish(testName)
	// Destroy class objects:
	destroy stockA
	destroy stockB
	destroy waresA
	destroy waresB