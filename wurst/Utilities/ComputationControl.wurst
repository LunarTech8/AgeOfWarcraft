/*-------------------------------------------------------------
// Version number:
1.0.0

// Description:
Keeps track of cumulated computation cost and breaks long tigger actions with short trigger sleeps to avoid unfinished function calls.

// Changelog:
- 1.0.0:
Initial version.
-------------------------------------------------------------*/
package ComputationControl
import UtilityFunctions


// --------------------
// Data code
// --------------------

let MAX_COMPUTATION_COST_PER_CYCLE = 1000.


// --------------------
// Functional code
// --------------------

public var isComputationControlActivated = true
public var computationCost = 0.
public var computationCostBreakCounter = 0

public function checkForComputationBreak()
	if isComputationControlActivated
		if computationCost >= MAX_COMPUTATION_COST_PER_CYCLE
			if computationCost >= 2 * MAX_COMPUTATION_COST_PER_CYCLE
				Log.warn("Bad placement of checkComputationCost (Residual cost of " + (computationCost - MAX_COMPUTATION_COST_PER_CYCLE).toString() + ")")
			TriggerSleepAction(MIN_TRIGGER_SLEEP_TIME)
			computationCostBreakCounter++
			computationCost = 0.

public function forceComputationBreak()
	if isComputationControlActivated
		TriggerSleepAction(MIN_TRIGGER_SLEEP_TIME)
		computationCost = 0.