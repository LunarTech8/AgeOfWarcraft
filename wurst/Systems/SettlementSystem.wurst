/*-------------------------------------------------------------
// Version number:
1.0.0

// Description:
TODO

// Changelog:
- 1.0.0:
Initial version.
-------------------------------------------------------------*/
package SettlementSystem
import UnitMap
import MultiboardPrioritySystem
import Icons
import UnitIndexer
import RegisterEvents
import Orders
import UtilityFunctions
import ConstantDataSystem


// --------------------
// Data code
// --------------------

let LEVEL_ICON_PATH = Icons.bTNSnazzyScroll
let MAX_LEVEL = 3

function getBuildingRange(int level) returns real
	switch level
		case 1
			return 512.
		case 2
			return 768.
		case 3
			return 1024.
	return 0.

function isCentreBuilding(int buildingId) returns bool
	switch buildingId
		case UnitIdsCustom.AoW.townHall
			return true
		case UnitIdsCustom.AoW.keep
			return true
		case UnitIdsCustom.AoW.castle
			return true
	return false


// --------------------
// Functional code
// --------------------

let SETTLEMENT_MAP = new IterableUnitHashMap<Settlement>(null)

class Settlement
	private unit centreBuilding
	private group buildings
	private group persons
	protected int level

	construct(unit centreBuilding)
		this.centreBuilding = centreBuilding
		buildings = CreateGroup()
		persons = CreateGroup()
		level = 1

	ondestroy
		buildings.destr()
		persons.destr()

	function isMember(unit member) returns bool
		if member.isType(UNIT_TYPE_STRUCTURE)
			return buildings.contains(member)
		else
			return persons.contains(member)

	function addBuilding(unit building)
		buildings.addUnit(building)

	function removeMember(unit member)
		if member.isType(UNIT_TYPE_STRUCTURE)
			buildings.removeUnit(member)
		else
			persons.removeUnit(member)


function unit.addToSettlementInRange() returns bool
	let pos = this.getPos()
	for centreBuilding in SETTLEMENT_MAP
		let settlement = SETTLEMENT_MAP.get(centreBuilding)
		if pos.distanceTo(centreBuilding.getPos()) <= getBuildingRange(settlement.level)
			settlement.addBuilding(this)
			return true
	return false

function unit.removeFromSettlement()
	var settlement = SETTLEMENT_MAP.tryRemove(this)
	if settlement != null
		destroy settlement  // Destroy settlement if centre building gets removed
	else
		settlement = this.getSettlement()
		if settlement != null
			settlement.removeMember(this)

/** Returns the settlement of given unit. */
public function unit.getSettlement() returns Settlement
	var settlement = SETTLEMENT_MAP.tryGet(this)  // Check if it is the centre building
	if settlement == null
		for centreBuilding in SETTLEMENT_MAP
			settlement = SETTLEMENT_MAP.get(centreBuilding)
			if settlement.isMember(this)
				return settlement
		settlement = null
	return settlement

/** Returns if this unit could be added as settlement. */
public function unit.addSettlement() returns bool
	if SETTLEMENT_MAP.has(this) or isCentreBuilding(this.getUnitId()) == false
		return false
	let pos = this.getPos()
	let range = 2 * getBuildingRange(MAX_LEVEL)
	for centreBuilding in SETTLEMENT_MAP
		if pos.distanceTo(centreBuilding.getPos()) <= range
			return false
	SETTLEMENT_MAP.put(this, new Settlement(this))
	return true

/** Sets system relevant infos for given object in target multiboard. */
public function multiboard.setObjectInfoMultiboard(Settlement s) returns bool
	this.addMultiboardLine("Settlement:", HEADLINE_ICON_PATH)
	this.addMultiboardLine("Level: " + s.level.toString(), LEVEL_ICON_PATH)
	return true

init
	// Remove settlement from every removed centre building:
	onUnitDeindex() ->
		getIndexingUnit().removeFromSettlement()
	// Register upgrade starts:
	registerPlayerUnitEvent(EVENT_PLAYER_UNIT_UPGRADE_START) ->
		let building = GetTriggerUnit()
		if isCentreBuilding(building.getUnitId())
			if building.addSettlement() == false
				printTimedToPlayer("Settlement cannot be founded that close to another settlement", INFO_MSG_TIME, building.getOwner())
				building.issueImmediateOrderById(SpecialOrders.cancel)
		else
			if building.addToSettlementInRange() == false
				printTimedToPlayer("Building cannot be constructed outside the range of a settlement", INFO_MSG_TIME, building.getOwner())
				building.issueImmediateOrderById(SpecialOrders.cancel)