/*-------------------------------------------------------------
// Version number:
1.0.0

// Description:
Provides wrapper classes for static primitive arrays and shared memory areas.

// Changelog:
- 1.0.0:
Initial version.
-------------------------------------------------------------*/
package Array
import LinkedList
import ErrorHandling
import UnitTest
import ComputationControl


// --------------------
// Functional code
// --------------------

let SINGLE_ARRAY_SIZE = 8192
let ARRAY_REAL_LIST = new LinkedList<ArrayReal>
let ARRAY_REAL_SIZE = SINGLE_ARRAY_SIZE * 16
let ARRAY_INT_LIST = new LinkedList<ArrayInt>
let ARRAY_INT_SIZE = SINGLE_ARRAY_SIZE * 4

real array[SINGLE_ARRAY_SIZE] arrayReal01
real array[SINGLE_ARRAY_SIZE] arrayReal02
real array[SINGLE_ARRAY_SIZE] arrayReal03
real array[SINGLE_ARRAY_SIZE] arrayReal04
real array[SINGLE_ARRAY_SIZE] arrayReal05
real array[SINGLE_ARRAY_SIZE] arrayReal06
real array[SINGLE_ARRAY_SIZE] arrayReal07
real array[SINGLE_ARRAY_SIZE] arrayReal08
real array[SINGLE_ARRAY_SIZE] arrayReal09
real array[SINGLE_ARRAY_SIZE] arrayReal10
real array[SINGLE_ARRAY_SIZE] arrayReal11
real array[SINGLE_ARRAY_SIZE] arrayReal12
real array[SINGLE_ARRAY_SIZE] arrayReal13
real array[SINGLE_ARRAY_SIZE] arrayReal14
real array[SINGLE_ARRAY_SIZE] arrayReal15
real array[SINGLE_ARRAY_SIZE] arrayReal16
int array[SINGLE_ARRAY_SIZE] arrayInt01
int array[SINGLE_ARRAY_SIZE] arrayInt02
int array[SINGLE_ARRAY_SIZE] arrayInt03
int array[SINGLE_ARRAY_SIZE] arrayInt04

function getArrayRealValue(int index) returns real
	if index < 0 or index >= ARRAY_REAL_SIZE
		error("Index (" + index.toString() + ") is outside boundaries")
		return 0.
	else if index < SINGLE_ARRAY_SIZE * 8
		if index < SINGLE_ARRAY_SIZE * 4
			if index < SINGLE_ARRAY_SIZE * 2
				if index < SINGLE_ARRAY_SIZE * 1
					return arrayReal01[index - SINGLE_ARRAY_SIZE * 0]
				else
					return arrayReal02[index - SINGLE_ARRAY_SIZE * 1]
			else
				if index < SINGLE_ARRAY_SIZE * 3
					return arrayReal03[index - SINGLE_ARRAY_SIZE * 2]
				else
					return arrayReal04[index - SINGLE_ARRAY_SIZE * 3]
		else
			if index < SINGLE_ARRAY_SIZE * 6
				if index < SINGLE_ARRAY_SIZE * 5
					return arrayReal05[index - SINGLE_ARRAY_SIZE * 4]
				else
					return arrayReal06[index - SINGLE_ARRAY_SIZE * 5]
			else
				if index < SINGLE_ARRAY_SIZE * 7
					return arrayReal07[index - SINGLE_ARRAY_SIZE * 6]
				else
					return arrayReal08[index - SINGLE_ARRAY_SIZE * 7]
	else
		if index < SINGLE_ARRAY_SIZE * 12
			if index < SINGLE_ARRAY_SIZE * 10
				if index < SINGLE_ARRAY_SIZE * 9
					return arrayReal09[index - SINGLE_ARRAY_SIZE * 8]
				else
					return arrayReal10[index - SINGLE_ARRAY_SIZE * 9]
			else
				if index < SINGLE_ARRAY_SIZE * 11
					return arrayReal11[index - SINGLE_ARRAY_SIZE * 10]
				else
					return arrayReal12[index - SINGLE_ARRAY_SIZE * 11]
		else
			if index < SINGLE_ARRAY_SIZE * 14
				if index < SINGLE_ARRAY_SIZE * 13
					return arrayReal13[index - SINGLE_ARRAY_SIZE * 12]
				else
					return arrayReal14[index - SINGLE_ARRAY_SIZE * 13]
			else
				if index < SINGLE_ARRAY_SIZE * 15
					return arrayReal15[index - SINGLE_ARRAY_SIZE * 14]
				else
					return arrayReal16[index - SINGLE_ARRAY_SIZE * 15]

function setArrayRealValue(int index, real value)
	if index < 0 or index >= ARRAY_REAL_SIZE
		error("Index (" + index.toString() + ") is outside boundaries")
	else if index < SINGLE_ARRAY_SIZE * 8
		if index < SINGLE_ARRAY_SIZE * 4
			if index < SINGLE_ARRAY_SIZE * 2
				if index < SINGLE_ARRAY_SIZE * 1
					arrayReal01[index - SINGLE_ARRAY_SIZE * 0] = value
				else
					arrayReal02[index - SINGLE_ARRAY_SIZE * 1] = value
			else
				if index < SINGLE_ARRAY_SIZE * 3
					arrayReal03[index - SINGLE_ARRAY_SIZE * 2] = value
				else
					arrayReal04[index - SINGLE_ARRAY_SIZE * 3] = value
		else
			if index < SINGLE_ARRAY_SIZE * 6
				if index < SINGLE_ARRAY_SIZE * 5
					arrayReal05[index - SINGLE_ARRAY_SIZE * 4] = value
				else
					arrayReal06[index - SINGLE_ARRAY_SIZE * 5] = value
			else
				if index < SINGLE_ARRAY_SIZE * 7
					arrayReal07[index - SINGLE_ARRAY_SIZE * 6] = value
				else
					arrayReal08[index - SINGLE_ARRAY_SIZE * 7] = value
	else
		if index < SINGLE_ARRAY_SIZE * 12
			if index < SINGLE_ARRAY_SIZE * 10
				if index < SINGLE_ARRAY_SIZE * 9
					arrayReal09[index - SINGLE_ARRAY_SIZE * 8] = value
				else
					arrayReal10[index - SINGLE_ARRAY_SIZE * 9] = value
			else
				if index < SINGLE_ARRAY_SIZE * 11
					arrayReal11[index - SINGLE_ARRAY_SIZE * 10] = value
				else
					arrayReal12[index - SINGLE_ARRAY_SIZE * 11] = value
		else
			if index < SINGLE_ARRAY_SIZE * 14
				if index < SINGLE_ARRAY_SIZE * 13
					arrayReal13[index - SINGLE_ARRAY_SIZE * 12] = value
				else
					arrayReal14[index - SINGLE_ARRAY_SIZE * 13] = value
			else
				if index < SINGLE_ARRAY_SIZE * 15
					arrayReal15[index - SINGLE_ARRAY_SIZE * 14] = value
				else
					arrayReal16[index - SINGLE_ARRAY_SIZE * 15] = value

function getArrayIntValue(int index) returns int
	if index < 0 or index >= ARRAY_INT_SIZE
		error("Index (" + index.toString() + ") is outside boundaries")
		return 0
	else if index < SINGLE_ARRAY_SIZE * 2
		if index < SINGLE_ARRAY_SIZE * 1
			return arrayInt01[index - SINGLE_ARRAY_SIZE * 0]
		else
			return arrayInt02[index - SINGLE_ARRAY_SIZE * 1]
	else
		if index < SINGLE_ARRAY_SIZE * 3
			return arrayInt03[index - SINGLE_ARRAY_SIZE * 2]
		else
			return arrayInt04[index - SINGLE_ARRAY_SIZE * 3]

function setArrayIntValue(int index, int value)
	if index < 0 or index >= ARRAY_INT_SIZE
		error("Index (" + index.toString() + ") is outside boundaries")
	else if index < SINGLE_ARRAY_SIZE * 2
		if index < SINGLE_ARRAY_SIZE * 1
			arrayInt01[index - SINGLE_ARRAY_SIZE * 0] = value
		else
			arrayInt02[index - SINGLE_ARRAY_SIZE * 1] = value
	else
		if index < SINGLE_ARRAY_SIZE * 3
			arrayInt03[index - SINGLE_ARRAY_SIZE * 2] = value
		else
			arrayInt04[index - SINGLE_ARRAY_SIZE * 3] = value

public class ArrayReal
	private int size
	private int indexOffset

	construct(int size)
		this.size = size
		if ARRAY_REAL_LIST.isEmpty()
			indexOffset = 0
		else
			indexOffset = ARRAY_REAL_LIST.peek().getFollowerIndexOffset()
		if size + indexOffset > ARRAY_REAL_SIZE
			error("Used sizes of ArrayReal (" + (size + indexOffset).toString() + ") are too big for currently reserved memory area (" + ARRAY_REAL_SIZE.toString() + ") ")
			this.size = 0
		ARRAY_REAL_LIST.push(this)

	ondestroy
		// Remove this array from list:
		let listIndex = ARRAY_REAL_LIST.indexOf(this)
		ARRAY_REAL_LIST.removeAt(listIndex)
		var newIndexOffset = indexOffset
		// Move elements from following arrays forwards into free memory area:
		for i = listIndex to ARRAY_REAL_LIST.size() - 1
			let a = ARRAY_REAL_LIST.get(i)
			let aSize = a.size
			a.size = 0  // Set temporarily to 0 to avoid concurrent wrong accesses
			for j = 0 to aSize - 1
				setArrayRealValue(j + newIndexOffset, getArrayRealValue(j + a.indexOffset))
				computationCost += 0.0256
				checkForComputationBreak()
			a.indexOffset = newIndexOffset
			a.size = aSize
			newIndexOffset = a.getFollowerIndexOffset()

	private function getFollowerIndexOffset() returns int
		return indexOffset + size

	function size() returns int
		return size

	function get(int index) returns real
		if index < 0 or index >= size
			error("Index (" + index.toString() + ") is outside boundaries")
		return getArrayRealValue(index + indexOffset)

	function set(int index, real elem)
		if index < 0 or index >= size
			error("Index (" + index.toString() + ") is outside boundaries")
		setArrayRealValue(index + indexOffset, elem)

public class ArrayInt
	private int size
	private int indexOffset

	construct(int size)
		this.size = size
		if ARRAY_INT_LIST.isEmpty()
			indexOffset = 0
		else
			indexOffset = ARRAY_INT_LIST.peek().getFollowerIndexOffset()
		if size + indexOffset > ARRAY_INT_SIZE
			error("Used sizes of ArrayInt (" + (size + indexOffset).toString() + ") are too big for currently reserved memory area (" + ARRAY_INT_SIZE.toString() + ") ")
			this.size = 0
		ARRAY_INT_LIST.push(this)

	ondestroy
		// Remove this array from list:
		let listIndex = ARRAY_INT_LIST.indexOf(this)
		ARRAY_INT_LIST.removeAt(listIndex)
		var newIndexOffset = indexOffset
		// Move elements from following arrays forwards into free memory area:
		for i = listIndex to ARRAY_INT_LIST.size() - 1
			let a = ARRAY_INT_LIST.get(i)
			let aSize = a.size
			a.size = 0  // Set temporarily to 0 to avoid concurrent wrong accesses
			for j = 0 to aSize - 1
				setArrayIntValue(j + newIndexOffset, getArrayIntValue(j + a.indexOffset))
			a.indexOffset = newIndexOffset
			a.size = aSize
			newIndexOffset = a.getFollowerIndexOffset()

	private function getFollowerIndexOffset() returns int
		return indexOffset + size

	function size() returns int
		return size

	function get(int index) returns int
		if index < 0 or index >= size
			error("Index (" + index.toString() + ") is outside boundaries")
		return getArrayIntValue(index + indexOffset)

	function set(int index, int elem)
		if index < 0 or index >= size
			error("Index (" + index.toString() + ") is outside boundaries")
		setArrayIntValue(index + indexOffset, elem)


// --------------------
// Test code
// --------------------

@Test public function testArray_SetAndGet()
	testArray_SetAndGet(false)
public function testArray_SetAndGet(bool isInGameTest)
	let REAL_COMPARE_DELTA = 0.000001
	let testName = setTestName("testArray_SetAndGet", isInGameTest)
	// Create new array and check content:
	let arrayA = new ArrayReal(4000)
	arrayA.size().assertEquals(testName, 4000)
	arrayA.get(0).assertEquals(testName, 0., REAL_COMPARE_DELTA)
	arrayA.get(3999).assertEquals(testName, 0., REAL_COMPARE_DELTA)
	// Set entries and check content:
	arrayA.get(121).assertEquals(testName, 0., REAL_COMPARE_DELTA)
	arrayA.set(121, 42.15)
	arrayA.get(121).assertEquals(testName, 42.15, REAL_COMPARE_DELTA)
	arrayA.set(121, 0.254)
	arrayA.get(121).assertEquals(testName, 0.254, REAL_COMPARE_DELTA)
	// Create another array and check content:
	let arrayB = new ArrayReal(8000)
	arrayB.size().assertEquals(testName, 8000)
	arrayB.get(0).assertEquals(testName, 0., REAL_COMPARE_DELTA)
	arrayB.get(7999).assertEquals(testName, 0., REAL_COMPARE_DELTA)
	// Set entries and check content:
	arrayB.get(121).assertEquals(testName, 0., REAL_COMPARE_DELTA)
	arrayB.set(121, 42.15)
	arrayB.get(121).assertEquals(testName, 42.15, REAL_COMPARE_DELTA)
	arrayB.get(5121).assertEquals(testName, 0., REAL_COMPARE_DELTA)
	arrayB.set(5121, 0.254)
	arrayB.get(5121).assertEquals(testName, 0.254, REAL_COMPARE_DELTA)
	testFinish(testName)
	// Destroy class objects:
	destroy arrayB
	destroy arrayA

@Test public function testArray_CreateAndDestroy()
	testArray_CreateAndDestroy(false)
public function testArray_CreateAndDestroy(bool isInGameTest)
	let REAL_COMPARE_DELTA = 0.000001
	let testName = setTestName("testArray_CreateAndDestroy", isInGameTest)
	let arrayRealListStartSize = ARRAY_REAL_LIST.size()
	// Create new arrays:
	ARRAY_REAL_LIST.size().assertEquals(testName, arrayRealListStartSize)
	let arrayA = new ArrayReal(4000)
	ARRAY_REAL_LIST.size().assertEquals(testName, arrayRealListStartSize + 1)
	let arrayB = new ArrayReal(8000)
	ARRAY_REAL_LIST.size().assertEquals(testName, arrayRealListStartSize + 2)
	let arrayC = new ArrayReal(9000)
	ARRAY_REAL_LIST.size().assertEquals(testName, arrayRealListStartSize + 3)
	// Set entries and check content:
	arrayA.set(121, 42.15)
	arrayA.get(121).assertEquals(testName, 42.15, REAL_COMPARE_DELTA)
	arrayA.set(454, 12.55)
	arrayA.get(454).assertEquals(testName, 12.55, REAL_COMPARE_DELTA)
	arrayB.set(121, 0.254)
	arrayB.get(121).assertEquals(testName, 0.254, REAL_COMPARE_DELTA)
	arrayB.get(454).assertEquals(testName, 0., REAL_COMPARE_DELTA)
	arrayC.set(121, 1.78)
	arrayC.get(121).assertEquals(testName, 1.78, REAL_COMPARE_DELTA)
	// Destroy array and check content:
	ARRAY_REAL_LIST.size().assertEquals(testName, arrayRealListStartSize + 3)
	destroy arrayA
	ARRAY_REAL_LIST.size().assertEquals(testName, arrayRealListStartSize + 2)
	arrayB.size().assertEquals(testName, 8000)
	arrayB.get(121).assertEquals(testName, 0.254, REAL_COMPARE_DELTA)
	arrayB.get(454).assertEquals(testName, 0., REAL_COMPARE_DELTA)
	arrayC.size().assertEquals(testName, 9000)
	arrayC.get(121).assertEquals(testName, 1.78, REAL_COMPARE_DELTA)
	arrayC.get(454).assertEquals(testName, 0., REAL_COMPARE_DELTA)
	testFinish(testName)
	// Destroy class objects:
	destroy arrayC
	destroy arrayB

@Test public function testArray_FullMemoryAreaCheck()
	testArray_FullMemoryAreaCheck(false)
public function testArray_FullMemoryAreaCheck(bool isInGameTest)
	let REAL_COMPARE_DELTA = 0.000001
	let testName = setTestName("testArray_FullMemoryAreaCheck", isInGameTest)
	var indexOffsetReal = 0
	var indexOffsetInt = 0
	for a in ARRAY_REAL_LIST
		indexOffsetReal += a.size()
	for a in ARRAY_INT_LIST
		indexOffsetInt += a.size()
	// Create new array:
	let arrayA = new ArrayReal(ARRAY_REAL_SIZE - indexOffsetReal)
	let arrayB = new ArrayInt(ARRAY_INT_SIZE - indexOffsetInt)
	// Set entries:
	for i = 0 to ARRAY_REAL_SIZE - indexOffsetReal - 1
		arrayA.set(i, i.toReal())
	for i = 0 to ARRAY_INT_SIZE - indexOffsetInt - 1
		arrayB.set(i, i)
	// Check entries:
	for i = 0 to ARRAY_REAL_SIZE - indexOffsetReal - 1
		arrayA.get(i).assertEquals(testName, i.toReal(), REAL_COMPARE_DELTA)
	for i = 0 to ARRAY_INT_SIZE - indexOffsetInt - 1
		arrayB.get(i).assertEquals(testName, i)
	// Destroy arrays beforehand for other tests:
	destroy arrayB
	destroy arrayA
	testFinish(testName)