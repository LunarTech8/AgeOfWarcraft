/*-------------------------------------------------------------
// Version number:
1.01

// Description:
Provides generic lists based on dynamic arrays.

// Changelog:
- 1.01:
Initial version.
-------------------------------------------------------------*/
package ArrayList
import UnitTest


// --------------------
// Functional code
// --------------------

interface IArrayList<T>
	function getMaxSize() returns int
	function getUsedSlots() returns int
	function getElem(int index) returns T
	function setElem(int index, T elem)
	function add(T elem)
	function add(int index, T elem)
	function remove(int index)
	function getIndex(T elem) returns int

class ArrayListBase<T>
	protected var usedSlots = 0

	protected function checkSlot(int index)
		if index > usedSlots - 1
			Log.error("ERROR: Given index (" + index.toString() + ") is out of bounds (bigger than " + (usedSlots - 1).toString() + ")")
		else if index < 0
			Log.error("ERROR: Given index (" + index.toString() + ") has to be bigger than 0")

	protected function checkSize(int size)
		if usedSlots > size
			Log.error("ERROR: ArrayList size (" + usedSlots.toString() + ") is out of bounds (bigger than array size " + size.toString() + ")")
		else if usedSlots < 0
			Log.error("ERROR: Size of ArrayList can't be negative")

/* Generic ArrayList data class with fixed specific array size */
class ArrayListSize2<T> extends ArrayListBase implements IArrayList<T>
	private let maxSize = 2
	private T array[maxSize] data

	override function getMaxSize() returns int
		return maxSize

	override function getUsedSlots() returns int
		return usedSlots

	override function getElem(int index) returns T
		checkSlot(index)
		return data[index]

	override function setElem(int index, T elem)
		checkSlot(index)
		data[index] = elem

	override function add(T elem)
		usedSlots++
		checkSize(maxSize)
		data[usedSlots - 1] = elem

	override function add(int index, T elem)
		usedSlots++
		checkSize(maxSize)
		checkSlot(index)
		for i = usedSlots - 1 downto index + 1
			data[i] = data[i - 1]
		data[index] = elem

	override function remove(int index)
		usedSlots--
		checkSize(maxSize)
		checkSlot(index)
		for i = index to usedSlots - 1
			data[i] = data[i + 1]

	override function getIndex(T elem) returns int
		for i = 0 to usedSlots - 1
			if data[i] == elem
				return i
		return 0

/* Generic ArrayList data class with fixed specific array size */
class ArrayListSize4<T> extends ArrayListBase implements IArrayList<T>
	private let maxSize = 4
	private T array[maxSize] data

	override function getMaxSize() returns int
		return maxSize

	override function getUsedSlots() returns int
		return usedSlots

	override function getElem(int index) returns T
		checkSlot(index)
		return data[index]

	override function setElem(int index, T elem)
		checkSlot(index)
		data[index] = elem

	override function add(T elem)
		usedSlots++
		checkSize(maxSize)
		data[usedSlots - 1] = elem

	override function add(int index, T elem)
		usedSlots++
		checkSize(maxSize)
		checkSlot(index)
		for i = usedSlots - 1 downto index + 1
			data[i] = data[i - 1]
		data[index] = elem

	override function remove(int index)
		usedSlots--
		checkSize(maxSize)
		checkSlot(index)
		for i = index to usedSlots - 1
			data[i] = data[i + 1]

	override function getIndex(T elem) returns int
		for i = 0 to usedSlots - 1
			if data[i] == elem
				return i
		return 0

/* Generic ArrayList data class with fixed specific array size */
class ArrayListSize8<T> extends ArrayListBase implements IArrayList<T>
	private let maxSize = 8
	private T array[maxSize] data

	override function getMaxSize() returns int
		return maxSize

	override function getUsedSlots() returns int
		return usedSlots

	override function getElem(int index) returns T
		checkSlot(index)
		return data[index]

	override function setElem(int index, T elem)
		checkSlot(index)
		data[index] = elem

	override function add(T elem)
		usedSlots++
		checkSize(maxSize)
		data[usedSlots - 1] = elem

	override function add(int index, T elem)
		usedSlots++
		checkSize(maxSize)
		checkSlot(index)
		for i = usedSlots - 1 downto index + 1
			data[i] = data[i - 1]
		data[index] = elem

	override function remove(int index)
		usedSlots--
		checkSize(maxSize)
		checkSlot(index)
		for i = index to usedSlots - 1
			data[i] = data[i + 1]

	override function getIndex(T elem) returns int
		for i = 0 to usedSlots - 1
			if data[i] == elem
				return i
		return 0

/* Generic ArrayList data class with fixed specific array size */
class ArrayListSize16<T> extends ArrayListBase implements IArrayList<T>
	private let maxSize = 16
	private T array[maxSize] data

	override function getMaxSize() returns int
		return maxSize

	override function getUsedSlots() returns int
		return usedSlots

	override function getElem(int index) returns T
		checkSlot(index)
		return data[index]

	override function setElem(int index, T elem)
		checkSlot(index)
		data[index] = elem

	override function add(T elem)
		usedSlots++
		checkSize(maxSize)
		data[usedSlots - 1] = elem

	override function add(int index, T elem)
		usedSlots++
		checkSize(maxSize)
		checkSlot(index)
		for i = usedSlots - 1 downto index + 1
			data[i] = data[i - 1]
		data[index] = elem

	override function remove(int index)
		usedSlots--
		checkSize(maxSize)
		checkSlot(index)
		for i = index to usedSlots - 1
			data[i] = data[i + 1]

	override function getIndex(T elem) returns int
		for i = 0 to usedSlots - 1
			if data[i] == elem
				return i
		return 0

/* Generic ArrayList data class with fixed specific array size */
class ArrayListSize32<T> extends ArrayListBase implements IArrayList<T>
	private let maxSize = 32
	private T array[maxSize] data

	override function getMaxSize() returns int
		return maxSize

	override function getUsedSlots() returns int
		return usedSlots

	override function getElem(int index) returns T
		checkSlot(index)
		return data[index]

	override function setElem(int index, T elem)
		checkSlot(index)
		data[index] = elem

	override function add(T elem)
		usedSlots++
		checkSize(maxSize)
		data[usedSlots - 1] = elem

	override function add(int index, T elem)
		usedSlots++
		checkSize(maxSize)
		checkSlot(index)
		for i = usedSlots - 1 downto index + 1
			data[i] = data[i - 1]
		data[index] = elem

	override function remove(int index)
		usedSlots--
		checkSize(maxSize)
		checkSlot(index)
		for i = index to usedSlots - 1
			data[i] = data[i + 1]

	override function getIndex(T elem) returns int
		for i = 0 to usedSlots - 1
			if data[i] == elem
				return i
		return 0

/** A generic list based on dynamically sized arrays. */
public class ArrayList<T>
	private let minPossibleSize = 2
	private let maxPossibleSize = 32
	private constant int minSize  // User defined min size for this instance
	private IArrayList<T> data

	construct()
		minSize = minPossibleSize
		data = createData(minSize)
	construct(int minSize)
		this.minSize = validizeSize(minSize)
		data = createData(this.minSize)

	ondestroy
		destroy data

	private function createData(int validatedSize) returns IArrayList<T>
		switch validatedSize
			case 2
				return new ArrayListSize2<T>()
			case 4
				return new ArrayListSize4<T>()
			case 8
				return new ArrayListSize8<T>()
			case 16
				return new ArrayListSize16<T>()
			case 32
				return new ArrayListSize32<T>()
		return null

	private function validizeSize(int newSize) returns int
		// Check if newSize is between the general valid boundaries:
		if newSize <= 0
			Log.error("ERROR: Size of ArrayList has to be bigger than 0")
		else if newSize > maxPossibleSize
			Log.error("ERROR: Size of ArrayList can't be bigger than " + maxPossibleSize.toString())
		// Evaluate min valid size:
		var validatedSize = minPossibleSize
		while newSize > validatedSize
			validatedSize *= 2
		return validatedSize

	private function resize(int newSize)
		var validatedSize = validizeSize(newSize)
		// Restrict resizing to user defined min size of this instance:
		if validatedSize < minSize
			validatedSize = minSize
		// Check if resizing is necessary:
		if validatedSize == data.getMaxSize()
			return
		// Check if resizing is valid:
		if validatedSize < data.getUsedSlots()
			Log.error("ERROR: Can't resize ArrayList to " + validatedSize.toString() + " because it is smaller than the used slots " + data.getUsedSlots().toString())
		// Create new data with copied elements:
		let newData = createData(validatedSize)
		for i = 0 to data.getUsedSlots() - 1
			newData.add(data.getElem(i))
		// Replace old data:
		destroy data
		data = newData

	/** Get the current size of the list. */
	function size() returns int
		return data.getUsedSlots()

	/** Return whether the list is empty. */
	function isEmpty() returns bool
		return data.getUsedSlots() == 0

	/** Return whether the element exists in the list. */
	function has(T elem) returns bool
		return data.getIndex(elem) != 0

	/** Set an existing element at the given position to a new value. */
	function set(int index, T elem)
		data.setElem(index, elem)

	/** Get the element at the given index from this list. */
	function get(int index) returns T
		return data.getElem(index)

	/** Get the first element from this list. */
	function getFirst() returns T
		if isEmpty()
			return null
		return data.getElem(0)

	/** Get the last element from this list. */
	function getLast() returns T
		if isEmpty()
			return null
		return data.getElem(data.getUsedSlots() - 1)

	/** Equal to getLast function (available for compability). */
	function peek() returns T
		return getLast()

	/** Add elements to the end of the list. */
	function add(vararg T elems)
		var maxSize = data.getMaxSize()
		for elem in elems
			// Resize if used slots already occupy the current max array size:
			if data.getUsedSlots() >= maxSize
				resize(maxSize + 1)
				maxSize = data.getMaxSize()
			// Add new element:
			data.add(elem)
	/** Adds the given element directly at the given index shifting the following elements towards the back. */
	function add(T elem, int index)
		// Resize if used slots already occupy the current max array size:
		let maxSize = data.getMaxSize()
		if data.getUsedSlots() >= maxSize
			resize(maxSize + 1)
		// Add new element:
		data.add(index, elem)

	/** Remove the first occurence of the element from this list. */
	function remove(T elem)
		remove(data.getIndex(elem))
	/** Remove the element at the given index. */
	function remove(int index)
		// Remove target element:
		data.remove(index)
		// Resize if used slots now would fit into array of smaller validized size:
		let newUsedSlots = data.getUsedSlots()
		if validizeSize(newUsedSlots) < data.getMaxSize()
			resize(newUsedSlots)

	/** Replaces the first occurence of 'whichElement' with 'newElement'. */
	function replace(T whichElement, T newElement) returns boolean
		let index = data.getIndex(whichElement)
		if index == 0
			return false
		data.setElem(index, newElement)
		return true

	/** Remove all elements from this list without destroying it. */
	function clear()
		destroy data
		data = createData(minPossibleSize)

	/** Get an iterator for this list. */
	function iterator() returns ALIterator<T>
		return new ALIterator(this)

/** Iterator class for ArrayList. */
public class ALIterator<T>
	protected int i = 0
	protected ArrayList<T> list

	construct(ArrayList<T> list)
		this.list = list

	function hasNext() returns boolean
		return i < list.size()

	function lookahead() returns T
		T retVal = null
		if hasNext()
			retVal = list.get(i)
		return retVal

	function next() returns T
		i++
		return list.get(i - 1)

	function close()
		destroy this


// --------------------
// Test code
// --------------------

@Test public function testCreate()
	ArrayList<int> a = new ArrayList<int>(4)
	a.size().assertEquals("ArrayList testCreate 1", 0)
	a.add(5)
	a.size().assertEquals("ArrayList testCreate 2", 1)
	a.getLast().assertEquals("ArrayList testCreate 3", 5)
	var b = new ArrayList<int>(3)
	b.size().assertEquals("ArrayList testCreate 4", 0)
	b.add(7)
	b.size().assertEquals("ArrayList testCreate 5", 1)
	b.getLast().assertEquals("ArrayList testCreate 6", 7)
	b.getLast().assertEquals("ArrayList testCreate 7", 6)  // TEST: should be wrong (check for testing functionality)

@Test public function testAddAndGet()
	var a = new ArrayList<int>(1)
	a.add(5)
	if a.get(0) != 5
		testFail("ArrayList testAddAndGet 1", "a")
	a.add(8)
	if a.get(1) != 8
		testFail("ArrayList testAddAndGet 2", "b")
	a.add(7)
	if a.get(2) != 7
		testFail("ArrayList testAddAndGet 3", "c")