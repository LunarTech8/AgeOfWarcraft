/*-------------------------------------------------------------
// Version number:
1.0.0

// Description:
Gives predefined unit types resources wares that can be extracted by workers via the harvest ability.

// Changelog:
- 1.0.0:
Initial version.
-------------------------------------------------------------*/
package ResourceSystem
import MapBounds
import ConstantData
import MultiboardPrioritySystem
import UtilityFunctions
import Wares
import Storage
import PersonData
import OrderSystem
import Entity
import UnitIndexer
import LinkedList
import Icons
import ErrorHandling


// --------------------
// Data code
// --------------------

let MAX_AUTO_ORDER_RANGE = 1024.
let WORKERS_ICON_PATH = Icons.bTNBash

function isKilledWhenDepleted(int resourceTypeId) returns bool
	switch resourceTypeId
		// case UnitIdsCustom.Trees.beech
		// 	return true
		// case UnitIdsCustom.Trees.birch
		// 	return true
		// case UnitIdsCustom.Trees.greyOak
		// 	return true
		// case UnitIdsCustom.Trees.chestnut
		// 	return true
		case DestructableIdsCustom.Trees.spruce
			return true
		case DestructableIdsCustom.Trees.maple
			return true
		default
			return false

function getWorkProgressPerHarvest(int workerUnitId, int resourceTypeId) returns real
	switch resourceTypeId
		// case UnitIdsCustom.Trees.beech
		// 	switch workerUnitId
		// 		case UnitIdsCustom.Melee.peasant
		// 			return 0.67
		// 	return 0.5
		// case UnitIdsCustom.Trees.birch
		// 	return 0.5
		// case UnitIdsCustom.Trees.greyOak
		// 	return 0.5
		// case UnitIdsCustom.Trees.chestnut
		// 	return 0.5
		case DestructableIdsCustom.Trees.spruce
			switch workerUnitId
				case UnitIdsCustom.AoW.peasant
					return 0.67
			return 0.5
		case DestructableIdsCustom.Trees.maple
			return 0.5
		default
			return 0.

function getWaresPerFinishedWork(int resourceTypeId) returns Wares
	let wares = new Wares()
	switch resourceTypeId
		// case UnitIdsCustom.Trees.beech
		// 	wares.add(ware(WareType.WOOD, 1))
		// case UnitIdsCustom.Trees.birch
		// 	wares.add(ware(WareType.WOOD, 1))
		// case UnitIdsCustom.Trees.greyOak
		// 	wares.add(ware(WareType.WOOD, 1))
		// case UnitIdsCustom.Trees.chestnut
		// 	wares.add(ware(WareType.WOOD, 1))
		case DestructableIdsCustom.Trees.spruce
			wares.add(ware(WareType.WOOD, 1))
		case DestructableIdsCustom.Trees.maple
			wares.add(ware(WareType.WOOD, 1))
	return wares

/** Returns the harvest priority of given resource type. Higher values mean a higher priority. */
function getHarvestPriority(int resourceTypeId) returns int
	switch resourceTypeId
		// case UnitIdsCustom.Trees.beech
		// 	return 2
		// case UnitIdsCustom.Trees.birch
		// 	return 1
		// case UnitIdsCustom.Trees.greyOak
		// 	return 3
		// case UnitIdsCustom.Trees.chestnut
		// 	return 2
		case DestructableIdsCustom.Trees.spruce
			return 2
		case DestructableIdsCustom.Trees.maple
			return 1
	return 0

/** Returns the maximum concurrent amount of workers allowed for of given resource type. */
function getMaxWorkers(int resourceTypeId) returns int
	switch resourceTypeId
		// case UnitIdsCustom.Trees.beech
		// 	return 1
		// case UnitIdsCustom.Trees.birch
		// 	return 1
		// case UnitIdsCustom.Trees.greyOak
		// 	return 2
		// case UnitIdsCustom.Trees.chestnut
		// 	return 2
		case DestructableIdsCustom.Trees.spruce
			return 2
		case DestructableIdsCustom.Trees.maple
			return 3
	return 0

/** Returns the default initial wares of given resource type. */
public function getDefaultInitWares(int resourceTypeId) returns Wares
	let wares = new Wares()
	switch resourceTypeId
		// case UnitIdsCustom.Trees.beech
		// 	wares.add(ware(WareType.WOOD, GetRandomInt(6, 8)))
		// case UnitIdsCustom.Trees.birch
		// 	wares.add(ware(WareType.WOOD, GetRandomInt(4, 6)))
		// case UnitIdsCustom.Trees.greyOak
		// 	wares.add(ware(WareType.WOOD, GetRandomInt(6, 8)))
		// case UnitIdsCustom.Trees.chestnut
		// 	wares.add(ware(WareType.WOOD, GetRandomInt(4, 6)))
		case DestructableIdsCustom.Trees.spruce
			wares.add(ware(WareType.WOOD, GetRandomInt(6, 10)))
		case DestructableIdsCustom.Trees.maple
			wares.add(ware(WareType.WOOD, GetRandomInt(6, 8)))
	return wares


// --------------------
// Functional code
// --------------------

let RESOURCE_MAP = new EntityHashMap<Resource>(null)
let DESTRUCTABLE_DEATH_TRIGGER = CreateTrigger()

class Resource extends Wares
	private entity user
	private bool isKilledWhenDepleted
	private real workProgress
	private int workerCount

	construct(entity resource, bool isKilledWhenDepleted, Wares initWares)
		super(initWares)
		user = resource
		this.isKilledWhenDepleted = isKilledWhenDepleted
		workProgress = 0.
		workerCount = 0

	private function work(real workProgress) returns bool
		this.workProgress += workProgress
		if this.workProgress >= 1.
			this.workProgress -= 1.
			return true
		else
			return false

	function getEntity() returns entity
		return user

	function getWorkerCount() returns int
		return workerCount

	function getFreeWorkerSlots() returns int
		return getMaxWorkers(user.getTypeId()) - workerCount

	/** Perform harvest and returns the harvested wares. */
	function harvest(int workerUnitId) returns Wares
		let resourceUnitId = user.getTypeId()
		// Work resource:
		if work(getWorkProgressPerHarvest(workerUnitId, resourceUnitId))
			// Return harvested wares:
			return getWaresPerFinishedWork(resourceUnitId)
		// No wares harvested yet:
		return null

	function addWorker()
		if workerCount >= getMaxWorkers(user.getTypeId())
			error("Can not add more workers to resource (" + user.getName() + ")")
		workerCount += 1

	function removeWorker()
		if workerCount <= 0
			error("Can not remove more workers from resource (" + user.getName() + ")")
		workerCount -= 1

	function checkForDepletionKill() returns bool
		if isKilledWhenDepleted and isEmpty()
			return true
		return false


function entity.addResource() returns Resource
	if getMaxWorkers(this.getTypeId()) > 0 and RESOURCE_MAP.has(this) == false
		let resourceTypeId = this.getTypeId()
		let resource = new Resource(this, isKilledWhenDepleted(resourceTypeId), getDefaultInitWares(resourceTypeId))
		RESOURCE_MAP.put(this, resource)
		if this.userDest != null
			DESTRUCTABLE_DEATH_TRIGGER.registerDeathEvent(this.userDest)
		return resource
	return null

function entity.removeResource()
	let resource = RESOURCE_MAP.tryRemove(this)
	if resource != null
		destroy resource

let findResources_AllowedTypeIds = new LinkedList<int>()
let findResources_ValidDestructables = new LinkedList<destructable>()
function findResources_CheckValidity(entity filterEntity) returns bool
	let resource = filterEntity.getResource(false)
	let resourceTypeId = filterEntity.getTypeId()
	// Only allow resources that have wares left and free worker slots:
	if resource != null and resource.isEmpty() == false and resource.getFreeWorkerSlots() > 0 and findResources_AllowedTypeIds.has(resourceTypeId)
		return true
	return false
/** Returns valid resources from given allowed entity types at given position. */
public function findResources(vec2 pos, LinkedList<int> allowedTypeIds) returns LinkedList<entity>
	let resources = new LinkedList<entity>()
	// Get valid units and destructables in range:
	findResources_AllowedTypeIds.clear()
	if allowedTypeIds != null
		findResources_AllowedTypeIds.addAll(allowedTypeIds)
	var filter = Filter(() -> findResources_CheckValidity(entity(GetFilterUnit(), null)))
	ENUM_GROUP.enumUnitsInRange(pos, MAX_AUTO_ORDER_RANGE, filter)
	for target from ENUM_GROUP
		resources.add(entity(target, null))
	filter.destr()
	filter = Filter(() -> findResources_CheckValidity(entity(null, GetFilterDestructable())))
	EnumDestructablesInRect(pos.withRadiusRect(MAX_AUTO_ORDER_RANGE), filter, () -> findResources_ValidDestructables.add(GetEnumDestructable()))
	for target in findResources_ValidDestructables
		resources.add(entity(null, target))
	findResources_ValidDestructables.clear()
	filter.destr()
	return resources

int findNextResource_Priority
let findNextResource_AllowedTypeIds = new LinkedList<int>()
let findNextResource_ValidPriorityUnits = CreateGroup()
let findNextResource_ValidDestructables = new LinkedList<destructable>()
function findNextResource_CheckValidity(entity filterEntity) returns bool
	let resource = filterEntity.getResource(false)
	let resourceTypeId = filterEntity.getTypeId()
	let priority = getHarvestPriority(resourceTypeId)
	// Only allow resources that have wares left, free worker slots and a high enough priority:
	if resource != null and resource.isEmpty() == false and resource.getFreeWorkerSlots() > 0 and priority >= findNextResource_Priority and (findNextResource_AllowedTypeIds.isEmpty() or findNextResource_AllowedTypeIds.has(resourceTypeId))
		findNextResource_Priority = priority
		return true
	return false
/** Returns next valid resource from given allowed entity types at given position for this unit. */
public function unit.findNextResource(real maxRange, LinkedList<int> allowedTypeIds, vec2 pos) returns entity
	// Check if worker has enough free space:
	if this.getStorage().getFreeCapacity() > 0
		// Get valid units and destructables in range and get highest priority:
		findNextResource_Priority = 0
		findNextResource_AllowedTypeIds.clear()
		findNextResource_AllowedTypeIds.addAll(allowedTypeIds)
		var filter = Filter(() -> findNextResource_CheckValidity(entity(GetFilterUnit(), null)))
		ENUM_GROUP.enumUnitsInRange(pos, maxRange, filter)
		filter.destr()
		filter = Filter(() -> findNextResource_CheckValidity(entity(null, GetFilterDestructable())))
		EnumDestructablesInRect(pos.withRadiusRect(maxRange), filter, () -> findNextResource_ValidDestructables.add(GetEnumDestructable()))
		filter.destr()
		// Remove lower priority units and destructables:
		for target from ENUM_GROUP
			if getHarvestPriority(target.getUnitId()) == findNextResource_Priority
				findNextResource_ValidPriorityUnits.addUnit(target)
		let validPriorityDestructables = new LinkedList<destructable>()
		for target in findNextResource_ValidDestructables
			if getHarvestPriority(target.getTypeId()) == findNextResource_Priority
				validPriorityDestructables.add(target)
		findNextResource_ValidDestructables.clear()
		// Return nearest valid entity:
		var nearestUnit = pos.getNearestUnit(findNextResource_ValidPriorityUnits, true)
		var nearestDest = pos.getNearestDestructable(validPriorityDestructables)
		destroy(validPriorityDestructables)
		if nearestUnit != null and nearestDest != null
			if pos.distanceToSq(nearestUnit.getPos()) <= pos.distanceToSq(nearestDest.getPos())
				nearestDest = null
			else
				nearestUnit = null
		return entity(nearestUnit, nearestDest)
	else
		return entity(null, null)
/** Returns next valid resource from given allowed entity types for this unit. */
public function unit.findNextResource(real maxRange, LinkedList<int> allowedTypeIds) returns entity
	return this.findNextResource(maxRange, allowedTypeIds, this.getPos())

/** Returns the resource of given entity. */
public function entity.getResource(bool assertNotNull) returns Resource
	if assertNotNull
		return RESOURCE_MAP.get(this)
	else
		return RESOURCE_MAP.tryGet(this)

/** Returns the count of all resources. */
public function getResourceCount() returns int
	return RESOURCE_MAP.getValueCount()

/** Trys to add this entity as resource. Returns if it could be added. */
public function entity.tryAddResouce() returns bool
	return this.addResource() != null

/** Try to set system relevant infos for given object in this multiboard. Returns if it could be set. */
public function multiboard.trySetObjectInfoMultiboard(Resource object) returns bool
	if object == null
		return false
	this.addMultiboardLine("Resource: " + object.getEntity().getName(), HEADLINE_ICON_PATH)
	this.addMultiboardLine("Workers: " + object.getWorkerCount().toString() + "/" + getMaxWorkers(object.getEntity().getTypeId()).toString(), WORKERS_ICON_PATH)
	for ware in object
		this.addMultiboardLine(ware.count.toString() + " " + ware.toString(true), ware.getIconPath())
	return true

init
	// Add resource to every appropriate new unit:
	onUnitIndex(() -> entity(getIndexingUnit(), null).addResource())
	// Remove resource and target order from every appropriate removed unit:
	onUnitDeindex() ->
		let removedEntity = entity(getIndexingUnit(), null)
		removedEntity.removeTargetOrder()
		removedEntity.removeResource()
	// Add initially placed destructables:
	EnumDestructablesInRectAll(playableMapRect) ->
		let enumDestructable = GetEnumDestructable()
		entity(null, enumDestructable).addResource()
	// Remove resource and target order from every appropriate killed destructable:
	DESTRUCTABLE_DEATH_TRIGGER.addAction() ->
		let killedEntity = entity(null, GetDyingDestructable())
		killedEntity.removeTargetOrder()
		killedEntity.removeResource()