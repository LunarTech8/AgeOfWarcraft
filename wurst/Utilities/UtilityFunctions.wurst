/*-------------------------------------------------------------
// Version number:
1.01

// Description:
Contains generic utility functions that aren't tied directly to a specific system.

// Changelog:
- 1.01:
Initial version.
-------------------------------------------------------------*/
package UtilityFunctions
import HashMap
import ConstantDataSystem
import Interpolation
import Array2D
import Orders


// --------------------
// Data code
// --------------------

let MAX_COMPUTATION_COST_PER_CYCLE = 256.

public let MIN_TRIGGER_SLEEP_TIME = 0.01

function initBaseUnitTypeIdMap() returns HashMap<int, int>
	let map = new HashMap<int, int>
	map.put(UnitIdsCustom.beech_Var1, UnitIdsCustom.beech)
	map.put(UnitIdsCustom.beech_Var2, UnitIdsCustom.beech)
	map.put(UnitIdsCustom.beech_Var3, UnitIdsCustom.beech)
	map.put(UnitIdsCustom.beech_Var4, UnitIdsCustom.beech)
	map.put(UnitIdsCustom.birch_Var1, UnitIdsCustom.birch)
	map.put(UnitIdsCustom.birch_Var2, UnitIdsCustom.birch)
	map.put(UnitIdsCustom.birch_Var3, UnitIdsCustom.birch)
	map.put(UnitIdsCustom.greyOak_Var1, UnitIdsCustom.greyOak)
	map.put(UnitIdsCustom.greyOak_Var2, UnitIdsCustom.greyOak)
	map.put(UnitIdsCustom.greyOak_Var3, UnitIdsCustom.greyOak)
	map.put(UnitIdsCustom.greyOak_Var4, UnitIdsCustom.greyOak)
	map.put(UnitIdsCustom.chestnut_Var1, UnitIdsCustom.chestnut)
	map.put(UnitIdsCustom.chestnut_Var2, UnitIdsCustom.chestnut)
	return map

/** Returns the unit type id of a random variation of given base unit id. Required for unit creation. */
public function int.getUnitTypeId() returns int
	switch this
		case UnitIdsCustom.beech
			return getRandomInputInt(UnitIdsCustom.beech_Var1, UnitIdsCustom.beech_Var2, UnitIdsCustom.beech_Var3, UnitIdsCustom.beech_Var4)
		case UnitIdsCustom.birch
			return getRandomInputInt(UnitIdsCustom.birch_Var1, UnitIdsCustom.birch_Var2, UnitIdsCustom.birch_Var3)
		case UnitIdsCustom.greyOak
			return getRandomInputInt(UnitIdsCustom.greyOak_Var1, UnitIdsCustom.greyOak_Var2, UnitIdsCustom.greyOak_Var3, UnitIdsCustom.greyOak_Var4)
		case UnitIdsCustom.chestnut
			return getRandomInputInt(UnitIdsCustom.chestnut_Var1, UnitIdsCustom.chestnut_Var2)
	return this

/** Returns the order needed to cast the given ability id. */
public function int.getAbilityOrder() returns string
	switch this
		case AbilityIdsCustom.harvest
			return "thunderbolt"
		case AbilityIdsCustom.build
			return "shadowstrike"
		case AbilityIdsCustom.showTargetInfo
			return "thunderbolt"
		case AbilityIdsCustom.transferWares
			return "frostnova"
		case AbilityIdsCustom.addBuildingBuff
			return "innerfire"
		default
			Log.error("ERROR: unmapped ability id (" + this.toString() + ")")
			return null

/** Returns the order name of the given order or ability id. */
public function int.getOrderName() returns string
	switch this
		case OrderIds.smart
			return "smart"
		case OrderIds.move
			return "move"
		case OrderIds.stop
			return "stop"
		case OrderIds.attack
			return "attack"
		case OrderIds.attackground
			return "attack ground"
		case OrderIds.holdposition
			return "hold position"
		case OrderIds.patrol
			return "patrol"
		case OrderIds.repair
			return "repair"
		case OrderIds.repairon
			return "repair on"
		case OrderIds.repairoff
			return "repair off"
		case OrderIds.thunderbolt
			return "thunderbolt based ability"
		case OrderIds.frostnova
			return "frostnova based ability"
		case OrderIds.shadowstrike
			return "shadowstrike based ability"
		case OrderIds.undefend
			return null
		case AbilityIdsCustom.harvest
			return "harvest"
		case AbilityIdsCustom.build
			return "build"
		default
			if this < 2013265920  // Ignore unit ids
				Log.error("ERROR: unmapped order/ability id (" + this.toString() + ")")
			return null

// --------------------
// Functional code
// --------------------

let BASE_UNIT_TYPE_ID_MAP = initBaseUnitTypeIdMap()

/** Returns the base unit id of given unit. Required for data evaluation. */
public function unit.getUnitId() returns int
	let id = GetUnitTypeId(this)
	if BASE_UNIT_TYPE_ID_MAP.has(id)
		return BASE_UNIT_TYPE_ID_MAP.get(id)
	return id

/** Returns the nearest unit from given pos in given max range of given player. */
public function vec2.getNearestUnit(real maxRange, boolexpr filter, player owner) returns unit
	// Set init values:
	var bestDistanceSq = REAL_MAX
	unit nearestUnit = null
	// Filter out invalid units in range:
	ENUM_GROUP.enumUnitsInRange(this, maxRange, filter)
	// Find nearest unit:
	for target from ENUM_GROUP
		if owner == null or target.getOwner() == owner
			let distanceSq = this.distanceToSq(target.getPos())
			if distanceSq < bestDistanceSq
				bestDistanceSq = distanceSq
				nearestUnit = target
	return nearestUnit
/** Returns the nearest unit from given pos in given max range. */
public function vec2.getNearestUnit(real maxRange, boolexpr filter) returns unit
	return this.getNearestUnit(maxRange, filter, null)

/** Issues unit to cast given ability on target widget. The ability can be reset beforehand to bypass the cooldown. */
public function unit.issueTargetAbilityOrder(int abilityId, widget target, bool resetAbility) returns boolean
	if resetAbility
		this.removeAbility(abilityId)
		this.addAbility(abilityId)
	return this.issueTargetOrder(abilityId.getAbilityOrder(), target)

/** Replaces unit with a new unit of given type. */
public function unit.replace(int unitTypeId) returns unit
	this.hide()
	let newUnit = createUnit(this.getOwner(), unitTypeId, this.getPos(), this.getFacingAngle())
	this.kill()
	this.remove()
	return newUnit

/** Returns random value of given inputs. */
public function getRandomInputInt(vararg int inputs) returns int
	var count = 0
	for _input in inputs
		count += 1
	let i = GetRandomInt(1, count)
	count = 0
	for input in inputs
		count += 1
		if i == count
			return input
	return 0

/** Returns random value of given inputs. */
public function getRandomInputReal(vararg real inputs) returns real
	var count = 0
	for _input in inputs
		count += 1
	let i = GetRandomInt(1, count)
	count = 0
	for input in inputs
		count += 1
		if i == count
			return input
	return 0

/** Returns random angle (bewteen 0 and 2*pi). */
public function getRandomAngle() returns angle
	return angle(GetRandomReal(0., PI2))
/** Returns random angle bewteen min and max. */
public function getRandomAngle(real min, real max) returns angle
	if min < 0. or max > PI2 or min > max
		Log.error("ERROR: Invalid min and/or max value")
	return angle(GetRandomReal(min, max))

/** Returns random sign (-1 or 1). */
public function getRandomSign() returns int
	if GetRandomInt(0, 1) == 0
		return -1
	else
		return 1

/** Throws an exception if the absolute of the given value is smaller than epsilon, else returns the value. */
public function real.divByZeroProt(real epsilon) returns real
	if this.abs() <= epsilon
		Log.error("Invalid divisor value (" + this.toString() + ")")
	return this
/** Throws an exception if the absolute of the given value is smaller than 10^-7, else returns the value. */
public function real.divByZeroProt() returns real
	return this.divByZeroProt(0.0000001)
/** Throws an exception if the given value is 0, else returns the value. */
public function int.divByZeroProt() returns int
	if this == 0
		Log.error("Invalid divisor value (" + this.toString() + ")")
	return this

public function checkComputationCost(real currentCompCost) returns real
	if currentCompCost >= MAX_COMPUTATION_COST_PER_CYCLE
		if currentCompCost >= 2 * MAX_COMPUTATION_COST_PER_CYCLE
			Log.warn("DEBUG: Bad placement of checkComputationCost (Residual cost of " + (currentCompCost - MAX_COMPUTATION_COST_PER_CYCLE).toString() + ")")
		TriggerSleepAction(MIN_TRIGGER_SLEEP_TIME)
		return 0.
	return currentCompCost

function smoothNoise(Array2D<real> baseNoise, string interpolation, int octave) returns Array2D<real>
	var compCost = 0.
	// Check interpolation method:
	var interpolationMethod = 0
	if interpolation == "Linear"
		interpolationMethod = 0
	else if interpolation == "Cosine"
		interpolationMethod = 1
	else
		Log.error("Invalid interpolation method")
	// Create smooth noise map:
	let width = baseNoise.sizeX()
	let height = baseNoise.sizeY()
	let smoothNoise = new Array2D<real>(width, height)
	let samplePeriod = (2).pow(octave)
	let sampleFrequency = 1. / samplePeriod
	for i = 0 to width - 1
		// Calculate the horizontal sampling indices:
		var horizontalSampleA = (i div samplePeriod) * samplePeriod
		var horizontalSampleB = (horizontalSampleA + samplePeriod) mod width  // Wrap around
		var horizontalBlend = (i - horizontalSampleA) * sampleFrequency
		if interpolationMethod == 1
			horizontalBlend = (1 - Cos(horizontalBlend * PI)) * 0.5
		for j = 0 to height - 1
			// Calculate the vertical sampling indices:
			var verticalSampleA = (j div samplePeriod) * samplePeriod
			var verticalSampleB = (verticalSampleA + samplePeriod) mod height  // Wrap around
			var verticalBlend = (j - verticalSampleA) * sampleFrequency
			if interpolationMethod == 1
				verticalBlend = (1 - Cos(verticalBlend * PI)) * 0.5
			// Blend the top two corners:
			var top = linear(baseNoise.get(horizontalSampleA, verticalSampleA), baseNoise.get(horizontalSampleB, verticalSampleA), horizontalBlend)
			// Blend the bottom two corners:
			var bottom = linear(baseNoise.get(horizontalSampleA, verticalSampleB), baseNoise.get(horizontalSampleB, verticalSampleB), horizontalBlend)
			// Final blend:
			smoothNoise.set(i, j, linear(top, bottom, verticalBlend))
			compCost += 0.3
		compCost = checkComputationCost(compCost)
	return smoothNoise

/** Generates random noise map of given size (width, height) with values between 0 and 1. */
public function generateRandomNoise(int width, int height) returns Array2D<real>
	var compCost = 0.
	let baseNoise = new Array2D<real>(width, height)
	// Create base noise map:
	for i = 0 to width - 1
		for j = 0 to height - 1
			baseNoise.set(i, j, GetRandomReal(0., 1.))
			compCost += 0.1
		compCost = checkComputationCost(compCost)
	return baseNoise

/** Generates perlin noise map of given size (width, height) with values between 0 and 1.
	High octave counts gernerate maps with bigger plateaus. Values below 2 will return an unsmoothed random noise map.
	Persistance defines the smoothness of the map. Low values towards 0 give very smooth maps.
	Available interpolations: Linear, Cosine
	Available distributions: Default = "Bell shaped", Slope = "Half bell shaped, peak at 0", Uniform = "Evenly distributed, no peak" */
public function generatePerlinNoise(int width, int height, int octaveCount, real persistance, string interpolation, string distribution) returns Array2D<real>
	var compCost = 0.
	Array2D<real> perlinNoise
	if octaveCount > 1
		let baseNoise = generateRandomNoise(width, height)
		compCost += (width * height * 0.1) % MAX_COMPUTATION_COST_PER_CYCLE  // Factor in residual computation cost
		var amplitude = 1.
		var totalAmplitude = 0.
		// Blend noise together:
		perlinNoise = new Array2D<real>(width, height)
		for octave = octaveCount - 1 downto 0
			var smoothNoise = smoothNoise(baseNoise, interpolation, octave)
			compCost += (width * height * 0.3) % MAX_COMPUTATION_COST_PER_CYCLE  // Factor in residual computation cost
			amplitude *= persistance
			totalAmplitude += amplitude
			for i = 0 to width - 1
				for j = 0 to height - 1
					if octave == octaveCount - 1
						perlinNoise.set(i, j, smoothNoise.get(i, j) * amplitude)
					else
						perlinNoise.set(i, j, perlinNoise.get(i, j) + smoothNoise.get(i, j) * amplitude)
					compCost += 0.1
				compCost = checkComputationCost(compCost)
			destroy smoothNoise
		destroy baseNoise
		// Normalisation:
		for i = 0 to width - 1
			for j = 0 to height - 1
				perlinNoise.set(i, j, perlinNoise.get(i, j) / totalAmplitude)
				compCost += 0.1
			compCost = checkComputationCost(compCost)
	else
		perlinNoise = generateRandomNoise(width, height)
		compCost += (width * height * 0.1) % MAX_COMPUTATION_COST_PER_CYCLE  // Factor in residual computation cost
	// Postprocessing:
	if distribution == "Default"  // Standard bell shaped curve
		return perlinNoise
	else if distribution == "Slope"  // Half bell shaped curve with peak at 0
		for i = 0 to width - 1
			for j = 0 to height - 1
				perlinNoise.set(i, j, (perlinNoise.get(i, j) * 2 - 1).abs())
				compCost += 0.1
			compCost = checkComputationCost(compCost)
	else if distribution == "Uniform"  // Horizontal curve with no peak
		if width % 2 != 0
			Log.error("width (=" + width.toString() + ") has to be even for Uniform distribution")
		for i = 0 to (width div 2) - 1
			for j = 0 to height - 1
				// Reverse Box–Muller transformation:
				var z1 = perlinNoise.get(i, j)
				var z2 = perlinNoise.get(width - 1 - i, j)
				perlinNoise.set(i, j, EULER.pow(-0.5 * (z1 * z1 + z2 * z2)))
				var acosInput = z1 / (z1 * z1 + z2 * z2).divByZeroProt()
				if acosInput.abs() > 1
					Log.error("Acos only allows numbers between -1 and 1")
				perlinNoise.set(width - 1 - i, j, Acos(acosInput) / (2 * PI))
				compCost += 0.2
			compCost = checkComputationCost(compCost)
	else
		Log.error("Invalid distribution method")
	return perlinNoise
public function generatePerlinNoise(int width, int height, int octaveCount, real persistance, string interpolation) returns Array2D<real>
	return generatePerlinNoise(width, height, octaveCount, persistance, interpolation, "Default")
public function generatePerlinNoise(int width, int height, int octaveCount) returns Array2D<real>
	return generatePerlinNoise(width, height, octaveCount, .5, "Linear")