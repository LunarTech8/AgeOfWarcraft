/*-------------------------------------------------------------
// Version number:
1.0.0

// Description:
Initializes startup processes.

// Changelog:
- 1.0.0:
Initial version.
-------------------------------------------------------------*/
package Startup
import ConstantData
import ClosureTimers
import StorageSystem
import Stock
import SettlementSystem
import DepositorySystem
import WorldGenerationSystem
import LoadStatusSystem
import ComputationControl


// --------------------
// Data code
// --------------------

// Player units:
let START_PEASANT_COUNT = 5
let START_WOOD_COUNT_PER_PEASANT = 5


// --------------------
// Functional code
// --------------------

function createPlayerUnits()
	newInitStatus("Player units creation")
	let settlementCentre = createDepositoryBuilding(Settings.USER_PLAYER, UnitIdsCustom.AoW.townHall, MapData.START_VEC, angle(225.)).addAsSettlement()
	for i = 1 to START_PEASANT_COUNT
		let u = createUnit(Settings.USER_PLAYER, UnitIdsCustom.AoW.peasant, MapData.START_VEC, angle(0.))
		nullTimer() ->
			u.tryAddToSettlement(settlementCentre)
			let storage = u.getStorage()
			if storage != null
				storage.addWare(ware(WareType.WOOD, START_WOOD_COUNT_PER_PEASANT))
	createUnit(Settings.USER_PLAYER, UnitIdsCustom.AoW.footman, MapData.START_VEC, angle(0.)).tryAddToSettlement(settlementCentre)

function runStartup()
	SetMusicVolume(0)  // DEBUG: only for development
	if MapData.GENERATE_MAP
		startInitStatus("Initialisation", 4)
		createWorldData()
		forceComputationBreak()
		createTerrain()
		forceComputationBreak()
		createPlants()
		forceComputationBreak()
	else
		startInitStatus("Initialisation", 2)
		replaceDestructables()
		forceComputationBreak()
	createPlayerUnits()
	newInitStatus(null)

init
	// Use a trigger to allow the use of computation breaks:
	CreateTrigger()
	..addAction(function runStartup)
	..execute()